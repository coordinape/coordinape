generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model circle_metadata {
  id         BigInt    @id @default(autoincrement())
  circle_id  BigInt
  json       Json?     @db.Json
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  circles    Circle    @relation(fields: [circle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "circle_metadata_circle_id_foreign")

  @@index([circle_id])
}

model Circle {
  id                    BigInt                @id @default(autoincrement())
  name                  String                @db.VarChar(510)
  created_at            DateTime?             @default(now()) @db.Timestamp(6)
  updated_at            DateTime?             @default(now()) @db.Timestamp(6)
  protocol_id           Int?
  token_name            String                @default("GIVE") @db.VarChar(510)
  team_sel_text         String?
  alloc_text            String?
  telegram_id           String?               @db.VarChar(510)
  logo                  String?               @db.VarChar(510)
  vouching              Boolean               @default(false)
  min_vouches           Int                   @default(2)
  nomination_days_limit Int                   @default(14)
  vouching_text         String?
  default_opt_in        Boolean               @default(false)
  team_selection        Boolean               @default(true)
  discord_webhook       String?               @db.VarChar(510)
  only_giver_vouch      Boolean               @default(true)
  is_verified           Boolean               @default(false)
  circle_metadata       circle_metadata[]
  pending_token_gifts   pending_token_gifts[]
  token_gifts           Gift[]
  users                 User[]

  @@map("circles")
}

model Epoch {
  id                  BigInt    @id @default(autoincrement())
  number              Int?
  start_date          DateTime? @db.Timestamptz(6)
  end_date            DateTime  @default(now()) @db.Timestamptz(6)
  circle_id           Int
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  ended               Boolean   @default(false)
  notified_start      DateTime? @db.Timestamp(6)
  notified_before_end DateTime? @db.Timestamp(6)
  notified_end        DateTime? @db.Timestamp(6)
  grant               Decimal   @default(0.00) @db.Decimal(20, 2)
  regift_days         Int       @default(1)
  days                Int?
  repeat              Int       @default(0)
  repeat_day_of_month Int       @default(0)

  @@map("epoches")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique @db.VarChar(510)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(6)
}

model feedbacks {
  id                BigInt    @id @default(autoincrement())
  user_id           Int
  telegram_username String    @db.VarChar(510)
  message           String
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
}

model histories {
  id         BigInt    @id @default(autoincrement())
  user_id    Int
  bio        String?
  epoch_id   Int
  circle_id  Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}

model jobs {
  id           BigInt  @id @default(autoincrement())
  queue        String  @db.VarChar(510)
  payload      String
  attempts     Boolean
  reserved_at  Int?
  available_at Int
  created_at   Int
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(510)
  batch     Int
}

model nominees {
  id                   BigInt    @id @default(autoincrement())
  name                 String    @db.VarChar(510)
  address              String    @db.VarChar(510)
  nominated_by_user_id Int
  circle_id            Int
  description          String
  nominated_date       DateTime  @db.Date
  expiry_date          DateTime  @db.Date
  vouches_required     Int
  user_id              Int?
  ended                Boolean   @default(false)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)
}

model pending_token_gifts {
  id                                            BigInt    @id @default(autoincrement())
  sender_id                                     BigInt
  sender_address                                String    @db.VarChar(510)
  recipient_id                                  BigInt
  recipient_address                             String    @db.VarChar(510)
  tokens                                        Int
  note                                          String?
  dts_created                                   DateTime  @default(now()) @db.Timestamp(6)
  created_at                                    DateTime? @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime? @default(now()) @db.Timestamp(6)
  circle_id                                     BigInt
  epoch_id                                      Int?
  circles                                       Circle    @relation(fields: [circle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pending_token_gifts_circle_id_foreign")
  users_pending_token_gifts_recipient_idTousers User      @relation("pending_token_gifts_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pending_token_gifts_recipient_id_foreign")
  users_pending_token_gifts_sender_idTousers    User      @relation("pending_token_gifts_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pending_token_gifts_sender_id_foreign")

  @@index([circle_id])
  @@index([recipient_id])
  @@index([sender_id])
}

model AccessToken {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(510)
  tokenable_id   BigInt
  name           String    @db.VarChar(510)
  token          String    @unique @db.VarChar(128)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(6)
  created_at     DateTime? @db.Timestamp(6)
  updated_at     DateTime? @db.Timestamp(6)

  @@map("personal_access_tokens")
}

model Profile {
  id                BigInt    @id @default(autoincrement())
  avatar            String?   @db.VarChar(510)
  background        String?   @db.VarChar(510)
  skills            String?
  bio               String?
  telegram_username String?   @db.VarChar(510)
  discord_username  String?   @db.VarChar(510)
  twitter_username  String?   @db.VarChar(510)
  github_username   String?   @db.VarChar(510)
  medium_username   String?   @db.VarChar(510)
  website           String?   @db.VarChar(510)
  address           String    @unique @db.VarChar(510)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  admin_view        Boolean   @default(false)
  ann_power         Boolean   @default(false)
  chat_id           String?   @db.VarChar(510)

  @@map("profiles")
}

model protocols {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(510)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  telegram_id String?   @db.VarChar(510)
  is_verified Boolean   @default(false)
}

model teammates {
  id           BigInt    @id @default(autoincrement())
  user_id      Int
  team_mate_id Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
}

model Gift {
  id                BigInt    @id @default(autoincrement())
  sender_id         BigInt
  sender_address    String    @db.VarChar(510)
  recipient_id      BigInt
  recipient_address String    @db.VarChar(510)
  tokens            Int
  note              String?
  dts_created       DateTime  @default(now()) @db.Timestamp(6)
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime? @default(now()) @db.Timestamp(6)
  circle_id         BigInt
  epoch_id          Int
  circles           Circle    @relation(fields: [circle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_gifts_circle_id_foreign")
  recipients        User      @relation("token_gifts_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_gifts_recipient_id_foreign")
  senders           User      @relation("token_gifts_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "token_gifts_sender_id_foreign")

  @@index([circle_id])
  @@index([recipient_id])
  @@index([sender_id])
  @@map("token_gifts")
}

model User {
  id                                                          BigInt                @id @default(autoincrement())
  name                                                        String                @db.VarChar(510)
  address                                                     String                @db.VarChar(510)
  give_token_received                                         Int                   @default(0)
  give_token_remaining                                        Int                   @default(100)
  role                                                        Int                   @default(0)
  non_receiver                                                Boolean               @default(true)
  circle_id                                                   BigInt
  created_at                                                  DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                                                  DateTime?             @default(now()) @db.Timestamp(6)
  bio                                                         String?
  epoch_first_visit                                           Boolean               @default(true)
  non_giver                                                   Boolean               @default(false)
  deleted_at                                                  DateTime?             @db.Timestamp(6)
  starting_tokens                                             Int                   @default(100)
  fixed_non_receiver                                          Boolean               @default(false)
  circles                                                     Circle                @relation(fields: [circle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_circle_id_foreign")
  pending_token_gifts_pending_token_gifts_recipient_idTousers pending_token_gifts[] @relation("pending_token_gifts_recipient_idTousers")
  pending_token_gifts_pending_token_gifts_sender_idTousers    pending_token_gifts[] @relation("pending_token_gifts_sender_idTousers")
  token_gifts_token_gifts_recipient_idTousers                 Gift[]                @relation("token_gifts_recipient_idTousers")
  token_gifts_token_gifts_sender_idTousers                    Gift[]                @relation("token_gifts_sender_idTousers")

  @@index([circle_id])
  @@map("users")
}

model vouches {
  id         BigInt    @id @default(autoincrement())
  voucher_id Int
  nominee_id Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
}
