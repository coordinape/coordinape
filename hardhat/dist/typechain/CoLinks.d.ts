/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface CoLinksInterface extends ethers.utils.Interface {
  functions: {
    'baseFeeMax()': FunctionFragment;
    'buyLinks(address,uint256)': FunctionFragment;
    'getBuyPrice(address,uint256)': FunctionFragment;
    'getBuyPriceAfterFee(address,uint256)': FunctionFragment;
    'getPrice(uint256,uint256)': FunctionFragment;
    'getSellPrice(address,uint256)': FunctionFragment;
    'getSellPriceAfterFee(address,uint256)': FunctionFragment;
    'linkBalance(address,address)': FunctionFragment;
    'linkSupply(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'protocolFeeDestination()': FunctionFragment;
    'protocolFeePercent()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'sellLinks(address,uint256)': FunctionFragment;
    'setBaseFeeMax(uint256)': FunctionFragment;
    'setFeeDestination(address)': FunctionFragment;
    'setProtocolFeePercent(uint256)': FunctionFragment;
    'setTargetFeePercent(uint256)': FunctionFragment;
    'targetFeePercent()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'baseFeeMax',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'buyLinks',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBuyPrice',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getBuyPriceAfterFee',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrice',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSellPrice',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSellPriceAfterFee',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'linkBalance',
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: 'linkSupply', values: [string]): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'protocolFeeDestination',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'protocolFeePercent',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'sellLinks',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBaseFeeMax',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setFeeDestination',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setProtocolFeePercent',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setTargetFeePercent',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'targetFeePercent',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: 'baseFeeMax', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyLinks', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getBuyPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getBuyPriceAfterFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getSellPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSellPriceAfterFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'linkBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'linkSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFeeDestination',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFeePercent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'sellLinks', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setBaseFeeMax',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setFeeDestination',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setProtocolFeePercent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTargetFeePercent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'targetFeePercent',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;

  events: {
    'LinkTx(address,address,bool,uint256,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LinkTx'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class CoLinks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoLinksInterface;

  functions: {
    baseFeeMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSellPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    linkBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    linkSupply(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<[string]>;

    protocolFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseFeeMax(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

  buyLinks(
    linkTarget: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyPrice(
    linkTarget: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyPriceAfterFee(
    linkTarget: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    supply: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellPrice(
    linkTarget: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSellPriceAfterFee(
    linkTarget: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  linkBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  linkSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFeeDestination(overrides?: CallOverrides): Promise<string>;

  protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellLinks(
    linkTarget: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseFeeMax(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeDestination(
    _feeDestination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetFeePercent(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    buyLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<string>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseFeeMax(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setFeeDestination(
      _feeDestination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetFeePercent(
      _feePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    targetFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LinkTx(
      holder?: null,
      target?: null,
      isBuy?: null,
      linkAmount?: null,
      ethAmount?: null,
      protocolEthAmount?: null,
      targetEthAmount?: null,
      supply?: null
    ): TypedEventFilter<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        holder: string;
        target: string;
        isBuy: boolean;
        linkAmount: BigNumber;
        ethAmount: BigNumber;
        protocolEthAmount: BigNumber;
        targetEthAmount: BigNumber;
        supply: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    baseFeeMax(overrides?: CallOverrides): Promise<BigNumber>;

    buyLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeDestination(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseFeeMax(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseFeeMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      supply: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPrice(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellPriceAfterFee(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeDestination(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellLinks(
      linkTarget: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFeeMax(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDestination(
      _feeDestination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetFeePercent(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
