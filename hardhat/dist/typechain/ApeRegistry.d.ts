/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ApeRegistryInterface extends ethers.utils.Interface {
  functions: {
    "cancel(bytes32)": FunctionFragment;
    "changeMinDelay(uint256)": FunctionFragment;
    "distributor()": FunctionFragment;
    "execute(address,bytes,bytes32,bytes32,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeRegistry()": FunctionFragment;
    "isDoneCall(bytes32)": FunctionFragment;
    "isPendingCall(bytes32)": FunctionFragment;
    "isReadyCall(bytes32)": FunctionFragment;
    "minDelay()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "schedule(address,bytes,bytes32,bytes32,uint256)": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setFeeRegistry(address)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "timestamps(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "changeMinDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDoneCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPendingCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "minDelay", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeRegistry",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "timestamps",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isDoneCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPendingCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "CallCancelled(bytes32)": EventFragment;
    "CallExecuted(bytes32,address,bytes)": EventFragment;
    "CallScheduled(bytes32,address,bytes,bytes32,uint256)": EventFragment;
    "DistributorChanged(address)": EventFragment;
    "FactoryChanged(address)": EventFragment;
    "FeeRegistryChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RouterChanged(address)": EventFragment;
    "TreasuryChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRegistryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryChanged"): EventFragment;
}

export class ApeRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ApeRegistryInterface;

  functions: {
    cancel(
      _id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinDelay(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributor(overrides?: CallOverrides): Promise<[string]>;

    execute(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeRegistry(overrides?: CallOverrides): Promise<[string]>;

    isDoneCall(_id: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isPendingCall(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReadyCall(_id: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    minDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    schedule(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  cancel(
    _id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinDelay(
    _min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributor(overrides?: CallOverrides): Promise<string>;

  execute(
    _target: string,
    _data: BytesLike,
    _predecessor: BytesLike,
    _salt: BytesLike,
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeRegistry(overrides?: CallOverrides): Promise<string>;

  isDoneCall(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isPendingCall(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isReadyCall(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  minDelay(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  schedule(
    _target: string,
    _data: BytesLike,
    _predecessor: BytesLike,
    _salt: BytesLike,
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    _distributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timestamps(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cancel(_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    changeMinDelay(
      _min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributor(overrides?: CallOverrides): Promise<string>;

    execute(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeRegistry(overrides?: CallOverrides): Promise<string>;

    isDoneCall(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isPendingCall(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isReadyCall(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    minDelay(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    schedule(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributor(
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(_factory: string, overrides?: CallOverrides): Promise<void>;

    setFeeRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    setRouter(_router: string, overrides?: CallOverrides): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    timestamps(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    CallCancelled(id?: null): TypedEventFilter<[string], { id: string }>;

    CallExecuted(
      id?: BytesLike | null,
      target?: null,
      data?: null
    ): TypedEventFilter<
      [string, string, string],
      { id: string; target: string; data: string }
    >;

    CallScheduled(
      id?: BytesLike | null,
      target?: null,
      data?: null,
      predecessor?: null,
      delay?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        id: string;
        target: string;
        data: string;
        predecessor: string;
        delay: BigNumber;
      }
    >;

    DistributorChanged(
      distributor?: null
    ): TypedEventFilter<[string], { distributor: string }>;

    FactoryChanged(
      factory?: null
    ): TypedEventFilter<[string], { factory: string }>;

    FeeRegistryChanged(
      feeRegistry?: null
    ): TypedEventFilter<[string], { feeRegistry: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RouterChanged(
      router?: null
    ): TypedEventFilter<[string], { router: string }>;

    TreasuryChanged(
      treasury?: null
    ): TypedEventFilter<[string], { treasury: string }>;
  };

  estimateGas: {
    cancel(
      _id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinDelay(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    isDoneCall(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isPendingCall(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReadyCall(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    minDelay(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    schedule(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timestamps(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancel(
      _id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinDelay(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDoneCall(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPendingCall(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReadyCall(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    schedule(
      _target: string,
      _data: BytesLike,
      _predecessor: BytesLike,
      _salt: BytesLike,
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      _distributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timestamps(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
