/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ApeAllowanceModuleInterface extends ethers.utils.Interface {
  functions: {
    "allowances(address,bytes32,address)": FunctionFragment;
    "currentAllowances(address,bytes32,address)": FunctionFragment;
    "setAllowance(bytes32,address,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowances",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentAllowances",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "allowances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;

  events: {
    "AllowanceUpdated(address,bytes32,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllowanceUpdated"): EventFragment;
}

export class ApeAllowanceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ApeAllowanceModuleInterface;

  functions: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxAmount: BigNumber;
        cooldownInterval: BigNumber;
      }
    >;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        intervalStart: BigNumber;
        epochs: BigNumber;
      }
    >;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _cooldownInterval: BigNumberish,
      _epochs: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowances(
    arg0: string,
    arg1: BytesLike,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxAmount: BigNumber;
      cooldownInterval: BigNumber;
    }
  >;

  currentAllowances(
    arg0: string,
    arg1: BytesLike,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      intervalStart: BigNumber;
      epochs: BigNumber;
    }
  >;

  setAllowance(
    _circle: BytesLike,
    _token: string,
    _amount: BigNumberish,
    _cooldownInterval: BigNumberish,
    _epochs: BigNumberish,
    _intervalStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxAmount: BigNumber;
        cooldownInterval: BigNumber;
      }
    >;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        intervalStart: BigNumber;
        epochs: BigNumber;
      }
    >;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _cooldownInterval: BigNumberish,
      _epochs: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AllowanceUpdated(
      vault?: null,
      circle?: null,
      token?: null,
      amount?: null,
      interval?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        vault: string;
        circle: string;
        token: string;
        amount: BigNumber;
        interval: BigNumber;
      }
    >;
  };

  estimateGas: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _cooldownInterval: BigNumberish,
      _epochs: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentAllowances(
      arg0: string,
      arg1: BytesLike,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _cooldownInterval: BigNumberish,
      _epochs: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
