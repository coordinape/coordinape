/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ApeVaultWrapperImplementationInterface
  extends ethers.utils.Interface {
  functions: {
    "addFunds(uint256)": FunctionFragment;
    "allVaults()": FunctionFragment;
    "apeMigrate()": FunctionFragment;
    "apeRegistry()": FunctionFragment;
    "apeWithdraw(uint256,bool)": FunctionFragment;
    "apeWithdrawSimpleToken(uint256)": FunctionFragment;
    "bestVault()": FunctionFragment;
    "exitVaultToken(bool)": FunctionFragment;
    "init(address,address,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "profit()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "shareValue(uint256)": FunctionFragment;
    "sharesForValue(uint256)": FunctionFragment;
    "simpleToken()": FunctionFragment;
    "syncUnderlying()": FunctionFragment;
    "tap(uint256,uint8)": FunctionFragment;
    "token()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalVaultBalance(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingValue()": FunctionFragment;
    "updateAllowance(bytes32,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateCircleAdmin(bytes32,address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "apeMigrate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "apeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "apeWithdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "apeWithdrawSimpleToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bestVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exitVaultToken",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "profit", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shareValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesForValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVaultBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowance",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCircleAdmin",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apeMigrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "apeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apeWithdrawSimpleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bestVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitVaultToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesForValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCircleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "ApeVaultFundWithdrawal(address,address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApeVaultFundWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ApeVaultWrapperImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ApeVaultWrapperImplementationInterface;

  functions: {
    addFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allVaults(overrides?: CallOverrides): Promise<[string[]]>;

    apeMigrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    apeRegistry(overrides?: CallOverrides): Promise<[string]>;

    apeWithdraw(
      _shareAmount: BigNumberish,
      _underlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    apeWithdrawSimpleToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bestVault(overrides?: CallOverrides): Promise<[string]>;

    exitVaultToken(
      _underlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _apeRegistry: string,
      _token: string,
      _registry: string,
      _simpleToken: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    profit(overrides?: CallOverrides): Promise<[BigNumber]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareValue(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sharesForValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    simpleToken(overrides?: CallOverrides): Promise<[string]>;

    syncUnderlying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tap(
      _value: BigNumberish,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    totalVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochAmount: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCircleAdmin(
      _circle: BytesLike,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  addFunds(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allVaults(overrides?: CallOverrides): Promise<string[]>;

  apeMigrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  apeRegistry(overrides?: CallOverrides): Promise<string>;

  apeWithdraw(
    _shareAmount: BigNumberish,
    _underlying: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  apeWithdrawSimpleToken(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bestVault(overrides?: CallOverrides): Promise<string>;

  exitVaultToken(
    _underlying: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _apeRegistry: string,
    _token: string,
    _registry: string,
    _simpleToken: string,
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  profit(overrides?: CallOverrides): Promise<BigNumber>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareValue(
    numShares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sharesForValue(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  simpleToken(overrides?: CallOverrides): Promise<string>;

  syncUnderlying(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tap(
    _value: BigNumberish,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalVaultBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingValue(overrides?: CallOverrides): Promise<BigNumber>;

  updateAllowance(
    _circle: BytesLike,
    _token: string,
    _amount: BigNumberish,
    _interval: BigNumberish,
    _epochAmount: BigNumberish,
    _intervalStart: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCircleAdmin(
    _circle: BytesLike,
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addFunds(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    allVaults(overrides?: CallOverrides): Promise<string[]>;

    apeMigrate(overrides?: CallOverrides): Promise<BigNumber>;

    apeRegistry(overrides?: CallOverrides): Promise<string>;

    apeWithdraw(
      _shareAmount: BigNumberish,
      _underlying: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    apeWithdrawSimpleToken(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bestVault(overrides?: CallOverrides): Promise<string>;

    exitVaultToken(
      _underlying: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      _apeRegistry: string,
      _token: string,
      _registry: string,
      _simpleToken: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    profit(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    shareValue(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesForValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simpleToken(overrides?: CallOverrides): Promise<string>;

    syncUnderlying(overrides?: CallOverrides): Promise<void>;

    tap(
      _value: BigNumberish,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingValue(overrides?: CallOverrides): Promise<BigNumber>;

    updateAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochAmount: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCircleAdmin(
      _circle: BytesLike,
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ApeVaultFundWithdrawal(
      apeVault?: string | null,
      vault?: null,
      _amount?: null,
      underlying?: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      {
        apeVault: string;
        vault: string;
        _amount: BigNumber;
        underlying: boolean;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allVaults(overrides?: CallOverrides): Promise<BigNumber>;

    apeMigrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    apeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    apeWithdraw(
      _shareAmount: BigNumberish,
      _underlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    apeWithdrawSimpleToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bestVault(overrides?: CallOverrides): Promise<BigNumber>;

    exitVaultToken(
      _underlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _apeRegistry: string,
      _token: string,
      _registry: string,
      _simpleToken: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    profit(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareValue(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesForValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simpleToken(overrides?: CallOverrides): Promise<BigNumber>;

    syncUnderlying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tap(
      _value: BigNumberish,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingValue(overrides?: CallOverrides): Promise<BigNumber>;

    updateAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochAmount: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCircleAdmin(
      _circle: BytesLike,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addFunds(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apeMigrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    apeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apeWithdraw(
      _shareAmount: BigNumberish,
      _underlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    apeWithdrawSimpleToken(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bestVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitVaultToken(
      _underlying: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _apeRegistry: string,
      _token: string,
      _registry: string,
      _simpleToken: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareValue(
      numShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesForValue(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simpleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syncUnderlying(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tap(
      _value: BigNumberish,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVaultBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAllowance(
      _circle: BytesLike,
      _token: string,
      _amount: BigNumberish,
      _interval: BigNumberish,
      _epochAmount: BigNumberish,
      _intervalStart: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCircleAdmin(
      _circle: BytesLike,
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
