/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ApeAllowanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeAllowanceModule__factory>;
    getContractFactory(
      name: "ApeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeDistributor__factory>;
    getContractFactory(
      name: "ApeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeRegistry__factory>;
    getContractFactory(
      name: "ApeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeRouter__factory>;
    getContractFactory(
      name: "FeeRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeRegistry__factory>;
    getContractFactory(
      name: "MockRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockRegistry__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "MockVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVaultFactory__factory>;
    getContractFactory(
      name: "TimeLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeLock__factory>;
    getContractFactory(
      name: "COToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.COToken__factory>;
    getContractFactory(
      name: "TokenAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAccessControl__factory>;
    getContractFactory(
      name: "ApeUpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeUpgradeableBeacon__factory>;
    getContractFactory(
      name: "ApeVaultWrapperImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultWrapperImplementation__factory>;
    getContractFactory(
      name: "OwnableImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableImplementation__factory>;
    getContractFactory(
      name: "ApeVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultFactory__factory>;
    getContractFactory(
      name: "BaseWrapperImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseWrapperImplementation__factory>;
    getContractFactory(
      name: "RegistryAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryAPI__factory>;
    getContractFactory(
      name: "VaultAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAPI__factory>;
    getContractFactory(
      name: "MockVaultFactoryBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVaultFactoryBeacon__factory>;
    getContractFactory(
      name: "ApeVaultWrapperImplementation1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultWrapperImplementation1__factory>;
    getContractFactory(
      name: "ApeVaultWrapperImplementation2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultWrapperImplementation2__factory>;
    getContractFactory(
      name: "ApeVaultWrapperImplementation3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApeVaultWrapperImplementation3__factory>;
    getContractFactory(
      name: "VaultBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultBeacon__factory>;
    getContractFactory(
      name: "VaultProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultProxy__factory>;
    getContractFactory(
      name: "IApeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IApeVault__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
