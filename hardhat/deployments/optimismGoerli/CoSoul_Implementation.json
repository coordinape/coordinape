{
  "address": "0x5B4A0a9f67d6AaC27A1A5dE95C01470DFd05FdA7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorisedCallers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_slots",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_amounts",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchSetSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "batchSetSlot_UfO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blobs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "burnWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_slot",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "decSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_slot",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSlot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_slot",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "incSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "__name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "__symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mintWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "overrideTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "overrideTransferWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_val",
          "type": "bool"
        }
      ],
      "name": "setCallers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slot",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_amount",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "syncNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_data",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "syncWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4eb7ded7b73e5fbca6d94fe0d8b0108756ae9ca15bacb0e8614ab8c9a1ce4c00",
  "receipt": {
    "to": null,
    "from": "0x63A256Aa04A0eEEc85c32df9765bc83C68999E9f",
    "contractAddress": "0x5B4A0a9f67d6AaC27A1A5dE95C01470DFd05FdA7",
    "transactionIndex": 10,
    "gasUsed": "2602418",
    "logsBloom": "0x
    "blockHash": "0x39dbe6b14f5b152395f34157528cc299a09e11cfe7b366223d92223a64667ff8",
    "transactionHash": "0x4eb7ded7b73e5fbca6d94fe0d8b0108756ae9ca15bacb0e8614ab8c9a1ce4c00",
    "logs": [],
    "blockNumber": 10637960,
    "cumulativeGasUsed": "5429848",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "5bf6fd6243f4b14a8082c998c26c7dd8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisedCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_slots\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_amounts\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchSetSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"batchSetSlot_UfO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blobs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"burnWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_slot\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"decSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_slot\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_slot\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"incSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initiated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"overrideTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"overrideTransferWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_amount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"syncNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_data\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"syncWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchSetSlot(uint256[],uint32[],uint256[])\":{\"params\":{\"_amounts\":\"Amout to update\",\"_slots\":\"Slot value. Up to 7\",\"_tokenIds\":\"Token ID from which to update the blob data\"}},\"batchSetSlot_UfO(bytes)\":{\"params\":{\"_data\":\"bytes data               3 bits for slot | one byte               after previous byte, alternate bewteen next elements like a packed array               4 bytes for each address               4 bytes for each token ID\"}},\"burn(uint256)\":{\"params\":{\"_tokenId\":\"Token ID to be burnt (fiiire)\"}},\"burnWithSignature(uint256,uint256,bytes)\":{\"params\":{\"_nonce\":\"Burn counter used to prevent replays\",\"_signature\":\"Signature provided by our signer to validate burn\",\"_tokenId\":\"Token ID to be burnt (fiiire)\"}},\"decSlot(uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amout to decrement a slot\",\"_slot\":\"Slot value. Up to 7\",\"_tokenId\":\"Token ID from which to update the blob data\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURI()\":{\"details\":\"Get Base URI used for computing {tokenURI}.\"},\"getSlot(uint8,uint256)\":{\"params\":{\"_slot\":\"Slot value. Up to 7\",\"_tokenId\":\"Token ID from which to get the blob data\"}},\"incSlot(uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amout to increment a slot\",\"_slot\":\"Slot value. Up to 7\",\"_tokenId\":\"Token ID from which to update the blob data\"}},\"initialize(string,string,address)\":{\"params\":{\"__name\":\"Name of SBT\",\"__symbol\":\"Symbol of SBT\",\"_signer\":\"Address that will provide valid signatures\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintWithSignature(uint256,bytes)\":{\"params\":{\"_nonce\":\"Mint counter used to prevent replays\",\"_signature\":\"Signature provided by our signer to validate mint\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"overrideTransfer(address,address,uint256)\":{\"params\":{\"_from\":\"Previous token owner\",\"_to\":\"New token owner\",\"_tokenId\":\"Token to transfer\"}},\"overrideTransferWithSignature(address,address,uint256,uint256,bytes)\":{\"params\":{\"_from\":\"Previous token owner\",\"_nonce\":\"Transfer counter used to prevent replays\",\"_signature\":\"Signature provided by our signer to validate transfer\",\"_to\":\"New token owner\",\"_tokenId\":\"Token to transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"_newBaseURI\":\"New baseURI\"}},\"setCallers(address,bool)\":{\"params\":{\"_caller\":\"New signer\",\"_val\":\"Boolean to set/unset\"}},\"setSigner(address)\":{\"params\":{\"_signer\":\"New signer\"}},\"setSlot(uint256,uint32,uint256)\":{\"params\":{\"_amount\":\"Amout to update\",\"_slot\":\"Slot value. Up to 7\",\"_tokenId\":\"Token ID from which to update the blob data\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"syncWithSignature(uint256,uint256,uint256,bytes)\":{\"params\":{\"_data\":\"Blob data that will overwrite current data\",\"_nonce\":\"Sync counter used to prevent replays\",\"_signature\":\"Signature provided by our signer to validate leaf data\",\"_tokenId\":\"Token ID from which to update blob\"}},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchSetSlot(uint256[],uint32[],uint256[])\":{\"notice\":\"Function to update the value of a slot in a blob\"},\"batchSetSlot_UfO(bytes)\":{\"notice\":\"Function to update the value of a slot in a blob\"},\"burn(uint256)\":{\"notice\":\"Function to burn token from msg.sender\"},\"burnWithSignature(uint256,uint256,bytes)\":{\"notice\":\"Function to burn token via signature to msg.sender\"},\"decSlot(uint8,uint256,uint256)\":{\"notice\":\"Function to decrement the value of a slot in a blob by some amount\"},\"getSlot(uint8,uint256)\":{\"notice\":\"Getter function to get the value in a specific slot of a given blob\"},\"incSlot(uint8,uint256,uint256)\":{\"notice\":\"Function to increment the value of a slot in a blob by some amount\"},\"initialize(string,string,address)\":{\"notice\":\"Init function called during proxy setup\"},\"mint()\":{\"notice\":\"Function to mint token\"},\"mintWithSignature(uint256,bytes)\":{\"notice\":\"Function to mint token via signature to msg.sender\"},\"overrideTransfer(address,address,uint256)\":{\"notice\":\"Function to transfer token under approval of the protocol. Gated by authorised addresses\"},\"overrideTransferWithSignature(address,address,uint256,uint256,bytes)\":{\"notice\":\"Function to transfer token under approval of the protocol via signature\"},\"setBaseURI(string)\":{\"notice\":\"Set a new baseURI. Owner gated.\"},\"setCallers(address,bool)\":{\"notice\":\"Set a addreses capable of updating blob data of SBTs\"},\"setSigner(address)\":{\"notice\":\"Set a new signer. Owner gated\"},\"setSlot(uint256,uint32,uint256)\":{\"notice\":\"Function to update the value of a slot in a blob\"},\"syncWithSignature(uint256,uint256,uint256,bytes)\":{\"notice\":\"Function to sync blob data of a token from a signature signed by our signer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol\":\"CoSoul\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xac29c453f4cf43afe4c9599374b6e1ed493c18644d814554e8a5969aaa6f3486\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x12f297cafe6e2847ae0378502f155654d0764b532a9873c8afe4350950fa7971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.2;\\n\\n// Required for hardhat compilation\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n// Required for brownie compilation\\n// import \\\"@openzeppelinupgrade/contracts/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n// import \\\"@openzeppelinupgrade/contracts/token/ERC721/ERC721Upgradeable.sol\\\";\\n// import \\\"@openzeppelinupgrade/contracts/access/OwnableUpgradeable.sol\\\";\\n\\ncontract CoSoul is OwnableUpgradeable, ERC721EnumerableUpgradeable {\\n    using ECDSAUpgradeable for bytes32;\\n\\n    bool public initiated;\\n    string baseUri;\\n    address public signer;\\n    mapping(address => bool) public authorisedCallers;\\n    mapping(uint256 => uint256) public transferNonces;\\n    mapping(uint256 => uint256) public syncNonces;\\n    mapping(uint256 => uint256) public burnNonces;\\n    mapping(address => uint256) public mintNonces;\\n    uint256 public counter;\\n    // blobs are uint256 storage divided in 8 uint32 slots\\n    mapping(uint256 => uint256) public blobs;\\n\\n    modifier authorised(address _operator) {\\n        require(authorisedCallers[_operator] || _operator == owner());\\n        _;\\n    }\\n\\n    /**\\n     * @notice\\n     * Init function called during proxy setup\\n     * @param __name Name of SBT\\n     * @param __symbol Symbol of SBT\\n     * @param _signer Address that will provide valid signatures\\n     */\\n    function initialize(\\n        string memory __name,\\n        string memory __symbol,\\n        address _signer\\n    ) public initializer {\\n        __Ownable_init();\\n        __ERC721_init(__name, __symbol);\\n        signer = _signer;\\n    }\\n\\n    /**\\n     * @notice\\n     * Set a new signer. Owner gated\\n     * @param _signer New signer\\n     */\\n    function setSigner(address _signer) external onlyOwner {\\n        signer = _signer;\\n    }\\n\\n    /**\\n     * @notice\\n     * Set a addreses capable of updating blob data of SBTs\\n     * @param _caller New signer\\n     * @param _val Boolean to set/unset\\n     */\\n    function setCallers(address _caller, bool _val) external onlyOwner {\\n        authorisedCallers[_caller] = _val;\\n    }\\n\\n    /**\\n     * @notice\\n     * Getter function to get the value in a specific slot of a given blob\\n     * @param _slot Slot value. Up to 7\\n     * @param _tokenId Token ID from which to get the blob data\\n     */\\n    function getSlot(uint8 _slot, uint256 _tokenId) public view returns (uint256 value) {\\n        require(_slot < 8);\\n\\n        uint256 current = blobs[_tokenId];\\n        // uint32 mask that is left shifted to fetch correct slot\\n        uint256 mask = 0xffffffff << _slot;\\n        value = (current & mask) >> _slot;\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to update the value of a slot in a blob\\n     * @param _data bytes data\\n     *               3 bits for slot | one byte\\n     *               after previous byte, alternate bewteen next elements like a packed array\\n     *               4 bytes for each address\\n     *               4 bytes for each token ID\\n     */\\n    function batchSetSlot_UfO(bytes memory _data) external authorised(msg.sender) {\\n        uint256 length = _data.length / 8;\\n        uint256 slot;\\n        uint256 amount;\\n        uint256 tokenid;\\n        assembly {\\n            slot := shr(0xf8, mload(add(_data, 0x20)))\\n        }\\n        for (uint256 i = 0; i < length; i++) {\\n            assembly {\\n                let j := add(0x21, mul(i, 0x08))\\n                amount := shr(0xe0, mload(add(_data, j)))\\n                tokenid := shr(0xe0, mload(add(_data, add(j, 0x04))))\\n            }\\n            _updateSlot(slot, uint32(amount), tokenid);\\n        }\\n    }\\n\\n    function _updateSlot(\\n        uint256 _slot,\\n        uint32 _amount,\\n        uint256 _tokenId\\n    ) internal {\\n        uint256 current = blobs[_tokenId]; // 100 gas once warm\\n        // get the inverse of the slot mask\\n        uint256 inverseMask = ~(0xffffffff << _slot);\\n        // filter current blob with inverse mask to remove the current slot and update it (OR operation) to add slot\\n        blobs[_tokenId] = (current & inverseMask) | (_amount << _slot); // 2900 once warm\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to update the value of a slot in a blob\\n     * @param _slots Slot value. Up to 7\\n     * @param _amounts Amout to update\\n     * @param _tokenIds Token ID from which to update the blob data\\n     */\\n    function batchSetSlot(\\n        uint256[] calldata _slots,\\n        uint32[] calldata _amounts,\\n        uint256[] calldata _tokenIds\\n    ) external authorised(msg.sender) {\\n        for (uint256 i = 0; i < _slots.length; i++) {\\n            require(_slots[i] < 8);\\n\\n            uint256 current = blobs[_tokenIds[i]]; //\\n            // get the inverse of the slot mask\\n            uint256 inverseMask = ~(0xffffffff << _slots[i]);\\n            // filter current blob with inverse mask to remove the current slot and update it (OR operation) to add slot\\n            blobs[_tokenIds[i]] = (current & inverseMask) | (_amounts[i] << _slots[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to update the value of a slot in a blob\\n     * @param _slot Slot value. Up to 7\\n     * @param _amount Amout to update\\n     * @param _tokenId Token ID from which to update the blob data\\n     */\\n    function setSlot(\\n        uint256 _slot,\\n        uint32 _amount,\\n        uint256 _tokenId\\n    ) external authorised(msg.sender) {\\n        require(_slot < 8);\\n\\n        uint256 current = blobs[_tokenId]; //  2500\\n        // get the inverse of the slot mask\\n        uint256 inverseMask = ~(0xffffffff << _slot);\\n        // filter current blob with inverse mask to remove the current slot and update it (OR operation) to add slot\\n        blobs[_tokenId] = (current & inverseMask) | (_amount << _slot); //\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to increment the value of a slot in a blob by some amount\\n     * @param _slot Slot value. Up to 7\\n     * @param _amount Amout to increment a slot\\n     * @param _tokenId Token ID from which to update the blob data\\n     */\\n    function incSlot(\\n        uint8 _slot,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    ) external authorised(msg.sender) {\\n        require(_slot < 8);\\n        uint256 value = getSlot(_slot, _tokenId);\\n        require(value + _amount <= type(uint32).max, \\\"CoSoul: uint32 overflow\\\");\\n        uint256 current = blobs[_tokenId];\\n        blobs[_tokenId] = current + (_amount << _slot);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to decrement the value of a slot in a blob by some amount\\n     * @param _slot Slot value. Up to 7\\n     * @param _amount Amout to decrement a slot\\n     * @param _tokenId Token ID from which to update the blob data\\n     */\\n    function decSlot(\\n        uint8 _slot,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    ) external authorised(msg.sender) {\\n        require(_slot < 8);\\n        uint256 value = getSlot(_slot, _tokenId);\\n        require(value >= _amount, \\\"CoSoul: uint32 overflow\\\");\\n        uint256 current = blobs[_tokenId];\\n        blobs[_tokenId] = current - (_amount << _slot);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to sync blob data of a token from a signature signed by our signer\\n     * @param _data Blob data that will overwrite current data\\n     * @param _tokenId Token ID from which to update blob\\n     * @param _nonce Sync counter used to prevent replays\\n     * @param _signature Signature provided by our signer to validate leaf data\\n     */\\n    function syncWithSignature(\\n        uint256 _data,\\n        uint256 _tokenId,\\n        uint256 _nonce,\\n        bytes calldata _signature\\n    ) external {\\n        require(ownerOf(_tokenId) == msg.sender);\\n        require(syncNonces[_nonce]++ == _nonce);\\n        require(\\n            keccak256(abi.encodePacked(_tokenId, _nonce, _data)).toEthSignedMessageHash().recover(\\n                _signature\\n            ) == signer,\\n            \\\"Sig not valid\\\"\\n        );\\n\\n        blobs[_tokenId] = _data;\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to transfer token under approval of the protocol. Gated by authorised addresses\\n     * @param _from Previous token owner\\n     * @param _to New token owner\\n     * @param _tokenId Token to transfer\\n     */\\n    function overrideTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external authorised(msg.sender) {\\n        require(balanceOf(_to) == 0);\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to transfer token under approval of the protocol via signature\\n     * @param _from Previous token owner\\n     * @param _to New token owner\\n     * @param _tokenId Token to transfer\\n     * @param _nonce Transfer counter used to prevent replays\\n     * @param _signature Signature provided by our signer to validate transfer\\n     */\\n    function overrideTransferWithSignature(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _nonce,\\n        bytes calldata _signature\\n    ) external {\\n        require(ownerOf(_tokenId) == msg.sender);\\n        require(balanceOf(_to) == 0);\\n        require(transferNonces[_tokenId]++ == _nonce);\\n        require(\\n            keccak256(abi.encodePacked(_tokenId, _nonce)).toEthSignedMessageHash().recover(\\n                _signature\\n            ) == signer,\\n            \\\"Sig not valid\\\"\\n        );\\n\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to mint token\\n     */\\n    function mint() external {\\n        require(balanceOf(msg.sender) == 0);\\n        _safeMint(msg.sender, ++counter);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to mint token via signature to msg.sender\\n     * @param _nonce Mint counter used to prevent replays\\n     * @param _signature Signature provided by our signer to validate mint\\n     */\\n    function mintWithSignature(uint256 _nonce, bytes calldata _signature) external {\\n        require(balanceOf(msg.sender) == 0);\\n        require(mintNonces[msg.sender]++ == _nonce);\\n        require(\\n            keccak256(abi.encodePacked(msg.sender, _nonce)).toEthSignedMessageHash().recover(\\n                _signature\\n            ) == signer,\\n            \\\"Sig not valid\\\"\\n        );\\n\\n        _safeMint(msg.sender, ++counter);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to burn token from msg.sender\\n     * @param _tokenId Token ID to be burnt (fiiire)\\n     */\\n    function burn(uint256 _tokenId) external {\\n        require(ownerOf(_tokenId) == msg.sender);\\n\\n        blobs[_tokenId] = 0;\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @notice\\n     * Function to burn token via signature to msg.sender\\n     * @param _tokenId Token ID to be burnt (fiiire)\\n     * @param _nonce Burn counter used to prevent replays\\n     * @param _signature Signature provided by our signer to validate burn\\n     */\\n    function burnWithSignature(\\n        uint256 _tokenId,\\n        uint256 _nonce,\\n        bytes calldata _signature\\n    ) external {\\n        require(ownerOf(_tokenId) == msg.sender); // not necessary?\\n        require(burnNonces[_tokenId]++ == _nonce);\\n        require(\\n            keccak256(abi.encodePacked(_tokenId, _nonce)).toEthSignedMessageHash().recover(\\n                _signature\\n            ) == signer,\\n            \\\"Sig not valid\\\"\\n        );\\n\\n        blobs[_tokenId] = 0;\\n        _burn(_tokenId);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        revert(\\\"nope\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        revert(\\\"nope\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override {\\n        revert(\\\"nope\\\");\\n    }\\n\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public override {\\n        revert(\\\"nope\\\");\\n    }\\n\\n    function approve(\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        revert(\\\"nope\\\");\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseUri;\\n    }\\n\\n    /**\\n     * @notice\\n     * Set a new baseURI. Owner gated.\\n     * @param _newBaseURI New baseURI\\n     */\\n    function setBaseURI(string memory _newBaseURI) external onlyOwner {\\n        baseUri = _newBaseURI;\\n    }\\n\\n    /**\\n     * @dev Get Base URI used for computing {tokenURI}.\\n     */\\n    function getBaseURI() external view returns (string memory) {\\n        return string(abi.encodePacked(\\\"SomeNonsense\\\",baseUri));\\n    }\\n}\\n\",\"keccak256\":\"0x227dacd2473e1b9a18c54fd99c39f862ee051bb4eeed98b895afd6a924053697\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e1c806100206000396000f3fe608060405234801561001057600080fd5b50600436106102175760003560e01c8061c2fc1461021c5780628ffa061461023157806301ffc9a71461024457806306fdde031461026c578063077f224a14610281578063081812fc14610294578063095ea7b3146102bf5780631249c58b146102d257806318160ddd146102da57806318badae8146102ec578063238ac933146102ff57806323b872dd146103125780632abc3d4e146103205780632f745c59146103415780633007daae1461035457806342842e0e1461031257806342966c68146103675780634eac19f81461037a5780634f6ccce71461038d57806355f804b3146103a057806361bc221a146103b35780636352211e146103bd5780636562f5f7146103d05780636c19e783146103e357806370a08231146103f6578063714c539814610409578063715018a6146104115780637a0f4de2146104195780637c772c67146104395780637ead60a61461045a5780638da5cb5b1461046d578063944fd180146104755780639540bce81461049857806395d89b41146104b95780639763d626146104c15780639e759355146104d45780639f118536146104e7578063a22cb465146104f4578063ae34710514610502578063b88d4fde14610515578063c87b56dd14610523578063cde4a8fc14610536578063d3f94a8714610549578063e985e9c51461056a578063f2fde38b146105a6578063fc68c689146105b9575b600080fd5b61022f61022a366004612771565b6105cc565b005b61022f61023f3660046126b6565b61069c565b610257610252366004612739565b610856565b60405190151581526020015b60405180910390f35b610274610883565b6040516102639190612afe565b61022f61028f3660046127a3565b610915565b6102a76102a2366004612813565b610a5a565b6040516001600160a01b039091168152602001610263565b61022f6102cd36600461268d565b610a81565b61022f610ab2565b60cb545b604051908152602001610263565b61022f6102fa36600461253e565b610ae5565b60fd546102a7906001600160a01b031681565b61022f6102cd36600461253e565b6102de61032e366004612813565b6101046020526000908152604090205481565b6102de61034f36600461268d565b610b42565b6102de610362366004612960565b610bd8565b61022f610375366004612813565b610c0e565b61022f61038836600461297b565b610c47565b6102de61039b366004612813565b610cff565b61022f6103ae366004612771565b610da0565b6102de6101035481565b6102a76103cb366004612813565b610dbf565b61022f6103de366004612653565b610df3565b61022f6103f13660046124f2565b610e26565b6102de6104043660046124f2565b610e50565b610274610ed6565b61022f610efe565b6102de610427366004612813565b60ff6020526000908152604090205481565b6102de610447366004612813565b6101006020526000908152604090205481565b61022f6104683660046125de565b610f10565b6102a761106a565b6102576104833660046124f2565b60fe6020526000908152604090205460ff1681565b6102de6104a63660046124f2565b6101026020526000908152604090205481565b610274611079565b61022f6104cf36600461282b565b611088565b61022f6104e236600461297b565b611178565b60fb546102579060ff1681565b61022f6102cd366004612653565b61022f6105103660046128c4565b611222565b61022f6102cd366004612579565b610274610531366004612813565b611312565b61022f610544366004612922565b611379565b6102de610557366004612813565b6101016020526000908152604090205481565b61025761057836600461250c565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61022f6105b43660046124f2565b6113f0565b61022f6105c7366004612874565b611466565b33600081815260fe602052604090205460ff168061060257506105ed61106a565b6001600160a01b0316816001600160a01b0316145b61060b57600080fd5b60006008835161061b9190612ccb565b602084015190915060f81c600080805b8481101561069357600881026021018088015160e01c93506004810188015160e01c925050610681848484600090815261010460205260409020805463ffffffff80851b1990911692811690931b909216179055565b8061068b81612d69565b91505061062b565b50505050505050565b33600081815260fe602052604090205460ff16806106d257506106bd61106a565b6001600160a01b0316816001600160a01b0316145b6106db57600080fd5b60005b8681101561084c57600888888381811061070857634e487b7160e01b600052603260045260246000fd5b905060200201351061071957600080fd5b6000610104600086868581811061074057634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020549050600089898481811061077a57634e487b7160e01b600052603260045260246000fd5b9050602002013563ffffffff901b1990508989848181106107ab57634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106107d257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107e79190612946565b63ffffffff16901b63ffffffff1681831617610104600088888781811061081e57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020819055505050808061084490612d69565b9150506106de565b5050505050505050565b60006001600160e01b0319821663780e9d6360e01b148061087b575061087b82611553565b90505b919050565b60606097805461089290612d2e565b80601f01602080910402602001604051908101604052809291908181526020018280546108be90612d2e565b801561090b5780601f106108e05761010080835404028352916020019161090b565b820191906000526020600020905b8154815290600101906020018083116108ee57829003601f168201915b5050505050905090565b600054610100900460ff16158080156109355750600054600160ff909116105b806109565750610944306115a3565b158015610956575060005460ff166001145b6109be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156109e1576000805461ff0019166101001790555b6109e96115b2565b6109f384846115e1565b60fd80546001600160a01b0319166001600160a01b0384161790558015610a54576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000610a6582611612565b506000908152609b60205260409020546001600160a01b031690565b60405162461bcd60e51b81526004016109b5906020808252600490820152636e6f706560e01b604082015260600190565b610abb33610e50565b15610ac557600080fd5b610ae33361010360008154610ad990612d69565b9182905550611637565b565b33600081815260fe602052604090205460ff1680610b1b5750610b0661106a565b6001600160a01b0316816001600160a01b0316145b610b2457600080fd5b610b2d83610e50565b15610b3757600080fd5b610a54848484611651565b6000610b4d83610e50565b8210610baf5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109b5565b506001600160a01b0391909116600090815260c960209081526040808320938352929052205490565b600060088360ff1610610bea57600080fd5b506000908152610104602052604090205463ffffffff60ff90921691821b16901c90565b33610c1882610dbf565b6001600160a01b031614610c2b57600080fd5b60008181526101046020526040812055610c44816117b0565b50565b33600081815260fe602052604090205460ff1680610c7d5750610c6861106a565b6001600160a01b0316816001600160a01b0316145b610c8657600080fd5b60088460ff1610610c9657600080fd5b6000610ca28584610bd8565b905083811015610cc45760405162461bcd60e51b81526004016109b590612c37565b60008381526101046020526040902054610ce460ff871686901b82612ceb565b60009485526101046020526040909420939093555050505050565b6000610d0a60cb5490565b8210610d6d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109b5565b60cb8281548110610d8e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b610da8611842565b8051610dbb9060fc906020840190612317565b5050565b600080610dcb836118a1565b90506001600160a01b03811661087b5760405162461bcd60e51b81526004016109b590612c05565b610dfb611842565b6001600160a01b0391909116600090815260fe60205260409020805460ff1916911515919091179055565b610e2e611842565b60fd80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216610eba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109b5565b506001600160a01b03166000908152609a602052604090205490565b606060fc604051602001610eea9190612a08565b604051602081830303815290604052905090565b610f06611842565b610ae360006118bc565b33610f1a85610dbf565b6001600160a01b031614610f2d57600080fd5b610f3685610e50565b15610f4057600080fd5b600084815260ff6020526040812080548592909190610f5e83612d69565b9190505514610f6c57600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b03909216916110319185908590819084018382808284376000920191909152505060408051602081018b905290810189905261102b925060600190505b60408051601f1981840301815282825280516020918201207b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b84830152603c8085019190915282518085039091018152605c909301909152815191012090565b9061190e565b6001600160a01b0316146110575760405162461bcd60e51b81526004016109b590612bde565b611062868686611651565b505050505050565b6033546001600160a01b031690565b60606098805461089290612d2e565b61109133610e50565b1561109b57600080fd5b33600090815261010260205260408120805485929091906110bb83612d69565b91905055146110c957600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b0390921691611139918590859081908401838280828437600092019190915250506040516001600160601b03193360601b1660208201526034810189905261102b92506054019050610fcc565b6001600160a01b03161461115f5760405162461bcd60e51b81526004016109b590612bde565b6111733361010360008154610ad990612d69565b505050565b33600081815260fe602052604090205460ff16806111ae575061119961106a565b6001600160a01b0316816001600160a01b0316145b6111b757600080fd5b60088460ff16106111c757600080fd5b60006111d38584610bd8565b905063ffffffff6111e48583612cb3565b11156112025760405162461bcd60e51b81526004016109b590612c37565b60008381526101046020526040902054610ce460ff871686901b82612cb3565b3361122c85610dbf565b6001600160a01b03161461123f57600080fd5b6000838152610100602052604081208054859290919061125e83612d69565b919050551461126c57600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b03909216916112d79185908590819084018382808284376000920191909152505060408051602081018b9052908101899052606081018b905261102b92506080019050610fcc565b6001600160a01b0316146112fd5760405162461bcd60e51b81526004016109b590612bde565b50505060009081526101046020526040902055565b606061131d82611612565b6000611327611932565b905060008151116113475760405180602001604052806000815250611372565b8061135184611941565b6040516020016113629291906129d9565b6040516020818303038152906040525b9392505050565b33600081815260fe602052604090205460ff16806113af575061139a61106a565b6001600160a01b0316816001600160a01b0316145b6113b857600080fd5b600884106113c557600080fd5b50600090815261010460205260409020805463ffffffff928316841b83169290931b19909216179055565b6113f8611842565b6001600160a01b03811661145d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b5565b610c44816118bc565b3361147085610dbf565b6001600160a01b03161461148357600080fd5b600084815261010160205260408120805485929091906114a283612d69565b91905055146114b057600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b03909216916115149185908590819084018382808284376000920191909152505060408051602081018b905290810189905261102b92506060019050610fcc565b6001600160a01b03161461153a5760405162461bcd60e51b81526004016109b590612bde565b60008481526101046020526040812055610a54846117b0565b60006001600160e01b031982166380ac58cd60e01b148061158457506001600160e01b03198216635b5e139f60e01b145b8061087b57506301ffc9a760e01b6001600160e01b031983161461087b565b6001600160a01b03163b151590565b600054610100900460ff166115d95760405162461bcd60e51b81526004016109b590612c68565b610ae36119e3565b600054610100900460ff166116085760405162461bcd60e51b81526004016109b590612c68565b610dbb8282611a13565b61161b81611a61565b610c445760405162461bcd60e51b81526004016109b590612c05565b610dbb828260405180602001604052806000815250611a7e565b826001600160a01b031661166482610dbf565b6001600160a01b03161461168a5760405162461bcd60e51b81526004016109b590612b63565b6001600160a01b0382166116ec5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109b5565b6116f98383836001611ab1565b826001600160a01b031661170c82610dbf565b6001600160a01b0316146117325760405162461bcd60e51b81526004016109b590612b63565b6000818152609b6020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652609a855283862080546000190190559087168086528386208054600101905586865260999094528285208054909216841790915590518493600080516020612dc783398151915291a4611173565b60006117bb82610dbf565b90506117cb816000846001611ab1565b6117d482610dbf565b6000838152609b6020908152604080832080546001600160a01b03199081169091556001600160a01b038516808552609a84528285208054600019019055878552609990935281842080549091169055519293508492600080516020612dc7833981519152908390a4610dbb565b3361184b61106a565b6001600160a01b031614610ae35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109b5565b6000908152609960205260409020546001600160a01b031690565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600061191d8585611be5565b9150915061192a81611c2b565b509392505050565b606060fc805461089290612d2e565b6060600061194e83611dae565b60010190506000816001600160401b0381111561197b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119a5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119de5761192a565b6119af565b600054610100900460ff16611a0a5760405162461bcd60e51b81526004016109b590612c68565b610ae3336118bc565b600054610100900460ff16611a3a5760405162461bcd60e51b81526004016109b590612c68565b8151611a4d906097906020850190612317565b508051611173906098906020840190612317565b600080611a6d836118a1565b6001600160a01b0316141592915050565b611a888383611e84565b611a956000848484611f8e565b6111735760405162461bcd60e51b81526004016109b590612b11565b6001811115611b205760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016109b5565b816001600160a01b038516611b7c57611b778160cb8054600083815260cc60205260408120829055600182018355919091527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0155565b611b9f565b836001600160a01b0316856001600160a01b031614611b9f57611b9f85826120a3565b6001600160a01b038416611bbb57611bb681612140565b611bde565b846001600160a01b0316846001600160a01b031614611bde57611bde8482612219565b5050505050565b600080825160411415611c1c5760208301516040840151606085015160001a611c108782858561225d565b94509450505050611c24565b506000905060025b9250929050565b6000816004811115611c4d57634e487b7160e01b600052602160045260246000fd5b1415611c5857610c44565b6001816004811115611c7a57634e487b7160e01b600052602160045260246000fd5b1415611cc35760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016109b5565b6002816004811115611ce557634e487b7160e01b600052602160045260246000fd5b1415611d335760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109b5565b6003816004811115611d5557634e487b7160e01b600052602160045260246000fd5b1415610c445760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109b5565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611ded5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310611e17576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310611e3557662386f26fc10000830492506010015b6305f5e1008310611e4d576305f5e100830492506008015b6127108310611e6157612710830492506004015b60648310611e73576064830492506002015b600a831061087b5760010192915050565b6001600160a01b038216611eda5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109b5565b611ee381611a61565b15611f005760405162461bcd60e51b81526004016109b590612ba8565b611f0e600083836001611ab1565b611f1781611a61565b15611f345760405162461bcd60e51b81526004016109b590612ba8565b6001600160a01b0382166000818152609a6020908152604080832080546001019055848352609990915280822080546001600160a01b031916841790555183929190600080516020612dc7833981519152908290a4610dbb565b6000611fa2846001600160a01b03166115a3565b1561209757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fd9903390899088908890600401612ac1565b602060405180830381600087803b158015611ff357600080fd5b505af1925050508015612023575060408051601f3d908101601f1916820190925261202091810190612755565b60015b61207d573d808015612051576040519150601f19603f3d011682016040523d82523d6000602084013e612056565b606091505b5080516120755760405162461bcd60e51b81526004016109b590612b11565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061209b565b5060015b949350505050565b600060016120b084610e50565b6120ba9190612ceb565b600083815260ca602052604090205490915080821461210d576001600160a01b038416600090815260c960209081526040808320858452825280832054848452818420819055835260ca90915290208190555b50600091825260ca602090815260408084208490556001600160a01b03909416835260c981528383209183525290812055565b60cb5460009061215290600190612ceb565b600083815260cc602052604081205460cb805493945090928490811061218857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060cb83815481106121b757634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260cc909152604080822084905585825281205560cb8054806121fd57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061222483610e50565b6001600160a01b03909316600090815260c960209081526040808320868452825280832085905593825260ca9052919091209190915550565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561228a575060009050600361230e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156122de573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123075760006001925092505061230e565b9150600090505b94509492505050565b82805461232390612d2e565b90600052602060002090601f016020900481019282612345576000855561238b565b82601f1061235e57805160ff191683800117855561238b565b8280016001018555821561238b579182015b8281111561238b578251825591602001919060010190612370565b5061239792915061239b565b5090565b5b80821115612397576000815560010161239c565b80356001600160a01b038116811461087e57600080fd5b60008083601f8401126123d8578081fd5b5081356001600160401b038111156123ee578182fd5b6020830191508360208083028501011115611c2457600080fd5b60008083601f840112612419578182fd5b5081356001600160401b0381111561242f578182fd5b602083019150836020828501011115611c2457600080fd5b600082601f830112612457578081fd5b81356001600160401b038082111561247157612471612d9a565b604051601f8301601f19908116603f0116810190828211818310171561249957612499612d9a565b816040528381528660208588010111156124b1578485fd5b8360208701602083013792830160200193909352509392505050565b803563ffffffff8116811461087e57600080fd5b803560ff8116811461087e57600080fd5b600060208284031215612503578081fd5b611372826123b0565b6000806040838503121561251e578081fd5b612527836123b0565b9150612535602084016123b0565b90509250929050565b600080600060608486031215612552578081fd5b61255b846123b0565b9250612569602085016123b0565b9150604084013590509250925092565b6000806000806080858703121561258e578081fd5b612597856123b0565b93506125a5602086016123b0565b92506040850135915060608501356001600160401b038111156125c6578182fd5b6125d287828801612447565b91505092959194509250565b60008060008060008060a087890312156125f6578182fd5b6125ff876123b0565b955061260d602088016123b0565b9450604087013593506060870135925060808701356001600160401b03811115612635578283fd5b61264189828a01612408565b979a9699509497509295939492505050565b60008060408385031215612665578182fd5b61266e836123b0565b915060208301358015158114612682578182fd5b809150509250929050565b6000806040838503121561269f578182fd5b6126a8836123b0565b946020939093013593505050565b600080600080600080606087890312156126ce578182fd5b86356001600160401b03808211156126e4578384fd5b6126f08a838b016123c7565b90985096506020890135915080821115612708578384fd5b6127148a838b016123c7565b9096509450604089013591508082111561272c578384fd5b5061264189828a016123c7565b60006020828403121561274a578081fd5b813561137281612db0565b600060208284031215612766578081fd5b815161137281612db0565b600060208284031215612782578081fd5b81356001600160401b03811115612797578182fd5b61209b84828501612447565b6000806000606084860312156127b7578081fd5b83356001600160401b03808211156127cd578283fd5b6127d987838801612447565b945060208601359150808211156127ee578283fd5b506127fb86828701612447565b92505061280a604085016123b0565b90509250925092565b600060208284031215612824578081fd5b5035919050565b60008060006040848603121561283f578081fd5b8335925060208401356001600160401b0381111561285b578182fd5b61286786828701612408565b9497909650939450505050565b60008060008060608587031215612889578182fd5b843593506020850135925060408501356001600160401b038111156128ac578283fd5b6128b887828801612408565b95989497509550505050565b6000806000806000608086880312156128db578283fd5b85359450602086013593506040860135925060608601356001600160401b03811115612905578182fd5b61291188828901612408565b969995985093965092949392505050565b600080600060608486031215612936578081fd5b83359250612569602085016124cd565b600060208284031215612957578081fd5b611372826124cd565b60008060408385031215612972578182fd5b6126a8836124e1565b60008060006060848603121561298f578081fd5b612998846124e1565b95602085013595506040909401359392505050565b600081518084526129c5816020860160208601612d02565b601f01601f19169290920160200192915050565b600083516129eb818460208801612d02565b8351908301906129ff818360208801612d02565b01949350505050565b60006b536f6d654e6f6e73656e736560a01b8252600c81845483600282049050600180831680612a3957607f831692505b6020808410821415612a5957634e487b7160e01b88526022600452602488fd5b818015612a6d5760018114612a8257612ab2565b60ff1986168a890152848a0188019650612ab2565b60008b815260209020895b86811015612aa85781548c82018b0152908501908301612a8d565b505087858b010196505b50949998505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612af4908301846129ad565b9695505050505050565b60006020825261137260208301846129ad565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b6020808252600d908201526c14da59c81b9bdd081d985b1a59609a1b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b602080825260179082015276436f536f756c3a2075696e743332206f766572666c6f7760481b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115612cc657612cc6612d84565b500190565b600082612ce657634e487b7160e01b81526012600452602481fd5b500490565b600082821015612cfd57612cfd612d84565b500390565b60005b83811015612d1d578181015183820152602001612d05565b83811115610a545750506000910152565b600281046001821680612d4257607f821691505b60208210811415612d6357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612d7d57612d7d612d84565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610c4457600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122025606e38040510a69b482386262cb148cf7a85e715518f14ddaa0f737262e38264736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102175760003560e01c8061c2fc1461021c5780628ffa061461023157806301ffc9a71461024457806306fdde031461026c578063077f224a14610281578063081812fc14610294578063095ea7b3146102bf5780631249c58b146102d257806318160ddd146102da57806318badae8146102ec578063238ac933146102ff57806323b872dd146103125780632abc3d4e146103205780632f745c59146103415780633007daae1461035457806342842e0e1461031257806342966c68146103675780634eac19f81461037a5780634f6ccce71461038d57806355f804b3146103a057806361bc221a146103b35780636352211e146103bd5780636562f5f7146103d05780636c19e783146103e357806370a08231146103f6578063714c539814610409578063715018a6146104115780637a0f4de2146104195780637c772c67146104395780637ead60a61461045a5780638da5cb5b1461046d578063944fd180146104755780639540bce81461049857806395d89b41146104b95780639763d626146104c15780639e759355146104d45780639f118536146104e7578063a22cb465146104f4578063ae34710514610502578063b88d4fde14610515578063c87b56dd14610523578063cde4a8fc14610536578063d3f94a8714610549578063e985e9c51461056a578063f2fde38b146105a6578063fc68c689146105b9575b600080fd5b61022f61022a366004612771565b6105cc565b005b61022f61023f3660046126b6565b61069c565b610257610252366004612739565b610856565b60405190151581526020015b60405180910390f35b610274610883565b6040516102639190612afe565b61022f61028f3660046127a3565b610915565b6102a76102a2366004612813565b610a5a565b6040516001600160a01b039091168152602001610263565b61022f6102cd36600461268d565b610a81565b61022f610ab2565b60cb545b604051908152602001610263565b61022f6102fa36600461253e565b610ae5565b60fd546102a7906001600160a01b031681565b61022f6102cd36600461253e565b6102de61032e366004612813565b6101046020526000908152604090205481565b6102de61034f36600461268d565b610b42565b6102de610362366004612960565b610bd8565b61022f610375366004612813565b610c0e565b61022f61038836600461297b565b610c47565b6102de61039b366004612813565b610cff565b61022f6103ae366004612771565b610da0565b6102de6101035481565b6102a76103cb366004612813565b610dbf565b61022f6103de366004612653565b610df3565b61022f6103f13660046124f2565b610e26565b6102de6104043660046124f2565b610e50565b610274610ed6565b61022f610efe565b6102de610427366004612813565b60ff6020526000908152604090205481565b6102de610447366004612813565b6101006020526000908152604090205481565b61022f6104683660046125de565b610f10565b6102a761106a565b6102576104833660046124f2565b60fe6020526000908152604090205460ff1681565b6102de6104a63660046124f2565b6101026020526000908152604090205481565b610274611079565b61022f6104cf36600461282b565b611088565b61022f6104e236600461297b565b611178565b60fb546102579060ff1681565b61022f6102cd366004612653565b61022f6105103660046128c4565b611222565b61022f6102cd366004612579565b610274610531366004612813565b611312565b61022f610544366004612922565b611379565b6102de610557366004612813565b6101016020526000908152604090205481565b61025761057836600461250c565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b61022f6105b43660046124f2565b6113f0565b61022f6105c7366004612874565b611466565b33600081815260fe602052604090205460ff168061060257506105ed61106a565b6001600160a01b0316816001600160a01b0316145b61060b57600080fd5b60006008835161061b9190612ccb565b602084015190915060f81c600080805b8481101561069357600881026021018088015160e01c93506004810188015160e01c925050610681848484600090815261010460205260409020805463ffffffff80851b1990911692811690931b909216179055565b8061068b81612d69565b91505061062b565b50505050505050565b33600081815260fe602052604090205460ff16806106d257506106bd61106a565b6001600160a01b0316816001600160a01b0316145b6106db57600080fd5b60005b8681101561084c57600888888381811061070857634e487b7160e01b600052603260045260246000fd5b905060200201351061071957600080fd5b6000610104600086868581811061074057634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020549050600089898481811061077a57634e487b7160e01b600052603260045260246000fd5b9050602002013563ffffffff901b1990508989848181106107ab57634e487b7160e01b600052603260045260246000fd5b905060200201358888858181106107d257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107e79190612946565b63ffffffff16901b63ffffffff1681831617610104600088888781811061081e57634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020819055505050808061084490612d69565b9150506106de565b5050505050505050565b60006001600160e01b0319821663780e9d6360e01b148061087b575061087b82611553565b90505b919050565b60606097805461089290612d2e565b80601f01602080910402602001604051908101604052809291908181526020018280546108be90612d2e565b801561090b5780601f106108e05761010080835404028352916020019161090b565b820191906000526020600020905b8154815290600101906020018083116108ee57829003601f168201915b5050505050905090565b600054610100900460ff16158080156109355750600054600160ff909116105b806109565750610944306115a3565b158015610956575060005460ff166001145b6109be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156109e1576000805461ff0019166101001790555b6109e96115b2565b6109f384846115e1565b60fd80546001600160a01b0319166001600160a01b0384161790558015610a54576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000610a6582611612565b506000908152609b60205260409020546001600160a01b031690565b60405162461bcd60e51b81526004016109b5906020808252600490820152636e6f706560e01b604082015260600190565b610abb33610e50565b15610ac557600080fd5b610ae33361010360008154610ad990612d69565b9182905550611637565b565b33600081815260fe602052604090205460ff1680610b1b5750610b0661106a565b6001600160a01b0316816001600160a01b0316145b610b2457600080fd5b610b2d83610e50565b15610b3757600080fd5b610a54848484611651565b6000610b4d83610e50565b8210610baf5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016109b5565b506001600160a01b0391909116600090815260c960209081526040808320938352929052205490565b600060088360ff1610610bea57600080fd5b506000908152610104602052604090205463ffffffff60ff90921691821b16901c90565b33610c1882610dbf565b6001600160a01b031614610c2b57600080fd5b60008181526101046020526040812055610c44816117b0565b50565b33600081815260fe602052604090205460ff1680610c7d5750610c6861106a565b6001600160a01b0316816001600160a01b0316145b610c8657600080fd5b60088460ff1610610c9657600080fd5b6000610ca28584610bd8565b905083811015610cc45760405162461bcd60e51b81526004016109b590612c37565b60008381526101046020526040902054610ce460ff871686901b82612ceb565b60009485526101046020526040909420939093555050505050565b6000610d0a60cb5490565b8210610d6d5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016109b5565b60cb8281548110610d8e57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b610da8611842565b8051610dbb9060fc906020840190612317565b5050565b600080610dcb836118a1565b90506001600160a01b03811661087b5760405162461bcd60e51b81526004016109b590612c05565b610dfb611842565b6001600160a01b0391909116600090815260fe60205260409020805460ff1916911515919091179055565b610e2e611842565b60fd80546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b038216610eba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016109b5565b506001600160a01b03166000908152609a602052604090205490565b606060fc604051602001610eea9190612a08565b604051602081830303815290604052905090565b610f06611842565b610ae360006118bc565b33610f1a85610dbf565b6001600160a01b031614610f2d57600080fd5b610f3685610e50565b15610f4057600080fd5b600084815260ff6020526040812080548592909190610f5e83612d69565b9190505514610f6c57600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b03909216916110319185908590819084018382808284376000920191909152505060408051602081018b905290810189905261102b925060600190505b60408051601f1981840301815282825280516020918201207b0ca2ba3432b932bab69029b4b3b732b21026b2b9b9b0b3b29d05199960211b84830152603c8085019190915282518085039091018152605c909301909152815191012090565b9061190e565b6001600160a01b0316146110575760405162461bcd60e51b81526004016109b590612bde565b611062868686611651565b505050505050565b6033546001600160a01b031690565b60606098805461089290612d2e565b61109133610e50565b1561109b57600080fd5b33600090815261010260205260408120805485929091906110bb83612d69565b91905055146110c957600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b0390921691611139918590859081908401838280828437600092019190915250506040516001600160601b03193360601b1660208201526034810189905261102b92506054019050610fcc565b6001600160a01b03161461115f5760405162461bcd60e51b81526004016109b590612bde565b6111733361010360008154610ad990612d69565b505050565b33600081815260fe602052604090205460ff16806111ae575061119961106a565b6001600160a01b0316816001600160a01b0316145b6111b757600080fd5b60088460ff16106111c757600080fd5b60006111d38584610bd8565b905063ffffffff6111e48583612cb3565b11156112025760405162461bcd60e51b81526004016109b590612c37565b60008381526101046020526040902054610ce460ff871686901b82612cb3565b3361122c85610dbf565b6001600160a01b03161461123f57600080fd5b6000838152610100602052604081208054859290919061125e83612d69565b919050551461126c57600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b03909216916112d79185908590819084018382808284376000920191909152505060408051602081018b9052908101899052606081018b905261102b92506080019050610fcc565b6001600160a01b0316146112fd5760405162461bcd60e51b81526004016109b590612bde565b50505060009081526101046020526040902055565b606061131d82611612565b6000611327611932565b905060008151116113475760405180602001604052806000815250611372565b8061135184611941565b6040516020016113629291906129d9565b6040516020818303038152906040525b9392505050565b33600081815260fe602052604090205460ff16806113af575061139a61106a565b6001600160a01b0316816001600160a01b0316145b6113b857600080fd5b600884106113c557600080fd5b50600090815261010460205260409020805463ffffffff928316841b83169290931b19909216179055565b6113f8611842565b6001600160a01b03811661145d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b5565b610c44816118bc565b3361147085610dbf565b6001600160a01b03161461148357600080fd5b600084815261010160205260408120805485929091906114a283612d69565b91905055146114b057600080fd5b60fd54604080516020601f85018190048102820181019092528381526001600160a01b03909216916115149185908590819084018382808284376000920191909152505060408051602081018b905290810189905261102b92506060019050610fcc565b6001600160a01b03161461153a5760405162461bcd60e51b81526004016109b590612bde565b60008481526101046020526040812055610a54846117b0565b60006001600160e01b031982166380ac58cd60e01b148061158457506001600160e01b03198216635b5e139f60e01b145b8061087b57506301ffc9a760e01b6001600160e01b031983161461087b565b6001600160a01b03163b151590565b600054610100900460ff166115d95760405162461bcd60e51b81526004016109b590612c68565b610ae36119e3565b600054610100900460ff166116085760405162461bcd60e51b81526004016109b590612c68565b610dbb8282611a13565b61161b81611a61565b610c445760405162461bcd60e51b81526004016109b590612c05565b610dbb828260405180602001604052806000815250611a7e565b826001600160a01b031661166482610dbf565b6001600160a01b03161461168a5760405162461bcd60e51b81526004016109b590612b63565b6001600160a01b0382166116ec5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016109b5565b6116f98383836001611ab1565b826001600160a01b031661170c82610dbf565b6001600160a01b0316146117325760405162461bcd60e51b81526004016109b590612b63565b6000818152609b6020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652609a855283862080546000190190559087168086528386208054600101905586865260999094528285208054909216841790915590518493600080516020612dc783398151915291a4611173565b60006117bb82610dbf565b90506117cb816000846001611ab1565b6117d482610dbf565b6000838152609b6020908152604080832080546001600160a01b03199081169091556001600160a01b038516808552609a84528285208054600019019055878552609990935281842080549091169055519293508492600080516020612dc7833981519152908390a4610dbb565b3361184b61106a565b6001600160a01b031614610ae35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109b5565b6000908152609960205260409020546001600160a01b031690565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080600061191d8585611be5565b9150915061192a81611c2b565b509392505050565b606060fc805461089290612d2e565b6060600061194e83611dae565b60010190506000816001600160401b0381111561197b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119a5576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119de5761192a565b6119af565b600054610100900460ff16611a0a5760405162461bcd60e51b81526004016109b590612c68565b610ae3336118bc565b600054610100900460ff16611a3a5760405162461bcd60e51b81526004016109b590612c68565b8151611a4d906097906020850190612317565b508051611173906098906020840190612317565b600080611a6d836118a1565b6001600160a01b0316141592915050565b611a888383611e84565b611a956000848484611f8e565b6111735760405162461bcd60e51b81526004016109b590612b11565b6001811115611b205760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016109b5565b816001600160a01b038516611b7c57611b778160cb8054600083815260cc60205260408120829055600182018355919091527fa7ce836d032b2bf62b7e2097a8e0a6d8aeb35405ad15271e96d3b0188a1d06fb0155565b611b9f565b836001600160a01b0316856001600160a01b031614611b9f57611b9f85826120a3565b6001600160a01b038416611bbb57611bb681612140565b611bde565b846001600160a01b0316846001600160a01b031614611bde57611bde8482612219565b5050505050565b600080825160411415611c1c5760208301516040840151606085015160001a611c108782858561225d565b94509450505050611c24565b506000905060025b9250929050565b6000816004811115611c4d57634e487b7160e01b600052602160045260246000fd5b1415611c5857610c44565b6001816004811115611c7a57634e487b7160e01b600052602160045260246000fd5b1415611cc35760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b60448201526064016109b5565b6002816004811115611ce557634e487b7160e01b600052602160045260246000fd5b1415611d335760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109b5565b6003816004811115611d5557634e487b7160e01b600052602160045260246000fd5b1415610c445760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109b5565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611ded5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310611e17576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310611e3557662386f26fc10000830492506010015b6305f5e1008310611e4d576305f5e100830492506008015b6127108310611e6157612710830492506004015b60648310611e73576064830492506002015b600a831061087b5760010192915050565b6001600160a01b038216611eda5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109b5565b611ee381611a61565b15611f005760405162461bcd60e51b81526004016109b590612ba8565b611f0e600083836001611ab1565b611f1781611a61565b15611f345760405162461bcd60e51b81526004016109b590612ba8565b6001600160a01b0382166000818152609a6020908152604080832080546001019055848352609990915280822080546001600160a01b031916841790555183929190600080516020612dc7833981519152908290a4610dbb565b6000611fa2846001600160a01b03166115a3565b1561209757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fd9903390899088908890600401612ac1565b602060405180830381600087803b158015611ff357600080fd5b505af1925050508015612023575060408051601f3d908101601f1916820190925261202091810190612755565b60015b61207d573d808015612051576040519150601f19603f3d011682016040523d82523d6000602084013e612056565b606091505b5080516120755760405162461bcd60e51b81526004016109b590612b11565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061209b565b5060015b949350505050565b600060016120b084610e50565b6120ba9190612ceb565b600083815260ca602052604090205490915080821461210d576001600160a01b038416600090815260c960209081526040808320858452825280832054848452818420819055835260ca90915290208190555b50600091825260ca602090815260408084208490556001600160a01b03909416835260c981528383209183525290812055565b60cb5460009061215290600190612ceb565b600083815260cc602052604081205460cb805493945090928490811061218857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060cb83815481106121b757634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260cc909152604080822084905585825281205560cb8054806121fd57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061222483610e50565b6001600160a01b03909316600090815260c960209081526040808320868452825280832085905593825260ca9052919091209190915550565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561228a575060009050600361230e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156122de573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123075760006001925092505061230e565b9150600090505b94509492505050565b82805461232390612d2e565b90600052602060002090601f016020900481019282612345576000855561238b565b82601f1061235e57805160ff191683800117855561238b565b8280016001018555821561238b579182015b8281111561238b578251825591602001919060010190612370565b5061239792915061239b565b5090565b5b80821115612397576000815560010161239c565b80356001600160a01b038116811461087e57600080fd5b60008083601f8401126123d8578081fd5b5081356001600160401b038111156123ee578182fd5b6020830191508360208083028501011115611c2457600080fd5b60008083601f840112612419578182fd5b5081356001600160401b0381111561242f578182fd5b602083019150836020828501011115611c2457600080fd5b600082601f830112612457578081fd5b81356001600160401b038082111561247157612471612d9a565b604051601f8301601f19908116603f0116810190828211818310171561249957612499612d9a565b816040528381528660208588010111156124b1578485fd5b8360208701602083013792830160200193909352509392505050565b803563ffffffff8116811461087e57600080fd5b803560ff8116811461087e57600080fd5b600060208284031215612503578081fd5b611372826123b0565b6000806040838503121561251e578081fd5b612527836123b0565b9150612535602084016123b0565b90509250929050565b600080600060608486031215612552578081fd5b61255b846123b0565b9250612569602085016123b0565b9150604084013590509250925092565b6000806000806080858703121561258e578081fd5b612597856123b0565b93506125a5602086016123b0565b92506040850135915060608501356001600160401b038111156125c6578182fd5b6125d287828801612447565b91505092959194509250565b60008060008060008060a087890312156125f6578182fd5b6125ff876123b0565b955061260d602088016123b0565b9450604087013593506060870135925060808701356001600160401b03811115612635578283fd5b61264189828a01612408565b979a9699509497509295939492505050565b60008060408385031215612665578182fd5b61266e836123b0565b915060208301358015158114612682578182fd5b809150509250929050565b6000806040838503121561269f578182fd5b6126a8836123b0565b946020939093013593505050565b600080600080600080606087890312156126ce578182fd5b86356001600160401b03808211156126e4578384fd5b6126f08a838b016123c7565b90985096506020890135915080821115612708578384fd5b6127148a838b016123c7565b9096509450604089013591508082111561272c578384fd5b5061264189828a016123c7565b60006020828403121561274a578081fd5b813561137281612db0565b600060208284031215612766578081fd5b815161137281612db0565b600060208284031215612782578081fd5b81356001600160401b03811115612797578182fd5b61209b84828501612447565b6000806000606084860312156127b7578081fd5b83356001600160401b03808211156127cd578283fd5b6127d987838801612447565b945060208601359150808211156127ee578283fd5b506127fb86828701612447565b92505061280a604085016123b0565b90509250925092565b600060208284031215612824578081fd5b5035919050565b60008060006040848603121561283f578081fd5b8335925060208401356001600160401b0381111561285b578182fd5b61286786828701612408565b9497909650939450505050565b60008060008060608587031215612889578182fd5b843593506020850135925060408501356001600160401b038111156128ac578283fd5b6128b887828801612408565b95989497509550505050565b6000806000806000608086880312156128db578283fd5b85359450602086013593506040860135925060608601356001600160401b03811115612905578182fd5b61291188828901612408565b969995985093965092949392505050565b600080600060608486031215612936578081fd5b83359250612569602085016124cd565b600060208284031215612957578081fd5b611372826124cd565b60008060408385031215612972578182fd5b6126a8836124e1565b60008060006060848603121561298f578081fd5b612998846124e1565b95602085013595506040909401359392505050565b600081518084526129c5816020860160208601612d02565b601f01601f19169290920160200192915050565b600083516129eb818460208801612d02565b8351908301906129ff818360208801612d02565b01949350505050565b60006b536f6d654e6f6e73656e736560a01b8252600c81845483600282049050600180831680612a3957607f831692505b6020808410821415612a5957634e487b7160e01b88526022600452602488fd5b818015612a6d5760018114612a8257612ab2565b60ff1986168a890152848a0188019650612ab2565b60008b815260209020895b86811015612aa85781548c82018b0152908501908301612a8d565b505087858b010196505b50949998505050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612af4908301846129ad565b9695505050505050565b60006020825261137260208301846129ad565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b6020808252600d908201526c14da59c81b9bdd081d985b1a59609a1b604082015260600190565b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b602080825260179082015276436f536f756c3a2075696e743332206f766572666c6f7760481b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115612cc657612cc6612d84565b500190565b600082612ce657634e487b7160e01b81526012600452602481fd5b500490565b600082821015612cfd57612cfd612d84565b500390565b60005b83811015612d1d578181015183820152602001612d05565b83811115610a545750506000910152565b600281046001821680612d4257607f821691505b60208210811415612d6357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612d7d57612d7d612d84565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610c4457600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122025606e38040510a69b482386262cb148cf7a85e715518f14ddaa0f737262e38264736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchSetSlot(uint256[],uint32[],uint256[])": {
        "params": {
          "_amounts": "Amout to update",
          "_slots": "Slot value. Up to 7",
          "_tokenIds": "Token ID from which to update the blob data"
        }
      },
      "batchSetSlot_UfO(bytes)": {
        "params": {
          "_data": "bytes data               3 bits for slot | one byte               after previous byte, alternate bewteen next elements like a packed array               4 bytes for each address               4 bytes for each token ID"
        }
      },
      "burn(uint256)": {
        "params": {
          "_tokenId": "Token ID to be burnt (fiiire)"
        }
      },
      "burnWithSignature(uint256,uint256,bytes)": {
        "params": {
          "_nonce": "Burn counter used to prevent replays",
          "_signature": "Signature provided by our signer to validate burn",
          "_tokenId": "Token ID to be burnt (fiiire)"
        }
      },
      "decSlot(uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amout to decrement a slot",
          "_slot": "Slot value. Up to 7",
          "_tokenId": "Token ID from which to update the blob data"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getBaseURI()": {
        "details": "Get Base URI used for computing {tokenURI}."
      },
      "getSlot(uint8,uint256)": {
        "params": {
          "_slot": "Slot value. Up to 7",
          "_tokenId": "Token ID from which to get the blob data"
        }
      },
      "incSlot(uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amout to increment a slot",
          "_slot": "Slot value. Up to 7",
          "_tokenId": "Token ID from which to update the blob data"
        }
      },
      "initialize(string,string,address)": {
        "params": {
          "__name": "Name of SBT",
          "__symbol": "Symbol of SBT",
          "_signer": "Address that will provide valid signatures"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintWithSignature(uint256,bytes)": {
        "params": {
          "_nonce": "Mint counter used to prevent replays",
          "_signature": "Signature provided by our signer to validate mint"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "overrideTransfer(address,address,uint256)": {
        "params": {
          "_from": "Previous token owner",
          "_to": "New token owner",
          "_tokenId": "Token to transfer"
        }
      },
      "overrideTransferWithSignature(address,address,uint256,uint256,bytes)": {
        "params": {
          "_from": "Previous token owner",
          "_nonce": "Transfer counter used to prevent replays",
          "_signature": "Signature provided by our signer to validate transfer",
          "_to": "New token owner",
          "_tokenId": "Token to transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "params": {
          "_newBaseURI": "New baseURI"
        }
      },
      "setCallers(address,bool)": {
        "params": {
          "_caller": "New signer",
          "_val": "Boolean to set/unset"
        }
      },
      "setSigner(address)": {
        "params": {
          "_signer": "New signer"
        }
      },
      "setSlot(uint256,uint32,uint256)": {
        "params": {
          "_amount": "Amout to update",
          "_slot": "Slot value. Up to 7",
          "_tokenId": "Token ID from which to update the blob data"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "syncWithSignature(uint256,uint256,uint256,bytes)": {
        "params": {
          "_data": "Blob data that will overwrite current data",
          "_nonce": "Sync counter used to prevent replays",
          "_signature": "Signature provided by our signer to validate leaf data",
          "_tokenId": "Token ID from which to update blob"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchSetSlot(uint256[],uint32[],uint256[])": {
        "notice": "Function to update the value of a slot in a blob"
      },
      "batchSetSlot_UfO(bytes)": {
        "notice": "Function to update the value of a slot in a blob"
      },
      "burn(uint256)": {
        "notice": "Function to burn token from msg.sender"
      },
      "burnWithSignature(uint256,uint256,bytes)": {
        "notice": "Function to burn token via signature to msg.sender"
      },
      "decSlot(uint8,uint256,uint256)": {
        "notice": "Function to decrement the value of a slot in a blob by some amount"
      },
      "getSlot(uint8,uint256)": {
        "notice": "Getter function to get the value in a specific slot of a given blob"
      },
      "incSlot(uint8,uint256,uint256)": {
        "notice": "Function to increment the value of a slot in a blob by some amount"
      },
      "initialize(string,string,address)": {
        "notice": "Init function called during proxy setup"
      },
      "mint()": {
        "notice": "Function to mint token"
      },
      "mintWithSignature(uint256,bytes)": {
        "notice": "Function to mint token via signature to msg.sender"
      },
      "overrideTransfer(address,address,uint256)": {
        "notice": "Function to transfer token under approval of the protocol. Gated by authorised addresses"
      },
      "overrideTransferWithSignature(address,address,uint256,uint256,bytes)": {
        "notice": "Function to transfer token under approval of the protocol via signature"
      },
      "setBaseURI(string)": {
        "notice": "Set a new baseURI. Owner gated."
      },
      "setCallers(address,bool)": {
        "notice": "Set a addreses capable of updating blob data of SBTs"
      },
      "setSigner(address)": {
        "notice": "Set a new signer. Owner gated"
      },
      "setSlot(uint256,uint32,uint256)": {
        "notice": "Function to update the value of a slot in a blob"
      },
      "syncWithSignature(uint256,uint256,uint256,bytes)": {
        "notice": "Function to sync blob data of a token from a signature signed by our signer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2143,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2723,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 329,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 331,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 335,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 339,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 343,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 349,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1251,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1416,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1420,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1423,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_allTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1427,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1759,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 3615,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "initiated",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 3617,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "baseUri",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 3619,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "signer",
        "offset": 0,
        "slot": "253",
        "type": "t_address"
      },
      {
        "astId": 3623,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "authorisedCallers",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3627,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "transferNonces",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3631,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "syncNonces",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3635,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "burnNonces",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3639,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "mintNonces",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3641,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "counter",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 3645,
        "contract": "contracts/coordinape-protocol/contracts/cosoul/CoSoul.sol:CoSoul",
        "label": "blobs",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}