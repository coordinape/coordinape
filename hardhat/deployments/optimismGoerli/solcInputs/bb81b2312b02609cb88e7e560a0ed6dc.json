{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/coordinape-protocol/contracts/soulkeys/SoulKeys.sol": {
      "content": "pragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// SoulKeys \ncontract SoulKeys is Ownable {\n    address public protocolFeeDestination;\n    uint256 public protocolFeePercent;\n    uint256 public subjectFeePercent;\n\n    event Trade(address trader, address subject, bool isBuy, uint256 shareAmount, uint256 ethAmount, uint256 protocolEthAmount, uint256 subjectEthAmount, uint256 supply);\n\n    // SharesSubject => (Holder => Balance)\n    mapping(address => mapping(address => uint256)) public sharesBalance;\n\n    // SharesSubject => Supply\n    mapping(address => uint256) public sharesSupply;\n\n    function setFeeDestination(address _feeDestination) public onlyOwner {\n        protocolFeeDestination = _feeDestination;\n    }\n\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\n        protocolFeePercent = _feePercent;\n    }\n\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\n        subjectFeePercent = _feePercent;\n    }\n\n    function getPrice(uint256 supply, uint256 amount) public pure returns (uint256) {\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1 )* (supply) * (2 * (supply - 1) + 1) / 6;\n        uint256 sum2 = supply == 0 && amount == 1 ? 0 : (supply - 1 + amount) * (supply + amount) * (2 * (supply - 1 + amount) + 1) / 6;\n        uint256 summation = sum2 - sum1;\n        return summation * 1 ether / 16000;\n    }\n\n    function getBuyPrice(address sharesSubject, uint256 amount) public view returns (uint256) {\n        return getPrice(sharesSupply[sharesSubject], amount);\n    }\n\n    function getSellPrice(address sharesSubject, uint256 amount) public view returns (uint256) {\n        return getPrice(sharesSupply[sharesSubject] - amount, amount);\n    }\n\n    function getBuyPriceAfterFee(address sharesSubject, uint256 amount) public view returns (uint256) {\n        uint256 price = getBuyPrice(sharesSubject, amount);\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\n        return price + protocolFee + subjectFee;\n    }\n\n    function getSellPriceAfterFee(address sharesSubject, uint256 amount) public view returns (uint256) {\n        uint256 price = getSellPrice(sharesSubject, amount);\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\n        return price - protocolFee - subjectFee;\n    }\n\n    function buyShares(address sharesSubject, uint256 amount) public payable {\n        uint256 supply = sharesSupply[sharesSubject];\n        require(supply > 0 || sharesSubject == msg.sender, \"Only the shares' subject can buy the first share\");\n        uint256 price = getPrice(supply, amount);\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\n        require(msg.value >= price + protocolFee + subjectFee, \"Insufficient payment\");\n        sharesBalance[sharesSubject][msg.sender] = sharesBalance[sharesSubject][msg.sender] + amount;\n        sharesSupply[sharesSubject] = supply + amount;\n        emit Trade(msg.sender, sharesSubject, true, amount, price, protocolFee, subjectFee, supply + amount);\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\n        (bool success2, ) = sharesSubject.call{value: subjectFee}(\"\");\n        require(success1 && success2, \"Unable to send funds\");\n    }\n\n    function sellShares(address sharesSubject, uint256 amount) public payable {\n        uint256 supply = sharesSupply[sharesSubject];\n        require(supply > amount, \"Cannot sell the last share\");\n        uint256 price = getPrice(supply - amount, amount);\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\n        require(sharesBalance[sharesSubject][msg.sender] >= amount, \"Insufficient shares\");\n        sharesBalance[sharesSubject][msg.sender] = sharesBalance[sharesSubject][msg.sender] - amount;\n        sharesSupply[sharesSubject] = supply - amount;\n        emit Trade(msg.sender, sharesSubject, false, amount, price, protocolFee, subjectFee, supply - amount);\n        (bool success1, ) = msg.sender.call{value: price - protocolFee - subjectFee}(\"\");\n        (bool success2, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\n        (bool success3, ) = sharesSubject.call{value: subjectFee}(\"\");\n        require(success1 && success2 && success3, \"Unable to send funds\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}