type Mutation {
  acceptTOS: AcceptTOSOutput
}

type Mutation {
  addEmail(payload: AddEmailInput!): ConfirmationResponse
}

type Mutation {
  addFarcaster: ConfirmationWithErrorResponse
}

type Mutation {
  addInviteCodes(payload: AddInviteCodesInput!): ConfirmationResponse!
}

type Mutation {
  adminUpdateUser(payload: AdminUpdateUserInput!): UserResponse
}

type Mutation {
  allocationCsv(payload: AllocationCsvInput!): AllocationCsvResponse
}

type Query {
  checkEthDenverInvitee: CheckEthDenverInviteeOutput
}

type Mutation {
  createCircle(payload: CreateCircleInput!): CreateCircleResponse
}

type Mutation {
  createCoLinksGive(payload: CreateCoLinksGiveInput!): CreateCoLinksGiveResponse
}

type Mutation {
  createEpoch(payload: CreateEpochInput!): EpochResponse
}

type Mutation {
  createNominee(payload: CreateNomineeInput!): CreateNomineeResponse
}

type Mutation {
  createOrgMembers(payload: CreateOrgMembersInput!): [OrgMemberResponse]
}

type Mutation {
  createSampleCircle: CreateSampleCircleResponse
}

type Mutation {
  createUserWithToken(payload: CreateUserWithTokenInput!): UserResponse
}

type Mutation {
  createUsers(payload: CreateUsersInput!): [UserResponse]
}

type Mutation {
  createVault(payload: CreateVaultInput!): VaultResponse
}

type Mutation {
  createVaultTx(payload: LogVaultTxInput!): LogVaultTxResponse
}

type Mutation {
  deleteCircle(payload: DeleteCircleInput!): ConfirmationResponse
}

type Mutation {
  deleteCoLinksGive(payload: DeleteCoLinksGiveInput!): SuccessResponse
}

type Mutation {
  deleteContribution(payload: DeleteContributionInput!): ConfirmationResponse
}

type Mutation {
  deleteEmail(payload: DeleteEmailInput!): ConfirmationResponse
}

type Mutation {
  deleteEpoch(payload: DeleteEpochInput!): DeleteEpochResponse
}

type Mutation {
  deleteOrgMember(payload: IdInput!): ConfirmationResponse
}

type Mutation {
  deleteUser(payload: DeleteUserInput!): ConfirmationResponse
}

type Mutation {
  deleteUsers(payload: DeleteUsersInput!): DeleteUsersResponse
}

type Mutation {
  endEpoch(payload: EndEpochInput!): EpochResponse
}

type Mutation {
  generateApiKey(payload: GenerateApiKeyInput!): GenerateApiKeyResponse
}

type Mutation {
  generateOneTimeUpload: UploadUrlResponse
}

type Query {
  getCasts(payload: GetCastsInput!): GetCastsOutput!
}

type Query {
  getGuildInfo(payload: GuildInfoInput!): GuildInfoOutput
}

type Query {
  getHeadlines: [HeadlinesOutput!]!
}

type Query {
  getSimilarProfiles(payload: SimilarProfileInput!): [SimilarProfileOutput!]!
}

type Mutation {
  giveCsv(payload: GiveCsvInput!): GiveCsvResponse
}

type Mutation {
  inviteWaitingList(payload: InviteWaitingListInput!): ConfirmationResponse!
}

type Mutation {
  logoutUser: LogoutResponse
}

type Mutation {
  markClaimed(payload: MarkClaimedInput!): MarkClaimedOutput
}

type Mutation {
  replenishInviteCodes(
    payload: ReplenishInviteCodesInput!
  ): ConfirmationResponse!
}

type Mutation {
  requestInviteCode(
    payload: RequestInviteCodeInput!
  ): ConfirmationWithErrorResponse!
}

type Mutation {
  restoreCoordinape(payload: CoordinapeInput!): ConfirmationResponse
}

type Query {
  searchCosouls(payload: SearchCosoulsInput!): SearchCosoulsOutput
}

type Query {
  searchProfiles(payload: SearchProfilesInput!): [SearchProfilesOutput!]!
}

type Mutation {
  setPrimaryEmail(payload: SetPrimaryEmailInput!): ConfirmationResponse
}

type Mutation {
  share(payload: ShareInput!): ShareOutput
}

type Mutation {
  syncCoSoul(payload: SyncCoSoulInput!): SyncCoSoulOutput
}

type Mutation {
  syncLinks: ConfirmationResponse
}

type Mutation {
  updateAllocations(payload: Allocations!): AllocationsResponse
}

type Mutation {
  updateCircle(payload: UpdateCircleInput!): UpdateCircleOutput
}

type Mutation {
  updateCircleStartingGive(
    payload: UpdateCircleStartingGiveInput!
  ): ConfirmationResponse
}

type Mutation {
  updateContribution(
    payload: UpdateContributionInput!
  ): UpdateContributionResponse
}

type Mutation {
  updateEpoch(payload: UpdateEpochInput!): EpochResponse
}

type Mutation {
  updateProfile(payload: UpdateProfileInput!): UpdateProfileResponse
}

type Mutation {
  updateRepScore: ConfirmationResponse
}

type Mutation {
  updateTeammates(payload: UpdateTeammatesInput!): UpdateTeammatesResponse
}

type Mutation {
  updateUser(payload: UpdateUserInput!): UserResponse
}

type Mutation {
  uploadCircleLogo(payload: UploadCircleImageInput!): UpdateCircleResponse
}

type Mutation {
  uploadOrgLogo(payload: UploadOrgImageInput!): UpdateOrgResponse
}

type Mutation {
  uploadProfileAvatar(payload: UploadImageInput!): UpdateProfileResponse
}

type Mutation {
  uploadProfileBackground(payload: UploadImageInput!): UpdateProfileResponse
}

type Mutation {
  vouch(payload: VouchInput!): VouchOutput
}

input CreateCircleInput {
  user_name: String!
  circle_name: String!
  organization_name: String
  organization_id: Int
  contact: String
  image_data_base64: String
}

input CreateCoLinksGiveInput {
  activity_id: Int
  address: String
  cast_hash: String
  skill: String
}

input DeleteCoLinksGiveInput {
  give_id: Int!
}

input CreateUserInput {
  circle_id: Int!
  address: String!
  name: String!
  fixed_non_receiver: Boolean
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
  fixed_payment_amount: Float
}

input UploadImageInput {
  url: String!
}

input UploadCircleImageInput {
  circle_id: Int!
  image_data_base64: String!
}

input AdminUpdateUserInput {
  circle_id: Int!
  profile_id: Int!
  name: String
  non_giver: Boolean
  starting_tokens: Int
  fixed_non_receiver: Boolean
  non_receiver: Boolean
  role: Int
  fixed_payment_amount: Float
}

input DeleteEpochInput {
  id: Int!
  circle_id: Int!
}

input CreateNomineeInput {
  name: String!
  circle_id: Int!
  address: String!
  description: String!
}

input UpdateUserInput {
  circle_id: Int!
  non_receiver: Boolean
  epoch_first_visit: Boolean
  bio: String
}

input VouchInput {
  nominee_id: Int!
}

input UpdateTeammatesInput {
  teammates: [Int]!
  circle_id: Int!
}

input DeleteUserInput {
  circle_id: Int!
  profile_id: Int!
}

input UpdateCircleInput {
  circle_id: Int!
  name: String
  token_name: String
  cont_help_text: String
  alloc_text: String
  allow_distribute_evenly: Boolean
  vouching: Boolean
  min_vouches: Int
  nomination_days_limit: Int
  vouching_text: String
  team_selection: Boolean
  default_opt_in: Boolean
  discord_webhook: String
  only_giver_vouch: Boolean
  auto_opt_out: Boolean
  update_webhook: Boolean
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  show_pending_gives: Boolean
  guild_id: Int
  guild_role_id: Int
}

input UpdateEpochInput {
  id: Int!
  circle_id: Int!
  grant: Float
  description: String
  params: EpochInputParams
}

input Allocation {
  recipient_id: Int!
  tokens: Int!
  note: String!
}

input Allocations {
  allocations: [Allocation!]
  circle_id: Int!
  user_id: Int
}

input CreateUsersInput {
  circle_id: Int!
  users: [UserObj]!
}

input CreateOrgMembersInput {
  org_id: Int!
  users: [UserObj]!
}

input UserObj {
  name: String!
  address: String!
  non_giver: Boolean
  fixed_non_receiver: Boolean
  non_receiver: Boolean
  starting_tokens: Int
  role: Int
  entrance: String
}

input AllocationCsvInput {
  circle_id: Int!
  grant: Float
  epoch: Int
  epoch_id: Int
  form_gift_amount: Float
  gift_token_symbol: String
}

input CreateVaultInput {
  org_id: Int!
  vault_address: String!
  chain_id: Int!
  deployment_block: Int!
  tx_hash: String!
}

input GenerateApiKeyInput {
  name: String!
  circle_id: Int!
  read_circle: Boolean
  update_circle: Boolean
  read_nominees: Boolean
  create_vouches: Boolean
  read_pending_token_gifts: Boolean
  update_pending_token_gifts: Boolean
  read_member_profiles: Boolean
  read_epochs: Boolean
  read_contributions: Boolean
  create_contributions: Boolean
  read_discord: Boolean
  manage_users: Boolean
}

input UploadOrgImageInput {
  org_id: Int!
  image_data_base64: String!
}

input CoordinapeInput {
  circle_id: Int!
}

input LogVaultTxInput {
  tx_type: String!
  tx_hash: String!
  vault_id: Int!
  distribution_id: Int
  circle_id: Int
  org_id: Int
  amount: Float
  symbol: String
}

input DeleteCircleInput {
  circle_id: Int!
}

input CircleLandingInfoInput {
  token: String!
}

input CreateUserWithTokenInput {
  token: String!
}

input DeleteContributionInput {
  contribution_id: Int!
}

input UpdateContributionInput {
  id: Int!
  description: String!
}

input MarkClaimedInput {
  claim_id: Int!
  tx_hash: String!
}

input DeleteUsersInput {
  circle_id: Int!
  addresses: [String!]!
}

input UpdateProfileNameInput {
  name: String!
}

input UpdateProfileInput {
  name: String!
  skills: String
  bio: String
  description: String
  telegram_username: String
  discord_username: String
  twitter_username: String
  github_username: String
  medium_username: String
  website: String
}

input EpochInputParams {
  type: String!
  start_date: timestamptz!
  end_date: timestamptz!
  time_zone: String
  frequency: Int
  frequency_unit: String
  duration: Int
  duration_unit: String
  weekday: Int
  week: Int
}

input CreateEpochInput {
  circle_id: Int!
  grant: Float
  params: EpochInputParams!
}

input GuildInfoInput {
  id: String!
}

input EndEpochInput {
  id: Int!
  circle_id: Int!
}

input IdInput {
  id: Int!
}

input GiveCsvInput {
  circle_id: Int!
  epoch: Int
  epoch_id: Int
}

input SyncCoSoulInput {
  tx_hash: String!
}

input UpdateCircleStartingGiveInput {
  circle_id: Int!
  starting_tokens: Int!
}

input AcceptTOSInput {
  profile_id: Int!
}

input AddEmailInput {
  email: String!
  co_links: Boolean!
}

input DeleteEmailInput {
  email: String!
}

input SetPrimaryEmailInput {
  email: String!
}

input SearchCosoulsInput {
  search_query: String!
}

input SimilarProfileInput {
  address: String!
}

input RedeemInviteCodeInput {
  code: String!
}

input AddInviteCodesInput {
  address: String!
  count: Int!
  to_invitees: Boolean
}

input RequestInviteCodeInput {
  email: String!
}

input ReplenishInviteCodesInput {
  count: Int!
  invited_by_address: String
}

input InviteWaitingListInput {
  limit: Int!
  invites: Int
}

input SearchProfilesInput {
  search_query: String!
  limit: Int
}

input ShareInput {
  activity_id: Int!
}

input AddFarcasterInput {
  message: String!
  fid: Int!
  signature: String!
}

input NetworkInput {
  profile_id: Int
  farcaster_id: Int
}

input GetCastsInput {
  fid: bigint
  cast_ids: [bigint!]
}

type CreateCircleResponse {
  id: Int!
}

type CreateCoLinksGiveResponse {
  id: Int!
}

type UpdateProfileResponse {
  id: Int!
}

type UpdateCircleResponse {
  id: Int!
}

type LogoutResponse {
  id: Int
}

type UserResponse {
  id: ID!
}

type DeleteEpochResponse {
  success: Boolean!
}

type CreateNomineeResponse {
  id: Int
}

type VouchOutput {
  id: Int!
}

type EpochResponse {
  id: ID!
}

type UpdateTeammatesResponse {
  user_id: ID!
}

type ConfirmationResponse {
  success: Boolean!
}

type UpdateCircleOutput {
  id: Int!
}

type AllocationsResponse {
  user_id: Int!
}

type AllocationCsvResponse {
  file: String!
}

type VaultResponse {
  id: ID!
}

type GenerateApiKeyResponse {
  api_key: String!
  hash: String!
}

type UpdateOrgResponse {
  id: Int!
}

type LogVaultTxResponse {
  id: ID!
}

type DeleteCircleResponse {
  success: Boolean!
}

type CircleLandingInfoResponse {
  circle_id: Int!
  name: String!
  logo: String!
}

type UpdateContributionResponse {
  id: ID!
}

type MarkClaimedOutput {
  ids: [Int!]!
}

type CreateSampleCircleResponse {
  id: Int!
}

type UpdateProfileNameResponse {
  id: Int!
}

type DeleteUserBulkResponse {
  success: Boolean!
}

type DeleteUsersResponse {
  success: Boolean!
}

type GuildAdmin {
  address: String!
}

type GuildRole {
  name: String!
  image_url: String!
  id: Int!
  member_count: Int!
}

type GuildInfoOutput {
  id: Int!
  name: String!
  url_name: String!
  description: String!
  image_url: String!
  member_count: Int!
  admins: [GuildAdmin]
  roles: [GuildRole]
}

type OrgMemberResponse {
  id: ID!
  new: Boolean!
}

type SuccessResponse {
  success: Boolean!
}

type GiveCsvResponse {
  file: String!
}

type SyncCoSoulOutput {
  token_id: String
}

type AcceptTOSOutput {
  tos_agreed_at: String!
}

type SearchCosoulsOutput {
  cosoul_ids: [Int!]!
}

type SimilarProfilesOutput {
  profiles: [SimilarProfile]!
}

type SimilarProfile {
  other_address: String!
  score: Int!
}

type SimilarProfileOutput {
  profile_id: Int!
}

type ConfirmationWithErrorResponse {
  success: Boolean!
  error: String
}

type HeadlinesOutput {
  activity_id: Int!
  headline: String!
  description: String!
}

type SearchProfilesOutput {
  profile_id: Int!
  similarity: Float!
}

type UploadUrlResult {
  id: String
  upload_url: String
}

type UploadUrlResponse {
  errors: [String]
  messages: [String]
  result: UploadUrlResult
  result_info: String
  success: Boolean
}

type ShareOutput {
  token: String!
}

type CheckEthDenverInviteeOutput {
  is_eth_denver_invitee: Boolean!
}

type NetworkNode {
  username: String!
  avatar: String
  profile_id: Int
  farcaster_id: Int
  tier: Int
}

type NetworkOutput {
  nodes: [NetworkNode!]
}

type CastMention {
  fname: String!
  address: String!
}

type CastEmbed {
  type: String!
  url: String!
}

type Cast {
  id: bigint!
  text: String!
  text_with_mentions: String!
  like_count: Int!
  recast_count: Int!
  replies_count: Int!
  created_at: String!
  hash: String!
  fid: bigint!
  fname: String!
  avatar_url: String!
  address: String!
  mentioned_addresses: [CastMention!]!
  embeds: [CastEmbed!]!
}

type GetCastsOutput {
  casts: [Cast!]!
}

scalar timestamptz
