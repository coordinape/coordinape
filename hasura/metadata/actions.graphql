type Mutation {
  adminUpdateUser(payload: AdminUpdateUserInput!): UserResponse
}

type Mutation {
  createCircle(payload: CreateCircleInput!): CreateCircleResponse
}

type Mutation {
  createUser(payload: CreateUserInput!): UserResponse
}

type Mutation {
  logoutUser: LogoutResponse
}

type Mutation {
  uploadCircleLogo(payload: UploadCircleImageInput!): UpdateCircleResponse
}

type Mutation {
  uploadProfileAvatar(payload: UploadImageInput!): UpdateProfileResponse
}

type Mutation {
  uploadProfileBackground(payload: UploadImageInput!): UpdateProfileResponse
}

input CreateCircleInput {
  user_name: String!
  circle_name: String!
  protocol_name: String
  protocol_id: Int
}

input CreateUserInput {
  circle_id: Int!
  address: String!
  name: String!
  fixed_non_receiver: Boolean
  give_token_remaining: Int
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
}

input UploadImageInput {
  image_data_base64: String!
}

input UploadCircleImageInput {
  circle_id: Int!
  image_data_base64: String!
}

input AdminUpdateUserInput {
  circle_id: Int!
  address: String!
  new_address: String
  name: String
  non_giver: Boolean
  starting_tokens: Int
  fixed_non_receiver: Boolean
  non_receiver: Boolean
  role: Int
}

type CreateCircleResponse {
  id: Int!
}

type UpdateProfileResponse {
  id: Int!
}

type UpdateCircleResponse {
  id: Int!
}

type LogoutResponse {
  id: Int
}

type UserResponse {
  id: ID!
}
