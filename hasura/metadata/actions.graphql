type Mutation {
  adminUpdateUser(payload: AdminUpdateUserInput!): UserResponse
}

type Mutation {
  createCircle(payload: CreateCircleInput!): CreateCircleResponse
}

type Mutation {
  createEpoch(payload: CreateEpochInput!): EpochResponse
}

type Mutation {
  createNominee(payload: CreateNomineeInput!): CreateNomineeResponse
}

type Mutation {
  createUser(payload: CreateUserInput!): UserResponse
}

type Mutation {
  deleteEpoch(payload: DeleteEpochInput!): DeleteEpochResponse
}

type Mutation {
  deleteUser(payload: DeleteUserInput!): ConfirmationResponse
}

type Mutation {
  logoutUser: LogoutResponse
}

type Mutation {
  updateAllocations(payload: Allocations!): AllocationsResponse
}

type Mutation {
  updateCircle(payload: UpdateCircleInput!): UpdateCircleOutput
}

type Mutation {
  updateEpoch(payload: UpdateEpochInput!): EpochResponse
}

type Mutation {
  updateTeammates(payload: UpdateTeammatesInput!): UpdateTeammatesResponse
}

type Mutation {
  updateUser(payload: UpdateUserInput!): UserResponse
}

type Mutation {
  uploadCircleLogo(payload: UploadCircleImageInput!): UpdateCircleResponse
}

type Mutation {
  uploadProfileAvatar(payload: UploadImageInput!): UpdateProfileResponse
}

type Mutation {
  uploadProfileBackground(payload: UploadImageInput!): UpdateProfileResponse
}

type Mutation {
  vouch(payload: VouchInput!): VouchOutput
}

input CreateCircleInput {
  user_name: String!
  circle_name: String!
  protocol_name: String
  protocol_id: Int
  contact: String
}

input CreateUserInput {
  circle_id: Int!
  address: String!
  name: String!
  fixed_non_receiver: Boolean
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
}

input UploadImageInput {
  image_data_base64: String!
}

input UploadCircleImageInput {
  circle_id: Int!
  image_data_base64: String!
}

input AdminUpdateUserInput {
  circle_id: Int!
  address: String!
  new_address: String
  name: String
  non_giver: Boolean
  starting_tokens: Int
  fixed_non_receiver: Boolean
  non_receiver: Boolean
  role: Int
}

input DeleteEpochInput {
  id: Int!
  circle_id: Int!
}

input CreateNomineeInput {
  name: String!
  circle_id: Int!
  address: String!
  description: String!
}

input UpdateUserInput {
  circle_id: Int!
  name: String
  non_receiver: Boolean
  epoch_first_visit: Boolean
  bio: String
}

input VouchInput {
  nominee_id: Int!
}

input CreateEpochInput {
  circle_id: Int!
  start_date: timestamptz!
  days: Int!
  repeat: Int!
  grant: Float
}

input UpdateTeammatesInput {
  teammates: [Int]!
  circle_id: Int!
}

input DeleteUserInput {
  circle_id: Int!
  address: String!
}

input UpdateCircleInput {
  circle_id: Int!
  name: String
  token_name: String
  team_sel_text: String
  alloc_text: String
  vouching: Boolean
  min_vouches: Int
  nomination_days_limit: Int
  vouching_text: String
  team_selection: Boolean
  default_opt_in: Boolean
  discord_webhook: String
  only_giver_vouch: Boolean
  auto_opt_out: Boolean
  update_webhook: Boolean
}

input UpdateEpochInput {
  id: Int!
  circle_id: Int!
  start_date: timestamptz!
  days: Int!
  repeat: Int!
  grant: Float
}

input Allocation {
  recipient_id: Int!
  tokens: Int!
  note: String!
}

input Allocations {
  allocations: [Allocation!]
  circle_id: Int!
}

type CreateCircleResponse {
  id: Int!
}

type UpdateProfileResponse {
  id: Int!
}

type UpdateCircleResponse {
  id: Int!
}

type LogoutResponse {
  id: Int
}

type UserResponse {
  id: ID!
}

type DeleteEpochResponse {
  success: Boolean!
}

type CreateNomineeResponse {
  id: Int
}

type VouchOutput {
  id: Int!
}

type EpochResponse {
  id: ID!
}

type UpdateTeammatesResponse {
  user_id: ID!
}

type ConfirmationResponse {
  success: Boolean!
}

type UpdateCircleOutput {
  id: Int!
}

type AllocationsResponse {
  user_id: Int!
}
