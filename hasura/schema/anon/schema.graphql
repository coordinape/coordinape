schema {
  query: query_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type Cast {
  address: String!
  avatar_url: String!
  created_at: String!
  embeds: [CastEmbed!]!
  fid: bigint!
  fname: String!
  hash: String!
  id: bigint!
  like_count: Int!
  mentioned_addresses: [CastMention!]!
  recast_count: Int!
  replies_count: Int!
  text: String!
  text_with_mentions: String!
}

type CastEmbed {
  type: String!
  url: String!
}

type CastMention {
  address: String!
  fname: String!
}

input GetCastsInput {
  cast_ids: [bigint!]
  fid: bigint
}

type GetCastsOutput {
  casts: [Cast!]!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
Table containing activity on our platform
"""
type activities {
  action: String!
  actor_profile_id: bigint

  """
  An object relationship
  """
  actor_profile_public: profiles_public

  """
  An object relationship
  """
  big_question: big_questions
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz!

  """
  An object relationship
  """
  enriched_cast: enriched_casts
  epoch_id: bigint

  """
  An array relationship
  """
  gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!
  id: bigint!
  organization_id: bigint
  private_stream: Boolean!
  reaction_count: Int!

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!
  reply_count: Int!
  target_profile_id: bigint

  """
  An object relationship
  """
  target_profile_public: profiles_public
  updated_at: timestamptz!
  user_id: bigint
}

"""
aggregated selection of "activities"
"""
type activities_aggregate {
  aggregate: activities_aggregate_fields
  nodes: [activities!]!
}

input activities_aggregate_bool_exp {
  bool_and: activities_aggregate_bool_exp_bool_and
  bool_or: activities_aggregate_bool_exp_bool_or
  count: activities_aggregate_bool_exp_count
}

input activities_aggregate_bool_exp_bool_and {
  arguments: activities_select_column_activities_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: activities_bool_exp
  predicate: Boolean_comparison_exp!
}

input activities_aggregate_bool_exp_bool_or {
  arguments: activities_select_column_activities_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: activities_bool_exp
  predicate: Boolean_comparison_exp!
}

input activities_aggregate_bool_exp_count {
  arguments: [activities_select_column!]
  distinct: Boolean
  filter: activities_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "activities"
"""
type activities_aggregate_fields {
  avg: activities_avg_fields
  count(columns: [activities_select_column!], distinct: Boolean): Int!
  max: activities_max_fields
  min: activities_min_fields
  stddev: activities_stddev_fields
  stddev_pop: activities_stddev_pop_fields
  stddev_samp: activities_stddev_samp_fields
  sum: activities_sum_fields
  var_pop: activities_var_pop_fields
  var_samp: activities_var_samp_fields
  variance: activities_variance_fields
}

"""
order by aggregate values of table "activities"
"""
input activities_aggregate_order_by {
  avg: activities_avg_order_by
  count: order_by
  max: activities_max_order_by
  min: activities_min_order_by
  stddev: activities_stddev_order_by
  stddev_pop: activities_stddev_pop_order_by
  stddev_samp: activities_stddev_samp_order_by
  sum: activities_sum_order_by
  var_pop: activities_var_pop_order_by
  var_samp: activities_var_samp_order_by
  variance: activities_variance_order_by
}

"""
aggregate avg on columns
"""
type activities_avg_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "activities"
"""
input activities_avg_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "activities". All fields are combined with a logical 'AND'.
"""
input activities_bool_exp {
  _and: [activities_bool_exp!]
  _not: activities_bool_exp
  _or: [activities_bool_exp!]
  action: String_comparison_exp
  actor_profile_id: bigint_comparison_exp
  actor_profile_public: profiles_public_bool_exp
  big_question: big_questions_bool_exp
  big_question_id: bigint_comparison_exp
  cast_id: bigint_comparison_exp
  circle_id: bigint_comparison_exp
  contribution_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  enriched_cast: enriched_casts_bool_exp
  epoch_id: bigint_comparison_exp
  gives: colinks_gives_bool_exp
  gives_aggregate: colinks_gives_aggregate_bool_exp
  id: bigint_comparison_exp
  organization_id: bigint_comparison_exp
  private_stream: Boolean_comparison_exp
  reaction_count: Int_comparison_exp
  reactions: reactions_bool_exp
  replies: replies_bool_exp
  reply_count: Int_comparison_exp
  target_profile_id: bigint_comparison_exp
  target_profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
  user_id: bigint_comparison_exp
}

"""
aggregate max on columns
"""
type activities_max_fields {
  action: String
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
order by max() on columns of table "activities"
"""
input activities_max_order_by {
  action: order_by
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type activities_min_fields {
  action: String
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
order by min() on columns of table "activities"
"""
input activities_min_order_by {
  action: order_by
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "activities".
"""
input activities_order_by {
  action: order_by
  actor_profile_id: order_by
  actor_profile_public: profiles_public_order_by
  big_question: big_questions_order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  created_at: order_by
  enriched_cast: enriched_casts_order_by
  epoch_id: order_by
  gives_aggregate: colinks_gives_aggregate_order_by
  id: order_by
  organization_id: order_by
  private_stream: order_by
  reaction_count: order_by
  reactions_aggregate: reactions_aggregate_order_by
  replies_aggregate: replies_aggregate_order_by
  reply_count: order_by
  target_profile_id: order_by
  target_profile_public: profiles_public_order_by
  updated_at: order_by
  user_id: order_by
}

"""
select columns of table "activities"
"""
enum activities_select_column {
  """
  column name
  """
  action

  """
  column name
  """
  actor_profile_id

  """
  column name
  """
  big_question_id

  """
  column name
  """
  cast_id

  """
  column name
  """
  circle_id

  """
  column name
  """
  contribution_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  organization_id

  """
  column name
  """
  private_stream

  """
  column name
  """
  reaction_count

  """
  column name
  """
  reply_count

  """
  column name
  """
  target_profile_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
select "activities_aggregate_bool_exp_bool_and_arguments_columns" columns of table "activities"
"""
enum activities_select_column_activities_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  private_stream
}

"""
select "activities_aggregate_bool_exp_bool_or_arguments_columns" columns of table "activities"
"""
enum activities_select_column_activities_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  private_stream
}

"""
aggregate stddev on columns
"""
type activities_stddev_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "activities"
"""
input activities_stddev_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type activities_stddev_pop_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "activities"
"""
input activities_stddev_pop_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type activities_stddev_samp_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "activities"
"""
input activities_stddev_samp_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "activities"
"""
input activities_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: activities_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input activities_stream_cursor_value_input {
  action: String
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  private_stream: Boolean
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
aggregate sum on columns
"""
type activities_sum_fields {
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "activities"
"""
input activities_sum_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
aggregate var_pop on columns
"""
type activities_var_pop_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "activities"
"""
input activities_var_pop_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type activities_var_samp_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "activities"
"""
input activities_var_samp_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type activities_variance_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "activities"
"""
input activities_variance_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  user_id: order_by
}

"""
columns and relationships of "big_questions"
"""
type big_questions {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!
  cover_image_url: String!
  created_at: timestamp!
  css_background_position: String
  description: String
  expire_at: timestamp
  id: bigint!
  prompt: String!
  publish_at: timestamp
  updated_at: timestamp!
}

"""
Boolean expression to filter rows from the table "big_questions". All fields are combined with a logical 'AND'.
"""
input big_questions_bool_exp {
  _and: [big_questions_bool_exp!]
  _not: big_questions_bool_exp
  _or: [big_questions_bool_exp!]
  activities: activities_bool_exp
  activities_aggregate: activities_aggregate_bool_exp
  cover_image_url: String_comparison_exp
  created_at: timestamp_comparison_exp
  css_background_position: String_comparison_exp
  description: String_comparison_exp
  expire_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  prompt: String_comparison_exp
  publish_at: timestamp_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
Ordering options when selecting data from "big_questions".
"""
input big_questions_order_by {
  activities_aggregate: activities_aggregate_order_by
  cover_image_url: order_by
  created_at: order_by
  css_background_position: order_by
  description: order_by
  expire_at: order_by
  id: order_by
  prompt: order_by
  publish_at: order_by
  updated_at: order_by
}

"""
select columns of table "big_questions"
"""
enum big_questions_select_column {
  """
  column name
  """
  cover_image_url

  """
  column name
  """
  created_at

  """
  column name
  """
  css_background_position

  """
  column name
  """
  description

  """
  column name
  """
  expire_at

  """
  column name
  """
  id

  """
  column name
  """
  prompt

  """
  column name
  """
  publish_at

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "big_questions"
"""
input big_questions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: big_questions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input big_questions_stream_cursor_value_input {
  cover_image_url: String
  created_at: timestamp
  css_background_position: String
  description: String
  expire_at: timestamp
  id: bigint
  prompt: String
  publish_at: timestamp
  updated_at: timestamp
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_array_comparison_exp {
  """
  is the array contained in the given array value
  """
  _contained_in: [bigint!]

  """
  does the array contain the given value
  """
  _contains: [bigint!]
  _eq: [bigint!]
  _gt: [bigint!]
  _gte: [bigint!]
  _in: [[bigint!]!]
  _is_null: Boolean
  _lt: [bigint!]
  _lte: [bigint!]
  _neq: [bigint!]
  _nin: [[bigint!]!]
}

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """
  does the column NOT match the given pattern
  """
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """
  does the column match the given SQL regular expression
  """
  _similar: citext
}

"""
columns and relationships of "colinks_give_count"
"""
type colinks_give_count {
  gives: bigint
  gives_last_24_hours: bigint
  gives_last_30_days: bigint
  gives_last_7_days: bigint
  skill: citext
}

"""
Boolean expression to filter rows from the table "colinks_give_count". All fields are combined with a logical 'AND'.
"""
input colinks_give_count_bool_exp {
  _and: [colinks_give_count_bool_exp!]
  _not: colinks_give_count_bool_exp
  _or: [colinks_give_count_bool_exp!]
  gives: bigint_comparison_exp
  gives_last_24_hours: bigint_comparison_exp
  gives_last_30_days: bigint_comparison_exp
  gives_last_7_days: bigint_comparison_exp
  skill: citext_comparison_exp
}

"""
Ordering options when selecting data from "colinks_give_count".
"""
input colinks_give_count_order_by {
  gives: order_by
  gives_last_24_hours: order_by
  gives_last_30_days: order_by
  gives_last_7_days: order_by
  skill: order_by
}

"""
select columns of table "colinks_give_count"
"""
enum colinks_give_count_select_column {
  """
  column name
  """
  gives

  """
  column name
  """
  gives_last_24_hours

  """
  column name
  """
  gives_last_30_days

  """
  column name
  """
  gives_last_7_days

  """
  column name
  """
  skill
}

"""
Streaming cursor of the table "colinks_give_count"
"""
input colinks_give_count_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: colinks_give_count_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input colinks_give_count_stream_cursor_value_input {
  gives: bigint
  gives_last_24_hours: bigint
  gives_last_30_days: bigint
  gives_last_7_days: bigint
  skill: citext
}

"""
columns and relationships of "colinks_gives"
"""
type colinks_gives {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz!

  """
  An object relationship
  """
  give_skill: skills

  """
  An object relationship
  """
  giver_profile_public: profiles_public
  id: Int!
  profile_id: bigint!
  skill: citext
  target_profile_id: bigint!

  """
  An object relationship
  """
  target_profile_public: profiles_public
  updated_at: timestamptz!
}

"""
aggregated selection of "colinks_gives"
"""
type colinks_gives_aggregate {
  aggregate: colinks_gives_aggregate_fields
  nodes: [colinks_gives!]!
}

input colinks_gives_aggregate_bool_exp {
  count: colinks_gives_aggregate_bool_exp_count
}

input colinks_gives_aggregate_bool_exp_count {
  arguments: [colinks_gives_select_column!]
  distinct: Boolean
  filter: colinks_gives_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "colinks_gives"
"""
type colinks_gives_aggregate_fields {
  avg: colinks_gives_avg_fields
  count(columns: [colinks_gives_select_column!], distinct: Boolean): Int!
  max: colinks_gives_max_fields
  min: colinks_gives_min_fields
  stddev: colinks_gives_stddev_fields
  stddev_pop: colinks_gives_stddev_pop_fields
  stddev_samp: colinks_gives_stddev_samp_fields
  sum: colinks_gives_sum_fields
  var_pop: colinks_gives_var_pop_fields
  var_samp: colinks_gives_var_samp_fields
  variance: colinks_gives_variance_fields
}

"""
order by aggregate values of table "colinks_gives"
"""
input colinks_gives_aggregate_order_by {
  avg: colinks_gives_avg_order_by
  count: order_by
  max: colinks_gives_max_order_by
  min: colinks_gives_min_order_by
  stddev: colinks_gives_stddev_order_by
  stddev_pop: colinks_gives_stddev_pop_order_by
  stddev_samp: colinks_gives_stddev_samp_order_by
  sum: colinks_gives_sum_order_by
  var_pop: colinks_gives_var_pop_order_by
  var_samp: colinks_gives_var_samp_order_by
  variance: colinks_gives_variance_order_by
}

"""
aggregate avg on columns
"""
type colinks_gives_avg_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by avg() on columns of table "colinks_gives"
"""
input colinks_gives_avg_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
Boolean expression to filter rows from the table "colinks_gives". All fields are combined with a logical 'AND'.
"""
input colinks_gives_bool_exp {
  _and: [colinks_gives_bool_exp!]
  _not: colinks_gives_bool_exp
  _or: [colinks_gives_bool_exp!]
  activity_id: bigint_comparison_exp
  attestation_uid: String_comparison_exp
  cast_hash: String_comparison_exp
  created_at: timestamptz_comparison_exp
  give_skill: skills_bool_exp
  giver_profile_public: profiles_public_bool_exp
  id: Int_comparison_exp
  profile_id: bigint_comparison_exp
  skill: citext_comparison_exp
  target_profile_id: bigint_comparison_exp
  target_profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type colinks_gives_max_fields {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "colinks_gives"
"""
input colinks_gives_max_order_by {
  activity_id: order_by
  attestation_uid: order_by
  cast_hash: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type colinks_gives_min_fields {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "colinks_gives"
"""
input colinks_gives_min_order_by {
  activity_id: order_by
  attestation_uid: order_by
  cast_hash: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "colinks_gives".
"""
input colinks_gives_order_by {
  activity_id: order_by
  attestation_uid: order_by
  cast_hash: order_by
  created_at: order_by
  give_skill: skills_order_by
  giver_profile_public: profiles_public_order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  target_profile_public: profiles_public_order_by
  updated_at: order_by
}

"""
select columns of table "colinks_gives"
"""
enum colinks_gives_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  attestation_uid

  """
  column name
  """
  cast_hash

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  skill

  """
  column name
  """
  target_profile_id

  """
  column name
  """
  updated_at
}

"""
columns and relationships of "colinks_gives_skill_count"
"""
type colinks_gives_skill_count {
  gives: bigint
  gives_last_24_hours: bigint
  gives_last_30_days: bigint
  gives_last_7_days: bigint
  skill: citext

  """
  An object relationship
  """
  skill_info: skills
  target_profile_id: bigint

  """
  An object relationship
  """
  target_profile_public: profiles_public
}

"""
Boolean expression to filter rows from the table "colinks_gives_skill_count". All fields are combined with a logical 'AND'.
"""
input colinks_gives_skill_count_bool_exp {
  _and: [colinks_gives_skill_count_bool_exp!]
  _not: colinks_gives_skill_count_bool_exp
  _or: [colinks_gives_skill_count_bool_exp!]
  gives: bigint_comparison_exp
  gives_last_24_hours: bigint_comparison_exp
  gives_last_30_days: bigint_comparison_exp
  gives_last_7_days: bigint_comparison_exp
  skill: citext_comparison_exp
  skill_info: skills_bool_exp
  target_profile_id: bigint_comparison_exp
  target_profile_public: profiles_public_bool_exp
}

"""
Ordering options when selecting data from "colinks_gives_skill_count".
"""
input colinks_gives_skill_count_order_by {
  gives: order_by
  gives_last_24_hours: order_by
  gives_last_30_days: order_by
  gives_last_7_days: order_by
  skill: order_by
  skill_info: skills_order_by
  target_profile_id: order_by
  target_profile_public: profiles_public_order_by
}

"""
select columns of table "colinks_gives_skill_count"
"""
enum colinks_gives_skill_count_select_column {
  """
  column name
  """
  gives

  """
  column name
  """
  gives_last_24_hours

  """
  column name
  """
  gives_last_30_days

  """
  column name
  """
  gives_last_7_days

  """
  column name
  """
  skill

  """
  column name
  """
  target_profile_id
}

"""
Streaming cursor of the table "colinks_gives_skill_count"
"""
input colinks_gives_skill_count_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: colinks_gives_skill_count_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input colinks_gives_skill_count_stream_cursor_value_input {
  gives: bigint
  gives_last_24_hours: bigint
  gives_last_30_days: bigint
  gives_last_7_days: bigint
  skill: citext
  target_profile_id: bigint
}

"""
aggregate stddev on columns
"""
type colinks_gives_stddev_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by stddev() on columns of table "colinks_gives"
"""
input colinks_gives_stddev_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type colinks_gives_stddev_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by stddev_pop() on columns of table "colinks_gives"
"""
input colinks_gives_stddev_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type colinks_gives_stddev_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by stddev_samp() on columns of table "colinks_gives"
"""
input colinks_gives_stddev_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
Streaming cursor of the table "colinks_gives"
"""
input colinks_gives_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: colinks_gives_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input colinks_gives_stream_cursor_value_input {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type colinks_gives_sum_fields {
  activity_id: bigint
  id: Int
  profile_id: bigint
  target_profile_id: bigint
}

"""
order by sum() on columns of table "colinks_gives"
"""
input colinks_gives_sum_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate var_pop on columns
"""
type colinks_gives_var_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by var_pop() on columns of table "colinks_gives"
"""
input colinks_gives_var_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type colinks_gives_var_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by var_samp() on columns of table "colinks_gives"
"""
input colinks_gives_var_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate variance on columns
"""
type colinks_gives_variance_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by variance() on columns of table "colinks_gives"
"""
input colinks_gives_variance_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
local db copy of last synced on-chain cosoul data
"""
type cosouls {
  address: citext!
  checked_at: timestamptz
  created_at: timestamptz!
  created_tx_hash: String!

  """
  An array relationship
  """
  held_links(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  held_links_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  id: Int!

  """
  An array relationship
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  pgive: Int

  """
  An array relationship
  """
  poaps(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  An aggregate relationship
  """
  poaps_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  An object relationship
  """
  profile_public: profiles_public
  synced_at: timestamptz
  token_id: Int!
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "cosouls". All fields are combined with a logical 'AND'.
"""
input cosouls_bool_exp {
  _and: [cosouls_bool_exp!]
  _not: cosouls_bool_exp
  _or: [cosouls_bool_exp!]
  address: citext_comparison_exp
  checked_at: timestamptz_comparison_exp
  created_at: timestamptz_comparison_exp
  created_tx_hash: String_comparison_exp
  held_links: link_holders_bool_exp
  held_links_aggregate: link_holders_aggregate_bool_exp
  id: Int_comparison_exp
  link_holders: link_holders_bool_exp
  link_holders_aggregate: link_holders_aggregate_bool_exp
  pgive: Int_comparison_exp
  poaps: poap_holders_bool_exp
  poaps_aggregate: poap_holders_aggregate_bool_exp
  profile_public: profiles_public_bool_exp
  synced_at: timestamptz_comparison_exp
  token_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "cosouls".
"""
input cosouls_order_by {
  address: order_by
  checked_at: order_by
  created_at: order_by
  created_tx_hash: order_by
  held_links_aggregate: link_holders_aggregate_order_by
  id: order_by
  link_holders_aggregate: link_holders_aggregate_order_by
  pgive: order_by
  poaps_aggregate: poap_holders_aggregate_order_by
  profile_public: profiles_public_order_by
  synced_at: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "cosouls"
"""
enum cosouls_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  checked_at

  """
  column name
  """
  created_at

  """
  column name
  """
  created_tx_hash

  """
  column name
  """
  id

  """
  column name
  """
  pgive

  """
  column name
  """
  synced_at

  """
  column name
  """
  token_id

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "cosouls"
"""
input cosouls_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: cosouls_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input cosouls_stream_cursor_value_input {
  address: citext
  checked_at: timestamptz
  created_at: timestamptz
  created_tx_hash: String
  id: Int
  pgive: Int
  synced_at: timestamptz
  token_id: Int
  updated_at: timestamptz
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
farcaster casts that we actually care about, with some materialized fields
"""
type enriched_casts {
  created_at: timestamp!
  deleted_at: timestamp
  embeds(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  fid: bigint!
  hash: bytea!
  id: bigint!
  mentions: [bigint!]!
  mentions_positions: [smallint!]!
  parent_fid: bigint
  parent_hash: bytea
  parent_url: String
  profile_id: bigint

  """
  An object relationship
  """
  profile_public: profiles_public
  root_parent_hash: bytea
  root_parent_url: String
  text: String!
  timestamp: timestamp!
  updated_at: timestamp!
}

"""
Boolean expression to filter rows from the table "enriched_casts". All fields are combined with a logical 'AND'.
"""
input enriched_casts_bool_exp {
  _and: [enriched_casts_bool_exp!]
  _not: enriched_casts_bool_exp
  _or: [enriched_casts_bool_exp!]
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  embeds: jsonb_comparison_exp
  fid: bigint_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  mentions: bigint_array_comparison_exp
  mentions_positions: smallint_array_comparison_exp
  parent_fid: bigint_comparison_exp
  parent_hash: bytea_comparison_exp
  parent_url: String_comparison_exp
  profile_id: bigint_comparison_exp
  profile_public: profiles_public_bool_exp
  root_parent_hash: bytea_comparison_exp
  root_parent_url: String_comparison_exp
  text: String_comparison_exp
  timestamp: timestamp_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
Ordering options when selecting data from "enriched_casts".
"""
input enriched_casts_order_by {
  created_at: order_by
  deleted_at: order_by
  embeds: order_by
  fid: order_by
  hash: order_by
  id: order_by
  mentions: order_by
  mentions_positions: order_by
  parent_fid: order_by
  parent_hash: order_by
  parent_url: order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  root_parent_hash: order_by
  root_parent_url: order_by
  text: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
select columns of table "enriched_casts"
"""
enum enriched_casts_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  embeds

  """
  column name
  """
  fid

  """
  column name
  """
  hash

  """
  column name
  """
  id

  """
  column name
  """
  mentions

  """
  column name
  """
  mentions_positions

  """
  column name
  """
  parent_fid

  """
  column name
  """
  parent_hash

  """
  column name
  """
  parent_url

  """
  column name
  """
  profile_id

  """
  column name
  """
  root_parent_hash

  """
  column name
  """
  root_parent_url

  """
  column name
  """
  text

  """
  column name
  """
  timestamp

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "enriched_casts"
"""
input enriched_casts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: enriched_casts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input enriched_casts_stream_cursor_value_input {
  created_at: timestamp
  deleted_at: timestamp
  embeds: jsonb
  fid: bigint
  hash: bytea
  id: bigint
  mentions: [bigint!]
  mentions_positions: [smallint!]
  parent_fid: bigint
  parent_hash: bytea
  parent_url: String
  profile_id: bigint
  root_parent_hash: bytea
  root_parent_url: String
  text: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
columns and relationships of "farcaster_accounts"
"""
type farcaster_accounts {
  bio_text: String
  created_at: timestamptz!
  custody_address: String!
  fid: bigint!
  followers_count: Int!
  following_count: Int!
  name: String!
  pfp_url: String
  profile_id: bigint!
  updated_at: timestamptz!
  username: String!
}

"""
Boolean expression to filter rows from the table "farcaster_accounts". All fields are combined with a logical 'AND'.
"""
input farcaster_accounts_bool_exp {
  _and: [farcaster_accounts_bool_exp!]
  _not: farcaster_accounts_bool_exp
  _or: [farcaster_accounts_bool_exp!]
  bio_text: String_comparison_exp
  created_at: timestamptz_comparison_exp
  custody_address: String_comparison_exp
  fid: bigint_comparison_exp
  followers_count: Int_comparison_exp
  following_count: Int_comparison_exp
  name: String_comparison_exp
  pfp_url: String_comparison_exp
  profile_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
  username: String_comparison_exp
}

"""
Ordering options when selecting data from "farcaster_accounts".
"""
input farcaster_accounts_order_by {
  bio_text: order_by
  created_at: order_by
  custody_address: order_by
  fid: order_by
  followers_count: order_by
  following_count: order_by
  name: order_by
  pfp_url: order_by
  profile_id: order_by
  updated_at: order_by
  username: order_by
}

"""
select columns of table "farcaster_accounts"
"""
enum farcaster_accounts_select_column {
  """
  column name
  """
  bio_text

  """
  column name
  """
  created_at

  """
  column name
  """
  custody_address

  """
  column name
  """
  fid

  """
  column name
  """
  followers_count

  """
  column name
  """
  following_count

  """
  column name
  """
  name

  """
  column name
  """
  pfp_url

  """
  column name
  """
  profile_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  username
}

"""
Streaming cursor of the table "farcaster_accounts"
"""
input farcaster_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: farcaster_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input farcaster_accounts_stream_cursor_value_input {
  bio_text: String
  created_at: timestamptz
  custody_address: String
  fid: bigint
  followers_count: Int
  following_count: Int
  name: String
  pfp_url: String
  profile_id: bigint
  updated_at: timestamptz
  username: String
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "github_accounts"
"""
type github_accounts {
  profile_id: bigint!
  username: String!
}

"""
Boolean expression to filter rows from the table "github_accounts". All fields are combined with a logical 'AND'.
"""
input github_accounts_bool_exp {
  _and: [github_accounts_bool_exp!]
  _not: github_accounts_bool_exp
  _or: [github_accounts_bool_exp!]
  profile_id: bigint_comparison_exp
  username: String_comparison_exp
}

"""
Ordering options when selecting data from "github_accounts".
"""
input github_accounts_order_by {
  profile_id: order_by
  username: order_by
}

"""
select columns of table "github_accounts"
"""
enum github_accounts_select_column {
  """
  column name
  """
  profile_id

  """
  column name
  """
  username
}

"""
Streaming cursor of the table "github_accounts"
"""
input github_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: github_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input github_accounts_stream_cursor_value_input {
  profile_id: bigint
  username: String
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """
  is the column contained in the given json value
  """
  _contained_in: jsonb

  """
  does the column contain the given json value at the top level
  """
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """
  does the string exist as a top-level key in the column
  """
  _has_key: String

  """
  do all of these strings exist as top-level keys in the column
  """
  _has_keys_all: [String!]

  """
  do any of these strings exist as top-level keys in the column
  """
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
tracks the amount of keys an address holds in a given subject. updated with data from the key_tx table
"""
type link_holders {
  amount: Int!
  holder: citext!

  """
  An object relationship
  """
  holder_cosoul: cosouls

  """
  An object relationship
  """
  holder_profile_public: profiles_public
  target: citext!

  """
  An object relationship
  """
  target_cosoul: cosouls

  """
  An object relationship
  """
  target_profile_public: profiles_public
  updated_at: timestamptz!
}

"""
aggregated selection of "link_holders"
"""
type link_holders_aggregate {
  aggregate: link_holders_aggregate_fields
  nodes: [link_holders!]!
}

input link_holders_aggregate_bool_exp {
  count: link_holders_aggregate_bool_exp_count
}

input link_holders_aggregate_bool_exp_count {
  arguments: [link_holders_select_column!]
  distinct: Boolean
  filter: link_holders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "link_holders"
"""
type link_holders_aggregate_fields {
  avg: link_holders_avg_fields
  count(columns: [link_holders_select_column!], distinct: Boolean): Int!
  max: link_holders_max_fields
  min: link_holders_min_fields
  stddev: link_holders_stddev_fields
  stddev_pop: link_holders_stddev_pop_fields
  stddev_samp: link_holders_stddev_samp_fields
  sum: link_holders_sum_fields
  var_pop: link_holders_var_pop_fields
  var_samp: link_holders_var_samp_fields
  variance: link_holders_variance_fields
}

"""
order by aggregate values of table "link_holders"
"""
input link_holders_aggregate_order_by {
  avg: link_holders_avg_order_by
  count: order_by
  max: link_holders_max_order_by
  min: link_holders_min_order_by
  stddev: link_holders_stddev_order_by
  stddev_pop: link_holders_stddev_pop_order_by
  stddev_samp: link_holders_stddev_samp_order_by
  sum: link_holders_sum_order_by
  var_pop: link_holders_var_pop_order_by
  var_samp: link_holders_var_samp_order_by
  variance: link_holders_variance_order_by
}

"""
aggregate avg on columns
"""
type link_holders_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "link_holders"
"""
input link_holders_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "link_holders". All fields are combined with a logical 'AND'.
"""
input link_holders_bool_exp {
  _and: [link_holders_bool_exp!]
  _not: link_holders_bool_exp
  _or: [link_holders_bool_exp!]
  amount: Int_comparison_exp
  holder: citext_comparison_exp
  holder_cosoul: cosouls_bool_exp
  holder_profile_public: profiles_public_bool_exp
  target: citext_comparison_exp
  target_cosoul: cosouls_bool_exp
  target_profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type link_holders_max_fields {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
order by max() on columns of table "link_holders"
"""
input link_holders_max_order_by {
  amount: order_by
  holder: order_by
  target: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type link_holders_min_fields {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
order by min() on columns of table "link_holders"
"""
input link_holders_min_order_by {
  amount: order_by
  holder: order_by
  target: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "link_holders".
"""
input link_holders_order_by {
  amount: order_by
  holder: order_by
  holder_cosoul: cosouls_order_by
  holder_profile_public: profiles_public_order_by
  target: order_by
  target_cosoul: cosouls_order_by
  target_profile_public: profiles_public_order_by
  updated_at: order_by
}

"""
select columns of table "link_holders"
"""
enum link_holders_select_column {
  """
  column name
  """
  amount

  """
  column name
  """
  holder

  """
  column name
  """
  target

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type link_holders_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "link_holders"
"""
input link_holders_stddev_order_by {
  amount: order_by
}

"""
aggregate stddev_pop on columns
"""
type link_holders_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "link_holders"
"""
input link_holders_stddev_pop_order_by {
  amount: order_by
}

"""
aggregate stddev_samp on columns
"""
type link_holders_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "link_holders"
"""
input link_holders_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "link_holders"
"""
input link_holders_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: link_holders_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input link_holders_stream_cursor_value_input {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type link_holders_sum_fields {
  amount: Int
}

"""
order by sum() on columns of table "link_holders"
"""
input link_holders_sum_order_by {
  amount: order_by
}

"""
aggregate var_pop on columns
"""
type link_holders_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "link_holders"
"""
input link_holders_var_pop_order_by {
  amount: order_by
}

"""
aggregate var_samp on columns
"""
type link_holders_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "link_holders"
"""
input link_holders_var_samp_order_by {
  amount: order_by
}

"""
aggregate variance on columns
"""
type link_holders_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "link_holders"
"""
input link_holders_variance_order_by {
  amount: order_by
}

"""
columns and relationships of "link_tx"
"""
type link_tx {
  buy: Boolean!
  created_at: timestamptz!
  eth_amount: String!
  holder: citext!

  """
  An object relationship
  """
  holder_profile: profiles_public
  link_amount: String!
  protocol_fee_amount: String!
  supply: numeric!
  target: citext!
  target_fee_amount: String!

  """
  An object relationship
  """
  target_profile: profiles_public
  tx_hash: citext!
}

"""
Boolean expression to filter rows from the table "link_tx". All fields are combined with a logical 'AND'.
"""
input link_tx_bool_exp {
  _and: [link_tx_bool_exp!]
  _not: link_tx_bool_exp
  _or: [link_tx_bool_exp!]
  buy: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  eth_amount: String_comparison_exp
  holder: citext_comparison_exp
  holder_profile: profiles_public_bool_exp
  link_amount: String_comparison_exp
  protocol_fee_amount: String_comparison_exp
  supply: numeric_comparison_exp
  target: citext_comparison_exp
  target_fee_amount: String_comparison_exp
  target_profile: profiles_public_bool_exp
  tx_hash: citext_comparison_exp
}

"""
Ordering options when selecting data from "link_tx".
"""
input link_tx_order_by {
  buy: order_by
  created_at: order_by
  eth_amount: order_by
  holder: order_by
  holder_profile: profiles_public_order_by
  link_amount: order_by
  protocol_fee_amount: order_by
  supply: order_by
  target: order_by
  target_fee_amount: order_by
  target_profile: profiles_public_order_by
  tx_hash: order_by
}

"""
select columns of table "link_tx"
"""
enum link_tx_select_column {
  """
  column name
  """
  buy

  """
  column name
  """
  created_at

  """
  column name
  """
  eth_amount

  """
  column name
  """
  holder

  """
  column name
  """
  link_amount

  """
  column name
  """
  protocol_fee_amount

  """
  column name
  """
  supply

  """
  column name
  """
  target

  """
  column name
  """
  target_fee_amount

  """
  column name
  """
  tx_hash
}

"""
Streaming cursor of the table "link_tx"
"""
input link_tx_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: link_tx_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input link_tx_stream_cursor_value_input {
  buy: Boolean
  created_at: timestamptz
  eth_amount: String
  holder: citext
  link_amount: String
  protocol_fee_amount: String
  supply: numeric
  target: citext
  target_fee_amount: String
  tx_hash: citext
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
Poap event info
"""
type poap_events {
  city: String!
  country: String!
  created_at: timestamptz!
  description: String!
  end_date: date!
  event_url: String!
  expiry_date: date!
  fancy_id: String!
  id: bigint!
  image_url: String!
  name: String!
  poap_id: Int!
  similarity: float8
  start_date: date!
  supply: Int!
  updated_at: timestamptz!
  year: Int!
}

"""
Boolean expression to filter rows from the table "poap_events". All fields are combined with a logical 'AND'.
"""
input poap_events_bool_exp {
  _and: [poap_events_bool_exp!]
  _not: poap_events_bool_exp
  _or: [poap_events_bool_exp!]
  city: String_comparison_exp
  country: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  end_date: date_comparison_exp
  event_url: String_comparison_exp
  expiry_date: date_comparison_exp
  fancy_id: String_comparison_exp
  id: bigint_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
  poap_id: Int_comparison_exp
  similarity: float8_comparison_exp
  start_date: date_comparison_exp
  supply: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  year: Int_comparison_exp
}

"""
Ordering options when selecting data from "poap_events".
"""
input poap_events_order_by {
  city: order_by
  country: order_by
  created_at: order_by
  description: order_by
  end_date: order_by
  event_url: order_by
  expiry_date: order_by
  fancy_id: order_by
  id: order_by
  image_url: order_by
  name: order_by
  poap_id: order_by
  similarity: order_by
  start_date: order_by
  supply: order_by
  updated_at: order_by
  year: order_by
}

"""
select columns of table "poap_events"
"""
enum poap_events_select_column {
  """
  column name
  """
  city

  """
  column name
  """
  country

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  end_date

  """
  column name
  """
  event_url

  """
  column name
  """
  expiry_date

  """
  column name
  """
  fancy_id

  """
  column name
  """
  id

  """
  column name
  """
  image_url

  """
  column name
  """
  name

  """
  column name
  """
  poap_id

  """
  column name
  """
  similarity

  """
  column name
  """
  start_date

  """
  column name
  """
  supply

  """
  column name
  """
  updated_at

  """
  column name
  """
  year
}

"""
Streaming cursor of the table "poap_events"
"""
input poap_events_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: poap_events_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input poap_events_stream_cursor_value_input {
  city: String
  country: String
  created_at: timestamptz
  description: String
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
columns and relationships of "poap_holders"
"""
type poap_holders {
  address: citext!
  chain: String!

  """
  An object relationship
  """
  cosoul: cosouls
  created_at: timestamptz!

  """
  An object relationship
  """
  event: poap_events!
  event_id: bigint!
  id: bigint!
  poap_created: timestamptz!
  token_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "poap_holders"
"""
type poap_holders_aggregate {
  aggregate: poap_holders_aggregate_fields
  nodes: [poap_holders!]!
}

input poap_holders_aggregate_bool_exp {
  count: poap_holders_aggregate_bool_exp_count
}

input poap_holders_aggregate_bool_exp_count {
  arguments: [poap_holders_select_column!]
  distinct: Boolean
  filter: poap_holders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "poap_holders"
"""
type poap_holders_aggregate_fields {
  avg: poap_holders_avg_fields
  count(columns: [poap_holders_select_column!], distinct: Boolean): Int!
  max: poap_holders_max_fields
  min: poap_holders_min_fields
  stddev: poap_holders_stddev_fields
  stddev_pop: poap_holders_stddev_pop_fields
  stddev_samp: poap_holders_stddev_samp_fields
  sum: poap_holders_sum_fields
  var_pop: poap_holders_var_pop_fields
  var_samp: poap_holders_var_samp_fields
  variance: poap_holders_variance_fields
}

"""
order by aggregate values of table "poap_holders"
"""
input poap_holders_aggregate_order_by {
  avg: poap_holders_avg_order_by
  count: order_by
  max: poap_holders_max_order_by
  min: poap_holders_min_order_by
  stddev: poap_holders_stddev_order_by
  stddev_pop: poap_holders_stddev_pop_order_by
  stddev_samp: poap_holders_stddev_samp_order_by
  sum: poap_holders_sum_order_by
  var_pop: poap_holders_var_pop_order_by
  var_samp: poap_holders_var_samp_order_by
  variance: poap_holders_variance_order_by
}

"""
aggregate avg on columns
"""
type poap_holders_avg_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by avg() on columns of table "poap_holders"
"""
input poap_holders_avg_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
Boolean expression to filter rows from the table "poap_holders". All fields are combined with a logical 'AND'.
"""
input poap_holders_bool_exp {
  _and: [poap_holders_bool_exp!]
  _not: poap_holders_bool_exp
  _or: [poap_holders_bool_exp!]
  address: citext_comparison_exp
  chain: String_comparison_exp
  cosoul: cosouls_bool_exp
  created_at: timestamptz_comparison_exp
  event: poap_events_bool_exp
  event_id: bigint_comparison_exp
  id: bigint_comparison_exp
  poap_created: timestamptz_comparison_exp
  token_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type poap_holders_max_fields {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "poap_holders"
"""
input poap_holders_max_order_by {
  address: order_by
  chain: order_by
  created_at: order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type poap_holders_min_fields {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "poap_holders"
"""
input poap_holders_min_order_by {
  address: order_by
  chain: order_by
  created_at: order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "poap_holders".
"""
input poap_holders_order_by {
  address: order_by
  chain: order_by
  cosoul: cosouls_order_by
  created_at: order_by
  event: poap_events_order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "poap_holders"
"""
enum poap_holders_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  chain

  """
  column name
  """
  created_at

  """
  column name
  """
  event_id

  """
  column name
  """
  id

  """
  column name
  """
  poap_created

  """
  column name
  """
  token_id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type poap_holders_stddev_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev() on columns of table "poap_holders"
"""
input poap_holders_stddev_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type poap_holders_stddev_pop_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev_pop() on columns of table "poap_holders"
"""
input poap_holders_stddev_pop_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type poap_holders_stddev_samp_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev_samp() on columns of table "poap_holders"
"""
input poap_holders_stddev_samp_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
Streaming cursor of the table "poap_holders"
"""
input poap_holders_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: poap_holders_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input poap_holders_stream_cursor_value_input {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type poap_holders_sum_fields {
  event_id: bigint
  id: bigint
  token_id: bigint
}

"""
order by sum() on columns of table "poap_holders"
"""
input poap_holders_sum_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate var_pop on columns
"""
type poap_holders_var_pop_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by var_pop() on columns of table "poap_holders"
"""
input poap_holders_var_pop_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate var_samp on columns
"""
type poap_holders_var_samp_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by var_samp() on columns of table "poap_holders"
"""
input poap_holders_var_samp_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate variance on columns
"""
type poap_holders_variance_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by variance() on columns of table "poap_holders"
"""
input poap_holders_variance_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
columns and relationships of "profile_skills"
"""
type profile_skills {
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public

  """
  An object relationship
  """
  skill: skills
  skill_name: citext!
}

"""
order by aggregate values of table "profile_skills"
"""
input profile_skills_aggregate_order_by {
  avg: profile_skills_avg_order_by
  count: order_by
  max: profile_skills_max_order_by
  min: profile_skills_min_order_by
  stddev: profile_skills_stddev_order_by
  stddev_pop: profile_skills_stddev_pop_order_by
  stddev_samp: profile_skills_stddev_samp_order_by
  sum: profile_skills_sum_order_by
  var_pop: profile_skills_var_pop_order_by
  var_samp: profile_skills_var_samp_order_by
  variance: profile_skills_variance_order_by
}

"""
order by avg() on columns of table "profile_skills"
"""
input profile_skills_avg_order_by {
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "profile_skills". All fields are combined with a logical 'AND'.
"""
input profile_skills_bool_exp {
  _and: [profile_skills_bool_exp!]
  _not: profile_skills_bool_exp
  _or: [profile_skills_bool_exp!]
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  skill: skills_bool_exp
  skill_name: citext_comparison_exp
}

"""
order by max() on columns of table "profile_skills"
"""
input profile_skills_max_order_by {
  profile_id: order_by
  skill_name: order_by
}

"""
order by min() on columns of table "profile_skills"
"""
input profile_skills_min_order_by {
  profile_id: order_by
  skill_name: order_by
}

"""
Ordering options when selecting data from "profile_skills".
"""
input profile_skills_order_by {
  profile_id: order_by
  profile_public: profiles_public_order_by
  skill: skills_order_by
  skill_name: order_by
}

"""
select columns of table "profile_skills"
"""
enum profile_skills_select_column {
  """
  column name
  """
  profile_id

  """
  column name
  """
  skill_name
}

"""
order by stddev() on columns of table "profile_skills"
"""
input profile_skills_stddev_order_by {
  profile_id: order_by
}

"""
order by stddev_pop() on columns of table "profile_skills"
"""
input profile_skills_stddev_pop_order_by {
  profile_id: order_by
}

"""
order by stddev_samp() on columns of table "profile_skills"
"""
input profile_skills_stddev_samp_order_by {
  profile_id: order_by
}

"""
Streaming cursor of the table "profile_skills"
"""
input profile_skills_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profile_skills_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profile_skills_stream_cursor_value_input {
  profile_id: Int
  skill_name: citext
}

"""
order by sum() on columns of table "profile_skills"
"""
input profile_skills_sum_order_by {
  profile_id: order_by
}

"""
order by var_pop() on columns of table "profile_skills"
"""
input profile_skills_var_pop_order_by {
  profile_id: order_by
}

"""
order by var_samp() on columns of table "profile_skills"
"""
input profile_skills_var_samp_order_by {
  profile_id: order_by
}

"""
order by variance() on columns of table "profile_skills"
"""
input profile_skills_variance_order_by {
  profile_id: order_by
}

"""
columns and relationships of "profiles_public"
"""
type profiles_public {
  address: String
  avatar: String

  """
  An array relationship
  """
  colinks_given(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_given_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  An array relationship
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  An object relationship
  """
  cosoul: cosouls
  created_at: timestamp
  description: String

  """
  An object relationship
  """
  farcaster_account: farcaster_accounts
  id: bigint
  joined_colinks_at: timestamptz

  """
  An array relationship
  """
  link_holder(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holder_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  An array relationship
  """
  link_target(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_target_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  links: Int
  links_held: Int
  name: citext
  post_count: bigint
  post_count_last_30_days: bigint

  """
  An array relationship
  """
  profile_skills(
    """
    distinct select on columns
    """
    distinct_on: [profile_skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profile_skills_order_by!]

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  An object relationship
  """
  reputation_score: reputation_scores
  website: String
}

"""
Boolean expression to filter rows from the table "profiles_public". All fields are combined with a logical 'AND'.
"""
input profiles_public_bool_exp {
  _and: [profiles_public_bool_exp!]
  _not: profiles_public_bool_exp
  _or: [profiles_public_bool_exp!]
  address: String_comparison_exp
  avatar: String_comparison_exp
  colinks_given: colinks_gives_bool_exp
  colinks_given_aggregate: colinks_gives_aggregate_bool_exp
  colinks_gives: colinks_gives_bool_exp
  colinks_gives_aggregate: colinks_gives_aggregate_bool_exp
  cosoul: cosouls_bool_exp
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  farcaster_account: farcaster_accounts_bool_exp
  id: bigint_comparison_exp
  joined_colinks_at: timestamptz_comparison_exp
  link_holder: link_holders_bool_exp
  link_holder_aggregate: link_holders_aggregate_bool_exp
  link_target: link_holders_bool_exp
  link_target_aggregate: link_holders_aggregate_bool_exp
  links: Int_comparison_exp
  links_held: Int_comparison_exp
  name: citext_comparison_exp
  post_count: bigint_comparison_exp
  post_count_last_30_days: bigint_comparison_exp
  profile_skills: profile_skills_bool_exp
  reputation_score: reputation_scores_bool_exp
  website: String_comparison_exp
}

"""
Ordering options when selecting data from "profiles_public".
"""
input profiles_public_order_by {
  address: order_by
  avatar: order_by
  colinks_given_aggregate: colinks_gives_aggregate_order_by
  colinks_gives_aggregate: colinks_gives_aggregate_order_by
  cosoul: cosouls_order_by
  created_at: order_by
  description: order_by
  farcaster_account: farcaster_accounts_order_by
  id: order_by
  joined_colinks_at: order_by
  link_holder_aggregate: link_holders_aggregate_order_by
  link_target_aggregate: link_holders_aggregate_order_by
  links: order_by
  links_held: order_by
  name: order_by
  post_count: order_by
  post_count_last_30_days: order_by
  profile_skills_aggregate: profile_skills_aggregate_order_by
  reputation_score: reputation_scores_order_by
  website: order_by
}

"""
select columns of table "profiles_public"
"""
enum profiles_public_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  avatar

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  joined_colinks_at

  """
  column name
  """
  links

  """
  column name
  """
  links_held

  """
  column name
  """
  name

  """
  column name
  """
  post_count

  """
  column name
  """
  post_count_last_30_days

  """
  column name
  """
  website
}

"""
Streaming cursor of the table "profiles_public"
"""
input profiles_public_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_public_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_public_stream_cursor_value_input {
  address: String
  avatar: String
  created_at: timestamp
  description: String
  id: bigint
  joined_colinks_at: timestamptz
  links: Int
  links_held: Int
  name: citext
  post_count: bigint
  post_count_last_30_days: bigint
  website: String
}

type query_root {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!

  """
  fetch data from the table: "activities" using primary key columns
  """
  activities_by_pk(id: bigint!): activities

  """
  fetch data from the table: "big_questions"
  """
  big_questions(
    """
    distinct select on columns
    """
    distinct_on: [big_questions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [big_questions_order_by!]

    """
    filter the rows returned
    """
    where: big_questions_bool_exp
  ): [big_questions!]!

  """
  fetch data from the table: "big_questions" using primary key columns
  """
  big_questions_by_pk(id: bigint!): big_questions

  """
  fetch data from the table: "colinks_give_count"
  """
  colinks_give_count(
    """
    distinct select on columns
    """
    distinct_on: [colinks_give_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_give_count_order_by!]

    """
    filter the rows returned
    """
    where: colinks_give_count_bool_exp
  ): [colinks_give_count!]!

  """
  An array relationship
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  fetch data from the table: "colinks_gives" using primary key columns
  """
  colinks_gives_by_pk(id: Int!): colinks_gives

  """
  fetch data from the table: "colinks_gives_skill_count"
  """
  colinks_gives_skill_count(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_skill_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_skill_count_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_skill_count_bool_exp
  ): [colinks_gives_skill_count!]!

  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  fetch data from the table: "enriched_casts"
  """
  enriched_casts(
    """
    distinct select on columns
    """
    distinct_on: [enriched_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [enriched_casts_order_by!]

    """
    filter the rows returned
    """
    where: enriched_casts_bool_exp
  ): [enriched_casts!]!

  """
  fetch data from the table: "enriched_casts" using primary key columns
  """
  enriched_casts_by_pk(id: bigint!): enriched_casts

  """
  fetch data from the table: "farcaster_accounts"
  """
  farcaster_accounts(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_accounts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_accounts_bool_exp
  ): [farcaster_accounts!]!

  """
  fetch data from the table: "farcaster_accounts" using primary key columns
  """
  farcaster_accounts_by_pk(profile_id: bigint!): farcaster_accounts

  """
  getCasts
  """
  getCasts(payload: GetCastsInput!): GetCastsOutput!

  """
  fetch data from the table: "github_accounts"
  """
  github_accounts(
    """
    distinct select on columns
    """
    distinct_on: [github_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [github_accounts_order_by!]

    """
    filter the rows returned
    """
    where: github_accounts_bool_exp
  ): [github_accounts!]!

  """
  fetch data from the table: "github_accounts" using primary key columns
  """
  github_accounts_by_pk(profile_id: bigint!): github_accounts

  """
  An array relationship
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  fetch data from the table: "link_holders" using primary key columns
  """
  link_holders_by_pk(holder: citext!, target: citext!): link_holders

  """
  fetch data from the table: "link_tx"
  """
  link_tx(
    """
    distinct select on columns
    """
    distinct_on: [link_tx_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_tx_order_by!]

    """
    filter the rows returned
    """
    where: link_tx_bool_exp
  ): [link_tx!]!

  """
  fetch data from the table: "link_tx" using primary key columns
  """
  link_tx_by_pk(tx_hash: citext!): link_tx

  """
  fetch data from the table: "poap_events"
  """
  poap_events(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch data from the table: "poap_events" using primary key columns
  """
  poap_events_by_pk(id: bigint!): poap_events

  """
  fetch data from the table: "poap_holders"
  """
  poap_holders(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch aggregated fields from the table: "poap_holders"
  """
  poap_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  fetch data from the table: "poap_holders" using primary key columns
  """
  poap_holders_by_pk(id: bigint!): poap_holders

  """
  An array relationship
  """
  profile_skills(
    """
    distinct select on columns
    """
    distinct_on: [profile_skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profile_skills_order_by!]

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  fetch data from the table: "profile_skills" using primary key columns
  """
  profile_skills_by_pk(profile_id: Int!, skill_name: citext!): profile_skills

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  fetch data from the table: "reactions" using primary key columns
  """
  reactions_by_pk(id: bigint!): reactions

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  fetch data from the table: "replies" using primary key columns
  """
  replies_by_pk(id: bigint!): replies

  """
  fetch data from the table: "replies_reactions"
  """
  replies_reactions(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  fetch data from the table: "replies_reactions" using primary key columns
  """
  replies_reactions_by_pk(id: bigint!): replies_reactions

  """
  fetch data from the table: "reputation_scores"
  """
  reputation_scores(
    """
    distinct select on columns
    """
    distinct_on: [reputation_scores_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reputation_scores_order_by!]

    """
    filter the rows returned
    """
    where: reputation_scores_bool_exp
  ): [reputation_scores!]!

  """
  fetch data from the table: "reputation_scores" using primary key columns
  """
  reputation_scores_by_pk(profile_id: bigint!): reputation_scores

  """
  execute function "search_replies" which returns "replies"
  """
  search_replies(
    """
    input parameters for function "search_replies"
    """
    args: search_replies_args!

    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  fetch data from the table: "skills"
  """
  skills(
    """
    distinct select on columns
    """
    distinct_on: [skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [skills_order_by!]

    """
    filter the rows returned
    """
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch data from the table: "skills" using primary key columns
  """
  skills_by_pk(name: citext!): skills

  """
  fetch data from the table: "twitter_accounts"
  """
  twitter_accounts(
    """
    distinct select on columns
    """
    distinct_on: [twitter_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [twitter_accounts_order_by!]

    """
    filter the rows returned
    """
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch data from the table: "twitter_accounts" using primary key columns
  """
  twitter_accounts_by_pk(profile_id: Int!): twitter_accounts

  """
  execute function "vector_search_poap_events" which returns "poap_events"
  """
  vector_search_poap_events(
    """
    input parameters for function "vector_search_poap_events"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  execute function "vector_search_poap_holders" which returns "poap_holders"
  """
  vector_search_poap_holders(
    """
    input parameters for function "vector_search_poap_holders"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  execute function "vector_search_poap_holders" and query aggregates on result of table type "poap_holders"
  """
  vector_search_poap_holders_aggregate(
    """
    input parameters for function "vector_search_poap_holders_aggregate"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!
}

"""
columns and relationships of "reactions"
"""
type reactions {
  """
  An object relationship
  """
  activity: activities
  activity_id: Int!
  created_at: timestamptz!
  id: bigint!
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public
  reaction: String!
  updated_at: timestamptz!
}

"""
order by aggregate values of table "reactions"
"""
input reactions_aggregate_order_by {
  avg: reactions_avg_order_by
  count: order_by
  max: reactions_max_order_by
  min: reactions_min_order_by
  stddev: reactions_stddev_order_by
  stddev_pop: reactions_stddev_pop_order_by
  stddev_samp: reactions_stddev_samp_order_by
  sum: reactions_sum_order_by
  var_pop: reactions_var_pop_order_by
  var_samp: reactions_var_samp_order_by
  variance: reactions_variance_order_by
}

"""
order by avg() on columns of table "reactions"
"""
input reactions_avg_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "reactions". All fields are combined with a logical 'AND'.
"""
input reactions_bool_exp {
  _and: [reactions_bool_exp!]
  _not: reactions_bool_exp
  _or: [reactions_bool_exp!]
  activity: activities_bool_exp
  activity_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  reaction: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
order by max() on columns of table "reactions"
"""
input reactions_max_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "reactions"
"""
input reactions_min_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "reactions".
"""
input reactions_order_by {
  activity: activities_order_by
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reaction: order_by
  updated_at: order_by
}

"""
select columns of table "reactions"
"""
enum reactions_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reaction

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "reactions"
"""
input reactions_stddev_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by stddev_pop() on columns of table "reactions"
"""
input reactions_stddev_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by stddev_samp() on columns of table "reactions"
"""
input reactions_stddev_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "reactions"
"""
input reactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reactions_stream_cursor_value_input {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  updated_at: timestamptz
}

"""
order by sum() on columns of table "reactions"
"""
input reactions_sum_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by var_pop() on columns of table "reactions"
"""
input reactions_var_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by var_samp() on columns of table "reactions"
"""
input reactions_var_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by variance() on columns of table "reactions"
"""
input reactions_variance_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Replies to activity items
"""
type replies {
  """
  An object relationship
  """
  activity: activities!
  activity_actor_id: Int!
  activity_id: Int!
  created_at: timestamptz!
  deleted_at: timestamptz
  id: bigint!
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!
  reply: String!
  updated_at: timestamptz!
}

"""
order by aggregate values of table "replies"
"""
input replies_aggregate_order_by {
  avg: replies_avg_order_by
  count: order_by
  max: replies_max_order_by
  min: replies_min_order_by
  stddev: replies_stddev_order_by
  stddev_pop: replies_stddev_pop_order_by
  stddev_samp: replies_stddev_samp_order_by
  sum: replies_sum_order_by
  var_pop: replies_var_pop_order_by
  var_samp: replies_var_samp_order_by
  variance: replies_variance_order_by
}

"""
order by avg() on columns of table "replies"
"""
input replies_avg_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "replies". All fields are combined with a logical 'AND'.
"""
input replies_bool_exp {
  _and: [replies_bool_exp!]
  _not: replies_bool_exp
  _or: [replies_bool_exp!]
  activity: activities_bool_exp
  activity_actor_id: Int_comparison_exp
  activity_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  reactions: replies_reactions_bool_exp
  reply: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
order by max() on columns of table "replies"
"""
input replies_max_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  profile_id: order_by
  reply: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "replies"
"""
input replies_min_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  profile_id: order_by
  reply: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "replies".
"""
input replies_order_by {
  activity: activities_order_by
  activity_actor_id: order_by
  activity_id: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reactions_aggregate: replies_reactions_aggregate_order_by
  reply: order_by
  updated_at: order_by
}

"""
columns and relationships of "replies_reactions"
"""
type replies_reactions {
  """
  An object relationship
  """
  activity: activities
  activity_id: Int!
  created_at: timestamptz!
  id: bigint!
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public
  reaction: String!

  """
  An object relationship
  """
  reply: replies
  reply_id: Int!
  updated_at: timestamptz!
}

"""
order by aggregate values of table "replies_reactions"
"""
input replies_reactions_aggregate_order_by {
  avg: replies_reactions_avg_order_by
  count: order_by
  max: replies_reactions_max_order_by
  min: replies_reactions_min_order_by
  stddev: replies_reactions_stddev_order_by
  stddev_pop: replies_reactions_stddev_pop_order_by
  stddev_samp: replies_reactions_stddev_samp_order_by
  sum: replies_reactions_sum_order_by
  var_pop: replies_reactions_var_pop_order_by
  var_samp: replies_reactions_var_samp_order_by
  variance: replies_reactions_variance_order_by
}

"""
order by avg() on columns of table "replies_reactions"
"""
input replies_reactions_avg_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
Boolean expression to filter rows from the table "replies_reactions". All fields are combined with a logical 'AND'.
"""
input replies_reactions_bool_exp {
  _and: [replies_reactions_bool_exp!]
  _not: replies_reactions_bool_exp
  _or: [replies_reactions_bool_exp!]
  activity: activities_bool_exp
  activity_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  reaction: String_comparison_exp
  reply: replies_bool_exp
  reply_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
order by max() on columns of table "replies_reactions"
"""
input replies_reactions_max_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  reply_id: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "replies_reactions"
"""
input replies_reactions_min_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  reply_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "replies_reactions".
"""
input replies_reactions_order_by {
  activity: activities_order_by
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reaction: order_by
  reply: replies_order_by
  reply_id: order_by
  updated_at: order_by
}

"""
select columns of table "replies_reactions"
"""
enum replies_reactions_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reaction

  """
  column name
  """
  reply_id

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "replies_reactions"
"""
input replies_reactions_stddev_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
order by stddev_pop() on columns of table "replies_reactions"
"""
input replies_reactions_stddev_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
order by stddev_samp() on columns of table "replies_reactions"
"""
input replies_reactions_stddev_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
Streaming cursor of the table "replies_reactions"
"""
input replies_reactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: replies_reactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input replies_reactions_stream_cursor_value_input {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  reply_id: Int
  updated_at: timestamptz
}

"""
order by sum() on columns of table "replies_reactions"
"""
input replies_reactions_sum_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
order by var_pop() on columns of table "replies_reactions"
"""
input replies_reactions_var_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
order by var_samp() on columns of table "replies_reactions"
"""
input replies_reactions_var_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
order by variance() on columns of table "replies_reactions"
"""
input replies_reactions_variance_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
select columns of table "replies"
"""
enum replies_select_column {
  """
  column name
  """
  activity_actor_id

  """
  column name
  """
  activity_id

  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reply

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "replies"
"""
input replies_stddev_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by stddev_pop() on columns of table "replies"
"""
input replies_stddev_pop_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by stddev_samp() on columns of table "replies"
"""
input replies_stddev_samp_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "replies"
"""
input replies_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: replies_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input replies_stream_cursor_value_input {
  activity_actor_id: Int
  activity_id: Int
  created_at: timestamptz
  deleted_at: timestamptz
  id: bigint
  profile_id: Int
  reply: String
  updated_at: timestamptz
}

"""
order by sum() on columns of table "replies"
"""
input replies_sum_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by var_pop() on columns of table "replies"
"""
input replies_var_pop_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by var_samp() on columns of table "replies"
"""
input replies_var_samp_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
order by variance() on columns of table "replies"
"""
input replies_variance_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
columns and relationships of "reputation_scores"
"""
type reputation_scores {
  colinks_engagement_score: Int
  created_at: timestamptz
  email_score: Int!
  github_score: Int!
  invite_score: Int!
  linkedin_score: Int!
  links_score: Int!
  pgive_score: Int!
  poap_score: Int!
  profile_id: bigint!
  total_score: Int!
  twitter_score: Int!
  updated_at: timestamptz
}

"""
Boolean expression to filter rows from the table "reputation_scores". All fields are combined with a logical 'AND'.
"""
input reputation_scores_bool_exp {
  _and: [reputation_scores_bool_exp!]
  _not: reputation_scores_bool_exp
  _or: [reputation_scores_bool_exp!]
  colinks_engagement_score: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  email_score: Int_comparison_exp
  github_score: Int_comparison_exp
  invite_score: Int_comparison_exp
  linkedin_score: Int_comparison_exp
  links_score: Int_comparison_exp
  pgive_score: Int_comparison_exp
  poap_score: Int_comparison_exp
  profile_id: bigint_comparison_exp
  total_score: Int_comparison_exp
  twitter_score: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "reputation_scores".
"""
input reputation_scores_order_by {
  colinks_engagement_score: order_by
  created_at: order_by
  email_score: order_by
  github_score: order_by
  invite_score: order_by
  linkedin_score: order_by
  links_score: order_by
  pgive_score: order_by
  poap_score: order_by
  profile_id: order_by
  total_score: order_by
  twitter_score: order_by
  updated_at: order_by
}

"""
select columns of table "reputation_scores"
"""
enum reputation_scores_select_column {
  """
  column name
  """
  colinks_engagement_score

  """
  column name
  """
  created_at

  """
  column name
  """
  email_score

  """
  column name
  """
  github_score

  """
  column name
  """
  invite_score

  """
  column name
  """
  linkedin_score

  """
  column name
  """
  links_score

  """
  column name
  """
  pgive_score

  """
  column name
  """
  poap_score

  """
  column name
  """
  profile_id

  """
  column name
  """
  total_score

  """
  column name
  """
  twitter_score

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "reputation_scores"
"""
input reputation_scores_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reputation_scores_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reputation_scores_stream_cursor_value_input {
  colinks_engagement_score: Int
  created_at: timestamptz
  email_score: Int
  github_score: Int
  invite_score: Int
  linkedin_score: Int
  links_score: Int
  pgive_score: Int
  poap_score: Int
  profile_id: bigint
  total_score: Int
  twitter_score: Int
  updated_at: timestamptz
}

input search_replies_args {
  search: String
}

"""
columns and relationships of "skills"
"""
type skills {
  count: Int!
  created_at: timestamptz!
  hidden: Boolean!
  name: citext!

  """
  An object relationship
  """
  profile_skills: profile_skills
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "skills". All fields are combined with a logical 'AND'.
"""
input skills_bool_exp {
  _and: [skills_bool_exp!]
  _not: skills_bool_exp
  _or: [skills_bool_exp!]
  count: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  hidden: Boolean_comparison_exp
  name: citext_comparison_exp
  profile_skills: profile_skills_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "skills".
"""
input skills_order_by {
  count: order_by
  created_at: order_by
  hidden: order_by
  name: order_by
  profile_skills: profile_skills_order_by
  updated_at: order_by
}

"""
select columns of table "skills"
"""
enum skills_select_column {
  """
  column name
  """
  count

  """
  column name
  """
  created_at

  """
  column name
  """
  hidden

  """
  column name
  """
  name

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "skills"
"""
input skills_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: skills_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input skills_stream_cursor_value_input {
  count: Int
  created_at: timestamptz
  hidden: Boolean
  name: citext
  updated_at: timestamptz
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_array_comparison_exp {
  """
  is the array contained in the given array value
  """
  _contained_in: [smallint!]

  """
  does the array contain the given value
  """
  _contains: [smallint!]
  _eq: [smallint!]
  _gt: [smallint!]
  _gte: [smallint!]
  _in: [[smallint!]!]
  _is_null: Boolean
  _lt: [smallint!]
  _lte: [smallint!]
  _neq: [smallint!]
  _nin: [[smallint!]!]
}

type subscription_root {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!

  """
  fetch data from the table: "activities" using primary key columns
  """
  activities_by_pk(id: bigint!): activities

  """
  fetch data from the table in a streaming manner: "activities"
  """
  activities_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [activities_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  fetch data from the table: "big_questions"
  """
  big_questions(
    """
    distinct select on columns
    """
    distinct_on: [big_questions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [big_questions_order_by!]

    """
    filter the rows returned
    """
    where: big_questions_bool_exp
  ): [big_questions!]!

  """
  fetch data from the table: "big_questions" using primary key columns
  """
  big_questions_by_pk(id: bigint!): big_questions

  """
  fetch data from the table in a streaming manner: "big_questions"
  """
  big_questions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [big_questions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: big_questions_bool_exp
  ): [big_questions!]!

  """
  fetch data from the table: "colinks_give_count"
  """
  colinks_give_count(
    """
    distinct select on columns
    """
    distinct_on: [colinks_give_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_give_count_order_by!]

    """
    filter the rows returned
    """
    where: colinks_give_count_bool_exp
  ): [colinks_give_count!]!

  """
  fetch data from the table in a streaming manner: "colinks_give_count"
  """
  colinks_give_count_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [colinks_give_count_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: colinks_give_count_bool_exp
  ): [colinks_give_count!]!

  """
  An array relationship
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  fetch data from the table: "colinks_gives" using primary key columns
  """
  colinks_gives_by_pk(id: Int!): colinks_gives

  """
  fetch data from the table: "colinks_gives_skill_count"
  """
  colinks_gives_skill_count(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_skill_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_skill_count_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_skill_count_bool_exp
  ): [colinks_gives_skill_count!]!

  """
  fetch data from the table in a streaming manner: "colinks_gives_skill_count"
  """
  colinks_gives_skill_count_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [colinks_gives_skill_count_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: colinks_gives_skill_count_bool_exp
  ): [colinks_gives_skill_count!]!

  """
  fetch data from the table in a streaming manner: "colinks_gives"
  """
  colinks_gives_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [colinks_gives_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  fetch data from the table in a streaming manner: "cosouls"
  """
  cosouls_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [cosouls_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "enriched_casts"
  """
  enriched_casts(
    """
    distinct select on columns
    """
    distinct_on: [enriched_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [enriched_casts_order_by!]

    """
    filter the rows returned
    """
    where: enriched_casts_bool_exp
  ): [enriched_casts!]!

  """
  fetch data from the table: "enriched_casts" using primary key columns
  """
  enriched_casts_by_pk(id: bigint!): enriched_casts

  """
  fetch data from the table in a streaming manner: "enriched_casts"
  """
  enriched_casts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [enriched_casts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: enriched_casts_bool_exp
  ): [enriched_casts!]!

  """
  fetch data from the table: "farcaster_accounts"
  """
  farcaster_accounts(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_accounts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_accounts_bool_exp
  ): [farcaster_accounts!]!

  """
  fetch data from the table: "farcaster_accounts" using primary key columns
  """
  farcaster_accounts_by_pk(profile_id: bigint!): farcaster_accounts

  """
  fetch data from the table in a streaming manner: "farcaster_accounts"
  """
  farcaster_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [farcaster_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: farcaster_accounts_bool_exp
  ): [farcaster_accounts!]!

  """
  fetch data from the table: "github_accounts"
  """
  github_accounts(
    """
    distinct select on columns
    """
    distinct_on: [github_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [github_accounts_order_by!]

    """
    filter the rows returned
    """
    where: github_accounts_bool_exp
  ): [github_accounts!]!

  """
  fetch data from the table: "github_accounts" using primary key columns
  """
  github_accounts_by_pk(profile_id: bigint!): github_accounts

  """
  fetch data from the table in a streaming manner: "github_accounts"
  """
  github_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [github_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: github_accounts_bool_exp
  ): [github_accounts!]!

  """
  An array relationship
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  fetch data from the table: "link_holders" using primary key columns
  """
  link_holders_by_pk(holder: citext!, target: citext!): link_holders

  """
  fetch data from the table in a streaming manner: "link_holders"
  """
  link_holders_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [link_holders_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  fetch data from the table: "link_tx"
  """
  link_tx(
    """
    distinct select on columns
    """
    distinct_on: [link_tx_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_tx_order_by!]

    """
    filter the rows returned
    """
    where: link_tx_bool_exp
  ): [link_tx!]!

  """
  fetch data from the table: "link_tx" using primary key columns
  """
  link_tx_by_pk(tx_hash: citext!): link_tx

  """
  fetch data from the table in a streaming manner: "link_tx"
  """
  link_tx_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [link_tx_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: link_tx_bool_exp
  ): [link_tx!]!

  """
  fetch data from the table: "poap_events"
  """
  poap_events(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch data from the table: "poap_events" using primary key columns
  """
  poap_events_by_pk(id: bigint!): poap_events

  """
  fetch data from the table in a streaming manner: "poap_events"
  """
  poap_events_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [poap_events_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch data from the table: "poap_holders"
  """
  poap_holders(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch aggregated fields from the table: "poap_holders"
  """
  poap_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  fetch data from the table: "poap_holders" using primary key columns
  """
  poap_holders_by_pk(id: bigint!): poap_holders

  """
  fetch data from the table in a streaming manner: "poap_holders"
  """
  poap_holders_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [poap_holders_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  An array relationship
  """
  profile_skills(
    """
    distinct select on columns
    """
    distinct_on: [profile_skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profile_skills_order_by!]

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  fetch data from the table: "profile_skills" using primary key columns
  """
  profile_skills_by_pk(profile_id: Int!, skill_name: citext!): profile_skills

  """
  fetch data from the table in a streaming manner: "profile_skills"
  """
  profile_skills_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profile_skills_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  fetch data from the table in a streaming manner: "profiles_public"
  """
  profiles_public_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_public_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  fetch data from the table: "reactions" using primary key columns
  """
  reactions_by_pk(id: bigint!): reactions

  """
  fetch data from the table in a streaming manner: "reactions"
  """
  reactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  fetch data from the table: "replies" using primary key columns
  """
  replies_by_pk(id: bigint!): replies

  """
  fetch data from the table: "replies_reactions"
  """
  replies_reactions(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  fetch data from the table: "replies_reactions" using primary key columns
  """
  replies_reactions_by_pk(id: bigint!): replies_reactions

  """
  fetch data from the table in a streaming manner: "replies_reactions"
  """
  replies_reactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [replies_reactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  fetch data from the table in a streaming manner: "replies"
  """
  replies_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [replies_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  fetch data from the table: "reputation_scores"
  """
  reputation_scores(
    """
    distinct select on columns
    """
    distinct_on: [reputation_scores_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reputation_scores_order_by!]

    """
    filter the rows returned
    """
    where: reputation_scores_bool_exp
  ): [reputation_scores!]!

  """
  fetch data from the table: "reputation_scores" using primary key columns
  """
  reputation_scores_by_pk(profile_id: bigint!): reputation_scores

  """
  fetch data from the table in a streaming manner: "reputation_scores"
  """
  reputation_scores_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reputation_scores_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reputation_scores_bool_exp
  ): [reputation_scores!]!

  """
  execute function "search_replies" which returns "replies"
  """
  search_replies(
    """
    input parameters for function "search_replies"
    """
    args: search_replies_args!

    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  fetch data from the table: "skills"
  """
  skills(
    """
    distinct select on columns
    """
    distinct_on: [skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [skills_order_by!]

    """
    filter the rows returned
    """
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch data from the table: "skills" using primary key columns
  """
  skills_by_pk(name: citext!): skills

  """
  fetch data from the table in a streaming manner: "skills"
  """
  skills_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [skills_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch data from the table: "twitter_accounts"
  """
  twitter_accounts(
    """
    distinct select on columns
    """
    distinct_on: [twitter_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [twitter_accounts_order_by!]

    """
    filter the rows returned
    """
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch data from the table: "twitter_accounts" using primary key columns
  """
  twitter_accounts_by_pk(profile_id: Int!): twitter_accounts

  """
  fetch data from the table in a streaming manner: "twitter_accounts"
  """
  twitter_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [twitter_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  execute function "vector_search_poap_events" which returns "poap_events"
  """
  vector_search_poap_events(
    """
    input parameters for function "vector_search_poap_events"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  execute function "vector_search_poap_holders" which returns "poap_holders"
  """
  vector_search_poap_holders(
    """
    input parameters for function "vector_search_poap_holders"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  execute function "vector_search_poap_holders" and query aggregates on result of table type "poap_holders"
  """
  vector_search_poap_holders_aggregate(
    """
    input parameters for function "vector_search_poap_holders_aggregate"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
twitter accounts connected to profiles
"""
type twitter_accounts {
  id: String!
  profile_id: Int!
  username: String!
}

"""
Boolean expression to filter rows from the table "twitter_accounts". All fields are combined with a logical 'AND'.
"""
input twitter_accounts_bool_exp {
  _and: [twitter_accounts_bool_exp!]
  _not: twitter_accounts_bool_exp
  _or: [twitter_accounts_bool_exp!]
  id: String_comparison_exp
  profile_id: Int_comparison_exp
  username: String_comparison_exp
}

"""
Ordering options when selecting data from "twitter_accounts".
"""
input twitter_accounts_order_by {
  id: order_by
  profile_id: order_by
  username: order_by
}

"""
select columns of table "twitter_accounts"
"""
enum twitter_accounts_select_column {
  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  username
}

"""
Streaming cursor of the table "twitter_accounts"
"""
input twitter_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: twitter_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input twitter_accounts_stream_cursor_value_input {
  id: String
  profile_id: Int
  username: String
}

scalar vector

input vector_search_poap_events_args {
  limit_count: Int
  match_threshold: float8
  target_vector: vector
}

input vector_search_poap_holders_args {
  limit_count: Int
  match_threshold: float8
  target_vector: vector
}
