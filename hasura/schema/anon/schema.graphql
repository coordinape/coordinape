schema {
  query: query_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """
  does the column NOT match the given pattern
  """
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """
  does the column match the given SQL regular expression
  """
  _similar: citext
}

"""
columns and relationships of "colinks_gives"
"""
type colinks_gives {
  activity_id: bigint
  cast_hash: String
  created_at: timestamptz!
  id: Int!
  profile_id: bigint!
  skill: citext
  target_profile_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "colinks_gives"
"""
type colinks_gives_aggregate {
  aggregate: colinks_gives_aggregate_fields
  nodes: [colinks_gives!]!
}

"""
aggregate fields of "colinks_gives"
"""
type colinks_gives_aggregate_fields {
  avg: colinks_gives_avg_fields
  count(columns: [colinks_gives_select_column!], distinct: Boolean): Int!
  max: colinks_gives_max_fields
  min: colinks_gives_min_fields
  stddev: colinks_gives_stddev_fields
  stddev_pop: colinks_gives_stddev_pop_fields
  stddev_samp: colinks_gives_stddev_samp_fields
  sum: colinks_gives_sum_fields
  var_pop: colinks_gives_var_pop_fields
  var_samp: colinks_gives_var_samp_fields
  variance: colinks_gives_variance_fields
}

"""
aggregate avg on columns
"""
type colinks_gives_avg_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
Boolean expression to filter rows from the table "colinks_gives". All fields are combined with a logical 'AND'.
"""
input colinks_gives_bool_exp {
  _and: [colinks_gives_bool_exp!]
  _not: colinks_gives_bool_exp
  _or: [colinks_gives_bool_exp!]
  activity_id: bigint_comparison_exp
  cast_hash: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  profile_id: bigint_comparison_exp
  skill: citext_comparison_exp
  target_profile_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type colinks_gives_max_fields {
  activity_id: bigint
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type colinks_gives_min_fields {
  activity_id: bigint
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
Ordering options when selecting data from "colinks_gives".
"""
input colinks_gives_order_by {
  activity_id: order_by
  cast_hash: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  updated_at: order_by
}

"""
select columns of table "colinks_gives"
"""
enum colinks_gives_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  cast_hash

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  skill

  """
  column name
  """
  target_profile_id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type colinks_gives_stddev_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
aggregate stddev_pop on columns
"""
type colinks_gives_stddev_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
aggregate stddev_samp on columns
"""
type colinks_gives_stddev_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
Streaming cursor of the table "colinks_gives"
"""
input colinks_gives_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: colinks_gives_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input colinks_gives_stream_cursor_value_input {
  activity_id: bigint
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type colinks_gives_sum_fields {
  activity_id: bigint
  id: Int
  profile_id: bigint
  target_profile_id: bigint
}

"""
aggregate var_pop on columns
"""
type colinks_gives_var_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
aggregate var_samp on columns
"""
type colinks_gives_var_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
aggregate variance on columns
"""
type colinks_gives_variance_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "colinks_gives"
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  fetch aggregated fields from the table: "colinks_gives"
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  fetch data from the table: "colinks_gives" using primary key columns
  """
  colinks_gives_by_pk(id: Int!): colinks_gives
  price_per_share(chain_id: Int!, token_address: String): Float!
}

type subscription_root {
  """
  fetch data from the table: "colinks_gives"
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  fetch aggregated fields from the table: "colinks_gives"
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  fetch data from the table: "colinks_gives" using primary key columns
  """
  colinks_gives_by_pk(id: Int!): colinks_gives

  """
  fetch data from the table in a streaming manner: "colinks_gives"
  """
  colinks_gives_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [colinks_gives_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
