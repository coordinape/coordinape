schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

input AdminUpdateUserInput {
  address: String!
  circle_id: Int!
  fixed_non_receiver: Boolean
  fixed_payment_amount: Float
  name: String
  new_address: String
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
}

input Allocation {
  note: String!
  recipient_id: Int!
  tokens: Int!
}

input AllocationCsvInput {
  circle_id: Int!
  epoch: Int
  epoch_id: Int
  form_gift_amount: Float
  gift_token_symbol: String
  grant: Float
}

type AllocationCsvResponse {
  file: String!
}

input Allocations {
  allocations: [Allocation!]
  circle_id: Int!
  user_id: Int
}

type AllocationsResponse {
  user: users
  user_id: Int!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type ConfirmationResponse {
  success: Boolean!
}

input CoordinapeInput {
  circle_id: Int!
}

input CreateCircleInput {
  circle_name: String!
  contact: String
  image_data_base64: String
  organization_id: Int
  organization_name: String
  user_name: String!
}

type CreateCircleResponse {
  circle: circles
  id: Int!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An aggregate relationship
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!
}

input CreateEpochInput {
  circle_id: Int!
  days: Int!
  grant: Float
  repeat: Int!
  start_date: timestamptz!
}

input CreateNomineeInput {
  address: String!
  circle_id: Int!
  description: String!
  name: String!
}

type CreateNomineeResponse {
  id: Int
  nominee: nominees
}

input CreateUserInput {
  address: String!
  circle_id: Int!
  fixed_non_receiver: Boolean
  fixed_payment_amount: Float
  name: String!
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
}

input CreateUserWithTokenInput {
  name: String!
  token: String!
}

input CreateUsersInput {
  circle_id: Int!
  users: [UserObj]!
}

input CreateVaultInput {
  chain_id: Int!
  deployment_block: Int!
  org_id: Int!
  tx_hash: String!
  vault_address: String!
}

input DeleteCircleInput {
  circle_id: Int!
}

input DeleteContributionInput {
  contribution_id: Int!
}

input DeleteEpochInput {
  circle_id: Int!
  id: Int!
}

type DeleteEpochResponse {
  success: Boolean!
}

input DeleteUserInput {
  address: String!
  circle_id: Int!
}

type EpochResponse {
  epoch: epochs
  id: ID!
}

input GenerateApiKeyInput {
  circle_id: Int!
  create_vouches: Boolean
  name: String!
  read_circle: Boolean
  read_epochs: Boolean
  read_member_profiles: Boolean
  read_nominees: Boolean
  read_pending_token_gifts: Boolean
  update_circle: Boolean
  update_pending_token_gifts: Boolean
}

type GenerateApiKeyResponse {
  api_key: String!
  circleApiKey: circle_api_keys
  hash: String!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input LogVaultTxInput {
  amount: Float
  circle_id: Int
  distribution_id: Int
  org_id: Int
  symbol: String
  tx_hash: String!
  tx_type: String!
  vault_id: Int!
}

type LogVaultTxResponse {
  id: ID!
  vault_tx_return_object: vault_transactions
}

type LogoutResponse {
  id: Int
  profile: profiles
}

input MarkClaimedInput {
  claim_id: Int!
  tx_hash: String!
}

type MarkClaimedOutput {
  ids: [Int!]!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

input UpdateCircleInput {
  alloc_text: String
  auto_opt_out: Boolean
  circle_id: Int!
  default_opt_in: Boolean
  discord_webhook: String
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  only_giver_vouch: Boolean
  team_sel_text: String
  team_selection: Boolean
  token_name: String
  update_webhook: Boolean
  vouching: Boolean
  vouching_text: String
}

type UpdateCircleOutput {
  circle: circles
  id: Int!
}

type UpdateCircleResponse {
  circle: circles
  id: Int!
}

input UpdateContributionInput {
  datetime_created: timestamptz!
  description: String!
  id: Int!
}

type UpdateContributionResponse {
  id: ID!
  updateContribution_Contribution: contributions
}

input UpdateEpochInput {
  circle_id: Int!
  days: Int!
  grant: Float
  id: Int!
  repeat: Int!
  start_date: timestamptz!
}

type UpdateOrgResponse {
  id: Int!
  org: organizations
}

type UpdateProfileResponse {
  id: Int!
  profile: profiles
}

input UpdateTeammatesInput {
  circle_id: Int!
  teammates: [Int]!
}

type UpdateTeammatesResponse {
  user: users
  user_id: ID!
}

input UpdateUserInput {
  bio: String
  circle_id: Int!
  epoch_first_visit: Boolean
  non_receiver: Boolean
}

input UploadCircleImageInput {
  circle_id: Int!
  image_data_base64: String!
}

input UploadImageInput {
  image_data_base64: String!
}

input UploadOrgImageInput {
  image_data_base64: String!
  org_id: Int!
}

input UserObj {
  address: String!
  entrance: String
  fixed_non_receiver: Boolean
  name: String!
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
}

type UserResponse {
  UserResponse: users
  id: ID!
}

type VaultResponse {
  id: ID!
  vault: vaults
}

input VouchInput {
  nominee_id: Int!
}

type VouchOutput {
  id: Int!
  nominee: nominees
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "burns"
"""
type burns {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: bigint!
  id: bigint!
  original_amount: Int!
  regift_percent: Int!
  tokens_burnt: Int!
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users!
  user_id: bigint!
}

"""
aggregated selection of "burns"
"""
type burns_aggregate {
  aggregate: burns_aggregate_fields
  nodes: [burns!]!
}

"""
aggregate fields of "burns"
"""
type burns_aggregate_fields {
  avg: burns_avg_fields
  count(columns: [burns_select_column!], distinct: Boolean): Int!
  max: burns_max_fields
  min: burns_min_fields
  stddev: burns_stddev_fields
  stddev_pop: burns_stddev_pop_fields
  stddev_samp: burns_stddev_samp_fields
  sum: burns_sum_fields
  var_pop: burns_var_pop_fields
  var_samp: burns_var_samp_fields
  variance: burns_variance_fields
}

"""
order by aggregate values of table "burns"
"""
input burns_aggregate_order_by {
  avg: burns_avg_order_by
  count: order_by
  max: burns_max_order_by
  min: burns_min_order_by
  stddev: burns_stddev_order_by
  stddev_pop: burns_stddev_pop_order_by
  stddev_samp: burns_stddev_samp_order_by
  sum: burns_sum_order_by
  var_pop: burns_var_pop_order_by
  var_samp: burns_var_samp_order_by
  variance: burns_variance_order_by
}

"""
input type for inserting array relation for remote table "burns"
"""
input burns_arr_rel_insert_input {
  data: [burns_insert_input!]!

  """
  upsert condition
  """
  on_conflict: burns_on_conflict
}

"""
aggregate avg on columns
"""
type burns_avg_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by avg() on columns of table "burns"
"""
input burns_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "burns". All fields are combined with a logical 'AND'.
"""
input burns_bool_exp {
  _and: [burns_bool_exp!]
  _not: burns_bool_exp
  _or: [burns_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: bigint_comparison_exp
  id: bigint_comparison_exp
  original_amount: Int_comparison_exp
  regift_percent: Int_comparison_exp
  tokens_burnt: Int_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "burns"
"""
enum burns_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  burns_pkey
}

"""
input type for incrementing numeric columns in table "burns"
"""
input burns_inc_input {
  circle_id: bigint
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  user_id: bigint
}

"""
input type for inserting data into table "burns"
"""
input burns_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamp
  epoch: epochs_obj_rel_insert_input
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  updated_at: timestamp
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""
aggregate max on columns
"""
type burns_max_fields {
  circle_id: bigint
  created_at: timestamp
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  updated_at: timestamp
  user_id: bigint
}

"""
order by max() on columns of table "burns"
"""
input burns_max_order_by {
  circle_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type burns_min_fields {
  circle_id: bigint
  created_at: timestamp
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  updated_at: timestamp
  user_id: bigint
}

"""
order by min() on columns of table "burns"
"""
input burns_min_order_by {
  circle_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "burns"
"""
type burns_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [burns!]!
}

"""
on_conflict condition type for table "burns"
"""
input burns_on_conflict {
  constraint: burns_constraint!
  update_columns: [burns_update_column!]! = []
  where: burns_bool_exp
}

"""
Ordering options when selecting data from "burns".
"""
input burns_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: burns
"""
input burns_pk_columns_input {
  id: bigint!
}

"""
select columns of table "burns"
"""
enum burns_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  original_amount

  """
  column name
  """
  regift_percent

  """
  column name
  """
  tokens_burnt

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "burns"
"""
input burns_set_input {
  circle_id: bigint
  created_at: timestamp
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  updated_at: timestamp
  user_id: bigint
}

"""
aggregate stddev on columns
"""
type burns_stddev_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by stddev() on columns of table "burns"
"""
input burns_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type burns_stddev_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "burns"
"""
input burns_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type burns_stddev_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "burns"
"""
input burns_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "burns"
"""
input burns_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: burns_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input burns_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  updated_at: timestamp
  user_id: bigint
}

"""
aggregate sum on columns
"""
type burns_sum_fields {
  circle_id: bigint
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  user_id: bigint
}

"""
order by sum() on columns of table "burns"
"""
input burns_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
update columns of table "burns"
"""
enum burns_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  original_amount

  """
  column name
  """
  regift_percent

  """
  column name
  """
  tokens_burnt

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

input burns_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: burns_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: burns_set_input
  where: burns_bool_exp!
}

"""
aggregate var_pop on columns
"""
type burns_var_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "burns"
"""
input burns_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type burns_var_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "burns"
"""
input burns_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type burns_variance_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  original_amount: Float
  regift_percent: Float
  tokens_burnt: Float
  user_id: Float
}

"""
order by variance() on columns of table "burns"
"""
input burns_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
Circle-scoped API keys with user defined permissions to allow third parties to authenticate to Coordinape's GraphQL API.
"""
type circle_api_keys {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  create_contributions: Boolean!
  create_vouches: Boolean!

  """
  An object relationship
  """
  createdByUser: users!
  created_at: timestamptz!
  created_by: bigint!
  hash: String!
  name: String!
  read_circle: Boolean!
  read_contributions: Boolean!
  read_epochs: Boolean!
  read_member_profiles: Boolean!
  read_nominees: Boolean!
  read_pending_token_gifts: Boolean!
  update_circle: Boolean!
  update_pending_token_gifts: Boolean!
}

"""
aggregated selection of "circle_api_keys"
"""
type circle_api_keys_aggregate {
  aggregate: circle_api_keys_aggregate_fields
  nodes: [circle_api_keys!]!
}

"""
aggregate fields of "circle_api_keys"
"""
type circle_api_keys_aggregate_fields {
  avg: circle_api_keys_avg_fields
  count(columns: [circle_api_keys_select_column!], distinct: Boolean): Int!
  max: circle_api_keys_max_fields
  min: circle_api_keys_min_fields
  stddev: circle_api_keys_stddev_fields
  stddev_pop: circle_api_keys_stddev_pop_fields
  stddev_samp: circle_api_keys_stddev_samp_fields
  sum: circle_api_keys_sum_fields
  var_pop: circle_api_keys_var_pop_fields
  var_samp: circle_api_keys_var_samp_fields
  variance: circle_api_keys_variance_fields
}

"""
order by aggregate values of table "circle_api_keys"
"""
input circle_api_keys_aggregate_order_by {
  avg: circle_api_keys_avg_order_by
  count: order_by
  max: circle_api_keys_max_order_by
  min: circle_api_keys_min_order_by
  stddev: circle_api_keys_stddev_order_by
  stddev_pop: circle_api_keys_stddev_pop_order_by
  stddev_samp: circle_api_keys_stddev_samp_order_by
  sum: circle_api_keys_sum_order_by
  var_pop: circle_api_keys_var_pop_order_by
  var_samp: circle_api_keys_var_samp_order_by
  variance: circle_api_keys_variance_order_by
}

"""
input type for inserting array relation for remote table "circle_api_keys"
"""
input circle_api_keys_arr_rel_insert_input {
  data: [circle_api_keys_insert_input!]!

  """
  upsert condition
  """
  on_conflict: circle_api_keys_on_conflict
}

"""
aggregate avg on columns
"""
type circle_api_keys_avg_fields {
  circle_id: Float
  created_by: Float
}

"""
order by avg() on columns of table "circle_api_keys"
"""
input circle_api_keys_avg_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
Boolean expression to filter rows from the table "circle_api_keys". All fields are combined with a logical 'AND'.
"""
input circle_api_keys_bool_exp {
  _and: [circle_api_keys_bool_exp!]
  _not: circle_api_keys_bool_exp
  _or: [circle_api_keys_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  create_contributions: Boolean_comparison_exp
  create_vouches: Boolean_comparison_exp
  createdByUser: users_bool_exp
  created_at: timestamptz_comparison_exp
  created_by: bigint_comparison_exp
  hash: String_comparison_exp
  name: String_comparison_exp
  read_circle: Boolean_comparison_exp
  read_contributions: Boolean_comparison_exp
  read_epochs: Boolean_comparison_exp
  read_member_profiles: Boolean_comparison_exp
  read_nominees: Boolean_comparison_exp
  read_pending_token_gifts: Boolean_comparison_exp
  update_circle: Boolean_comparison_exp
  update_pending_token_gifts: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "circle_api_keys"
"""
enum circle_api_keys_constraint {
  """
  unique or primary key constraint on columns "hash"
  """
  circle_api_keys_pkey
}

"""
input type for incrementing numeric columns in table "circle_api_keys"
"""
input circle_api_keys_inc_input {
  circle_id: bigint
  created_by: bigint
}

"""
input type for inserting data into table "circle_api_keys"
"""
input circle_api_keys_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  create_contributions: Boolean
  create_vouches: Boolean
  createdByUser: users_obj_rel_insert_input
  created_at: timestamptz
  created_by: bigint
  hash: String
  name: String
  read_circle: Boolean
  read_contributions: Boolean
  read_epochs: Boolean
  read_member_profiles: Boolean
  read_nominees: Boolean
  read_pending_token_gifts: Boolean
  update_circle: Boolean
  update_pending_token_gifts: Boolean
}

"""
aggregate max on columns
"""
type circle_api_keys_max_fields {
  circle_id: bigint
  created_at: timestamptz
  created_by: bigint
  hash: String
  name: String
}

"""
order by max() on columns of table "circle_api_keys"
"""
input circle_api_keys_max_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  hash: order_by
  name: order_by
}

"""
aggregate min on columns
"""
type circle_api_keys_min_fields {
  circle_id: bigint
  created_at: timestamptz
  created_by: bigint
  hash: String
  name: String
}

"""
order by min() on columns of table "circle_api_keys"
"""
input circle_api_keys_min_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  hash: order_by
  name: order_by
}

"""
response of any mutation on the table "circle_api_keys"
"""
type circle_api_keys_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_api_keys!]!
}

"""
input type for inserting object relation for remote table "circle_api_keys"
"""
input circle_api_keys_obj_rel_insert_input {
  data: circle_api_keys_insert_input!

  """
  upsert condition
  """
  on_conflict: circle_api_keys_on_conflict
}

"""
on_conflict condition type for table "circle_api_keys"
"""
input circle_api_keys_on_conflict {
  constraint: circle_api_keys_constraint!
  update_columns: [circle_api_keys_update_column!]! = []
  where: circle_api_keys_bool_exp
}

"""
Ordering options when selecting data from "circle_api_keys".
"""
input circle_api_keys_order_by {
  circle: circles_order_by
  circle_id: order_by
  create_contributions: order_by
  create_vouches: order_by
  createdByUser: users_order_by
  created_at: order_by
  created_by: order_by
  hash: order_by
  name: order_by
  read_circle: order_by
  read_contributions: order_by
  read_epochs: order_by
  read_member_profiles: order_by
  read_nominees: order_by
  read_pending_token_gifts: order_by
  update_circle: order_by
  update_pending_token_gifts: order_by
}

"""
primary key columns input for table: circle_api_keys
"""
input circle_api_keys_pk_columns_input {
  hash: String!
}

"""
select columns of table "circle_api_keys"
"""
enum circle_api_keys_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  create_contributions

  """
  column name
  """
  create_vouches

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  hash

  """
  column name
  """
  name

  """
  column name
  """
  read_circle

  """
  column name
  """
  read_contributions

  """
  column name
  """
  read_epochs

  """
  column name
  """
  read_member_profiles

  """
  column name
  """
  read_nominees

  """
  column name
  """
  read_pending_token_gifts

  """
  column name
  """
  update_circle

  """
  column name
  """
  update_pending_token_gifts
}

"""
input type for updating data in table "circle_api_keys"
"""
input circle_api_keys_set_input {
  circle_id: bigint
  create_contributions: Boolean
  create_vouches: Boolean
  created_at: timestamptz
  created_by: bigint
  hash: String
  name: String
  read_circle: Boolean
  read_contributions: Boolean
  read_epochs: Boolean
  read_member_profiles: Boolean
  read_nominees: Boolean
  read_pending_token_gifts: Boolean
  update_circle: Boolean
  update_pending_token_gifts: Boolean
}

"""
aggregate stddev on columns
"""
type circle_api_keys_stddev_fields {
  circle_id: Float
  created_by: Float
}

"""
order by stddev() on columns of table "circle_api_keys"
"""
input circle_api_keys_stddev_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
aggregate stddev_pop on columns
"""
type circle_api_keys_stddev_pop_fields {
  circle_id: Float
  created_by: Float
}

"""
order by stddev_pop() on columns of table "circle_api_keys"
"""
input circle_api_keys_stddev_pop_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
aggregate stddev_samp on columns
"""
type circle_api_keys_stddev_samp_fields {
  circle_id: Float
  created_by: Float
}

"""
order by stddev_samp() on columns of table "circle_api_keys"
"""
input circle_api_keys_stddev_samp_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
Streaming cursor of the table "circle_api_keys"
"""
input circle_api_keys_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_api_keys_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_api_keys_stream_cursor_value_input {
  circle_id: bigint
  create_contributions: Boolean
  create_vouches: Boolean
  created_at: timestamptz
  created_by: bigint
  hash: String
  name: String
  read_circle: Boolean
  read_contributions: Boolean
  read_epochs: Boolean
  read_member_profiles: Boolean
  read_nominees: Boolean
  read_pending_token_gifts: Boolean
  update_circle: Boolean
  update_pending_token_gifts: Boolean
}

"""
aggregate sum on columns
"""
type circle_api_keys_sum_fields {
  circle_id: bigint
  created_by: bigint
}

"""
order by sum() on columns of table "circle_api_keys"
"""
input circle_api_keys_sum_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
update columns of table "circle_api_keys"
"""
enum circle_api_keys_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  create_contributions

  """
  column name
  """
  create_vouches

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  hash

  """
  column name
  """
  name

  """
  column name
  """
  read_circle

  """
  column name
  """
  read_contributions

  """
  column name
  """
  read_epochs

  """
  column name
  """
  read_member_profiles

  """
  column name
  """
  read_nominees

  """
  column name
  """
  read_pending_token_gifts

  """
  column name
  """
  update_circle

  """
  column name
  """
  update_pending_token_gifts
}

input circle_api_keys_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: circle_api_keys_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: circle_api_keys_set_input
  where: circle_api_keys_bool_exp!
}

"""
aggregate var_pop on columns
"""
type circle_api_keys_var_pop_fields {
  circle_id: Float
  created_by: Float
}

"""
order by var_pop() on columns of table "circle_api_keys"
"""
input circle_api_keys_var_pop_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
aggregate var_samp on columns
"""
type circle_api_keys_var_samp_fields {
  circle_id: Float
  created_by: Float
}

"""
order by var_samp() on columns of table "circle_api_keys"
"""
input circle_api_keys_var_samp_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
aggregate variance on columns
"""
type circle_api_keys_variance_fields {
  circle_id: Float
  created_by: Float
}

"""
order by variance() on columns of table "circle_api_keys"
"""
input circle_api_keys_variance_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
columns and relationships of "circle_integrations"
"""
type circle_integrations {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamptz!
  data(
    """
    JSON select path
    """
    path: String
  ): json!
  id: bigint!
  name: String!
  type: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "circle_integrations"
"""
type circle_integrations_aggregate {
  aggregate: circle_integrations_aggregate_fields
  nodes: [circle_integrations!]!
}

"""
aggregate fields of "circle_integrations"
"""
type circle_integrations_aggregate_fields {
  avg: circle_integrations_avg_fields
  count(columns: [circle_integrations_select_column!], distinct: Boolean): Int!
  max: circle_integrations_max_fields
  min: circle_integrations_min_fields
  stddev: circle_integrations_stddev_fields
  stddev_pop: circle_integrations_stddev_pop_fields
  stddev_samp: circle_integrations_stddev_samp_fields
  sum: circle_integrations_sum_fields
  var_pop: circle_integrations_var_pop_fields
  var_samp: circle_integrations_var_samp_fields
  variance: circle_integrations_variance_fields
}

"""
order by aggregate values of table "circle_integrations"
"""
input circle_integrations_aggregate_order_by {
  avg: circle_integrations_avg_order_by
  count: order_by
  max: circle_integrations_max_order_by
  min: circle_integrations_min_order_by
  stddev: circle_integrations_stddev_order_by
  stddev_pop: circle_integrations_stddev_pop_order_by
  stddev_samp: circle_integrations_stddev_samp_order_by
  sum: circle_integrations_sum_order_by
  var_pop: circle_integrations_var_pop_order_by
  var_samp: circle_integrations_var_samp_order_by
  variance: circle_integrations_variance_order_by
}

"""
input type for inserting array relation for remote table "circle_integrations"
"""
input circle_integrations_arr_rel_insert_input {
  data: [circle_integrations_insert_input!]!

  """
  upsert condition
  """
  on_conflict: circle_integrations_on_conflict
}

"""
aggregate avg on columns
"""
type circle_integrations_avg_fields {
  circle_id: Float
  id: Float
}

"""
order by avg() on columns of table "circle_integrations"
"""
input circle_integrations_avg_order_by {
  circle_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "circle_integrations". All fields are combined with a logical 'AND'.
"""
input circle_integrations_bool_exp {
  _and: [circle_integrations_bool_exp!]
  _not: circle_integrations_bool_exp
  _or: [circle_integrations_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  data: json_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "circle_integrations"
"""
enum circle_integrations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  circle_integrations_pkey
}

"""
input type for incrementing numeric columns in table "circle_integrations"
"""
input circle_integrations_inc_input {
  circle_id: bigint
  id: bigint
}

"""
input type for inserting data into table "circle_integrations"
"""
input circle_integrations_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamptz
  data: json
  id: bigint
  name: String
  type: String
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type circle_integrations_max_fields {
  circle_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  type: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "circle_integrations"
"""
input circle_integrations_max_order_by {
  circle_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  type: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type circle_integrations_min_fields {
  circle_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  type: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "circle_integrations"
"""
input circle_integrations_min_order_by {
  circle_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  type: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "circle_integrations"
"""
type circle_integrations_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_integrations!]!
}

"""
on_conflict condition type for table "circle_integrations"
"""
input circle_integrations_on_conflict {
  constraint: circle_integrations_constraint!
  update_columns: [circle_integrations_update_column!]! = []
  where: circle_integrations_bool_exp
}

"""
Ordering options when selecting data from "circle_integrations".
"""
input circle_integrations_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  data: order_by
  id: order_by
  name: order_by
  type: order_by
  updated_at: order_by
}

"""
primary key columns input for table: circle_integrations
"""
input circle_integrations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "circle_integrations"
"""
enum circle_integrations_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  data

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  type

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "circle_integrations"
"""
input circle_integrations_set_input {
  circle_id: bigint
  created_at: timestamptz
  data: json
  id: bigint
  name: String
  type: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type circle_integrations_stddev_fields {
  circle_id: Float
  id: Float
}

"""
order by stddev() on columns of table "circle_integrations"
"""
input circle_integrations_stddev_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type circle_integrations_stddev_pop_fields {
  circle_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "circle_integrations"
"""
input circle_integrations_stddev_pop_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type circle_integrations_stddev_samp_fields {
  circle_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "circle_integrations"
"""
input circle_integrations_stddev_samp_order_by {
  circle_id: order_by
  id: order_by
}

"""
Streaming cursor of the table "circle_integrations"
"""
input circle_integrations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_integrations_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_integrations_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamptz
  data: json
  id: bigint
  name: String
  type: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type circle_integrations_sum_fields {
  circle_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "circle_integrations"
"""
input circle_integrations_sum_order_by {
  circle_id: order_by
  id: order_by
}

"""
update columns of table "circle_integrations"
"""
enum circle_integrations_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  data

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  type

  """
  column name
  """
  updated_at
}

input circle_integrations_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: circle_integrations_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: circle_integrations_set_input
  where: circle_integrations_bool_exp!
}

"""
aggregate var_pop on columns
"""
type circle_integrations_var_pop_fields {
  circle_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "circle_integrations"
"""
input circle_integrations_var_pop_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate var_samp on columns
"""
type circle_integrations_var_samp_fields {
  circle_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "circle_integrations"
"""
input circle_integrations_var_samp_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate variance on columns
"""
type circle_integrations_variance_fields {
  circle_id: Float
  id: Float
}

"""
order by variance() on columns of table "circle_integrations"
"""
input circle_integrations_variance_order_by {
  circle_id: order_by
  id: order_by
}

"""
columns and relationships of "circle_metadata"
"""
type circle_metadata {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!
  id: bigint!
  json(
    """
    JSON select path
    """
    path: String
  ): json
  updated_at: timestamp!
}

"""
aggregated selection of "circle_metadata"
"""
type circle_metadata_aggregate {
  aggregate: circle_metadata_aggregate_fields
  nodes: [circle_metadata!]!
}

"""
aggregate fields of "circle_metadata"
"""
type circle_metadata_aggregate_fields {
  avg: circle_metadata_avg_fields
  count(columns: [circle_metadata_select_column!], distinct: Boolean): Int!
  max: circle_metadata_max_fields
  min: circle_metadata_min_fields
  stddev: circle_metadata_stddev_fields
  stddev_pop: circle_metadata_stddev_pop_fields
  stddev_samp: circle_metadata_stddev_samp_fields
  sum: circle_metadata_sum_fields
  var_pop: circle_metadata_var_pop_fields
  var_samp: circle_metadata_var_samp_fields
  variance: circle_metadata_variance_fields
}

"""
order by aggregate values of table "circle_metadata"
"""
input circle_metadata_aggregate_order_by {
  avg: circle_metadata_avg_order_by
  count: order_by
  max: circle_metadata_max_order_by
  min: circle_metadata_min_order_by
  stddev: circle_metadata_stddev_order_by
  stddev_pop: circle_metadata_stddev_pop_order_by
  stddev_samp: circle_metadata_stddev_samp_order_by
  sum: circle_metadata_sum_order_by
  var_pop: circle_metadata_var_pop_order_by
  var_samp: circle_metadata_var_samp_order_by
  variance: circle_metadata_variance_order_by
}

"""
input type for inserting array relation for remote table "circle_metadata"
"""
input circle_metadata_arr_rel_insert_input {
  data: [circle_metadata_insert_input!]!

  """
  upsert condition
  """
  on_conflict: circle_metadata_on_conflict
}

"""
aggregate avg on columns
"""
type circle_metadata_avg_fields {
  circle_id: Float
  id: Float
}

"""
order by avg() on columns of table "circle_metadata"
"""
input circle_metadata_avg_order_by {
  circle_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "circle_metadata". All fields are combined with a logical 'AND'.
"""
input circle_metadata_bool_exp {
  _and: [circle_metadata_bool_exp!]
  _not: circle_metadata_bool_exp
  _or: [circle_metadata_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  json: json_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "circle_metadata"
"""
enum circle_metadata_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  circle_metadata_pkey
}

"""
input type for incrementing numeric columns in table "circle_metadata"
"""
input circle_metadata_inc_input {
  circle_id: bigint
  id: bigint
}

"""
input type for inserting data into table "circle_metadata"
"""
input circle_metadata_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamp
  id: bigint
  json: json
  updated_at: timestamp
}

"""
aggregate max on columns
"""
type circle_metadata_max_fields {
  circle_id: bigint
  created_at: timestamp
  id: bigint
  updated_at: timestamp
}

"""
order by max() on columns of table "circle_metadata"
"""
input circle_metadata_max_order_by {
  circle_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type circle_metadata_min_fields {
  circle_id: bigint
  created_at: timestamp
  id: bigint
  updated_at: timestamp
}

"""
order by min() on columns of table "circle_metadata"
"""
input circle_metadata_min_order_by {
  circle_id: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "circle_metadata"
"""
type circle_metadata_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_metadata!]!
}

"""
on_conflict condition type for table "circle_metadata"
"""
input circle_metadata_on_conflict {
  constraint: circle_metadata_constraint!
  update_columns: [circle_metadata_update_column!]! = []
  where: circle_metadata_bool_exp
}

"""
Ordering options when selecting data from "circle_metadata".
"""
input circle_metadata_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  id: order_by
  json: order_by
  updated_at: order_by
}

"""
primary key columns input for table: circle_metadata
"""
input circle_metadata_pk_columns_input {
  id: bigint!
}

"""
select columns of table "circle_metadata"
"""
enum circle_metadata_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  json

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "circle_metadata"
"""
input circle_metadata_set_input {
  circle_id: bigint
  created_at: timestamp
  id: bigint
  json: json
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type circle_metadata_stddev_fields {
  circle_id: Float
  id: Float
}

"""
order by stddev() on columns of table "circle_metadata"
"""
input circle_metadata_stddev_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate stddev_pop on columns
"""
type circle_metadata_stddev_pop_fields {
  circle_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "circle_metadata"
"""
input circle_metadata_stddev_pop_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate stddev_samp on columns
"""
type circle_metadata_stddev_samp_fields {
  circle_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "circle_metadata"
"""
input circle_metadata_stddev_samp_order_by {
  circle_id: order_by
  id: order_by
}

"""
Streaming cursor of the table "circle_metadata"
"""
input circle_metadata_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_metadata_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_metadata_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  id: bigint
  json: json
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type circle_metadata_sum_fields {
  circle_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "circle_metadata"
"""
input circle_metadata_sum_order_by {
  circle_id: order_by
  id: order_by
}

"""
update columns of table "circle_metadata"
"""
enum circle_metadata_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  json

  """
  column name
  """
  updated_at
}

input circle_metadata_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: circle_metadata_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: circle_metadata_set_input
  where: circle_metadata_bool_exp!
}

"""
aggregate var_pop on columns
"""
type circle_metadata_var_pop_fields {
  circle_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "circle_metadata"
"""
input circle_metadata_var_pop_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate var_samp on columns
"""
type circle_metadata_var_samp_fields {
  circle_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "circle_metadata"
"""
input circle_metadata_var_samp_order_by {
  circle_id: order_by
  id: order_by
}

"""
aggregate variance on columns
"""
type circle_metadata_variance_fields {
  circle_id: Float
  id: Float
}

"""
order by variance() on columns of table "circle_metadata"
"""
input circle_metadata_variance_order_by {
  circle_id: order_by
  id: order_by
}

"""
columns and relationships of "circle_private"
"""
type circle_private {
  """
  An object relationship
  """
  circle: circles
  circle_id: bigint
  discord_webhook: String
}

"""
aggregated selection of "circle_private"
"""
type circle_private_aggregate {
  aggregate: circle_private_aggregate_fields
  nodes: [circle_private!]!
}

"""
aggregate fields of "circle_private"
"""
type circle_private_aggregate_fields {
  avg: circle_private_avg_fields
  count(columns: [circle_private_select_column!], distinct: Boolean): Int!
  max: circle_private_max_fields
  min: circle_private_min_fields
  stddev: circle_private_stddev_fields
  stddev_pop: circle_private_stddev_pop_fields
  stddev_samp: circle_private_stddev_samp_fields
  sum: circle_private_sum_fields
  var_pop: circle_private_var_pop_fields
  var_samp: circle_private_var_samp_fields
  variance: circle_private_variance_fields
}

"""
aggregate avg on columns
"""
type circle_private_avg_fields {
  circle_id: Float
}

"""
Boolean expression to filter rows from the table "circle_private". All fields are combined with a logical 'AND'.
"""
input circle_private_bool_exp {
  _and: [circle_private_bool_exp!]
  _not: circle_private_bool_exp
  _or: [circle_private_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  discord_webhook: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "circle_private"
"""
input circle_private_inc_input {
  circle_id: bigint
}

"""
input type for inserting data into table "circle_private"
"""
input circle_private_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  discord_webhook: String
}

"""
aggregate max on columns
"""
type circle_private_max_fields {
  circle_id: bigint
  discord_webhook: String
}

"""
aggregate min on columns
"""
type circle_private_min_fields {
  circle_id: bigint
  discord_webhook: String
}

"""
response of any mutation on the table "circle_private"
"""
type circle_private_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_private!]!
}

"""
input type for inserting object relation for remote table "circle_private"
"""
input circle_private_obj_rel_insert_input {
  data: circle_private_insert_input!
}

"""
Ordering options when selecting data from "circle_private".
"""
input circle_private_order_by {
  circle: circles_order_by
  circle_id: order_by
  discord_webhook: order_by
}

"""
select columns of table "circle_private"
"""
enum circle_private_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  discord_webhook
}

"""
input type for updating data in table "circle_private"
"""
input circle_private_set_input {
  circle_id: bigint
  discord_webhook: String
}

"""
aggregate stddev on columns
"""
type circle_private_stddev_fields {
  circle_id: Float
}

"""
aggregate stddev_pop on columns
"""
type circle_private_stddev_pop_fields {
  circle_id: Float
}

"""
aggregate stddev_samp on columns
"""
type circle_private_stddev_samp_fields {
  circle_id: Float
}

"""
Streaming cursor of the table "circle_private"
"""
input circle_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_private_stream_cursor_value_input {
  circle_id: bigint
  discord_webhook: String
}

"""
aggregate sum on columns
"""
type circle_private_sum_fields {
  circle_id: bigint
}

input circle_private_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: circle_private_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: circle_private_set_input
  where: circle_private_bool_exp!
}

"""
aggregate var_pop on columns
"""
type circle_private_var_pop_fields {
  circle_id: Float
}

"""
aggregate var_samp on columns
"""
type circle_private_var_samp_fields {
  circle_id: Float
}

"""
aggregate variance on columns
"""
type circle_private_variance_fields {
  circle_id: Float
}

"""
columns and relationships of "circle_share_tokens"
"""
type circle_share_tokens {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamptz!
  type: Int!
  updated_at: timestamptz!
  uuid: uuid!
}

"""
aggregated selection of "circle_share_tokens"
"""
type circle_share_tokens_aggregate {
  aggregate: circle_share_tokens_aggregate_fields
  nodes: [circle_share_tokens!]!
}

"""
aggregate fields of "circle_share_tokens"
"""
type circle_share_tokens_aggregate_fields {
  avg: circle_share_tokens_avg_fields
  count(columns: [circle_share_tokens_select_column!], distinct: Boolean): Int!
  max: circle_share_tokens_max_fields
  min: circle_share_tokens_min_fields
  stddev: circle_share_tokens_stddev_fields
  stddev_pop: circle_share_tokens_stddev_pop_fields
  stddev_samp: circle_share_tokens_stddev_samp_fields
  sum: circle_share_tokens_sum_fields
  var_pop: circle_share_tokens_var_pop_fields
  var_samp: circle_share_tokens_var_samp_fields
  variance: circle_share_tokens_variance_fields
}

"""
aggregate avg on columns
"""
type circle_share_tokens_avg_fields {
  circle_id: Float
  type: Float
}

"""
Boolean expression to filter rows from the table "circle_share_tokens". All fields are combined with a logical 'AND'.
"""
input circle_share_tokens_bool_exp {
  _and: [circle_share_tokens_bool_exp!]
  _not: circle_share_tokens_bool_exp
  _or: [circle_share_tokens_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  type: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "circle_share_tokens"
"""
enum circle_share_tokens_constraint {
  """
  unique or primary key constraint on columns "type", "circle_id"
  """
  circle_share_token_pkey

  """
  unique or primary key constraint on columns "uuid"
  """
  circle_share_token_uuid_key
}

"""
input type for incrementing numeric columns in table "circle_share_tokens"
"""
input circle_share_tokens_inc_input {
  circle_id: bigint
  type: Int
}

"""
input type for inserting data into table "circle_share_tokens"
"""
input circle_share_tokens_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamptz
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
aggregate max on columns
"""
type circle_share_tokens_max_fields {
  circle_id: bigint
  created_at: timestamptz
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
aggregate min on columns
"""
type circle_share_tokens_min_fields {
  circle_id: bigint
  created_at: timestamptz
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
response of any mutation on the table "circle_share_tokens"
"""
type circle_share_tokens_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_share_tokens!]!
}

"""
on_conflict condition type for table "circle_share_tokens"
"""
input circle_share_tokens_on_conflict {
  constraint: circle_share_tokens_constraint!
  update_columns: [circle_share_tokens_update_column!]! = []
  where: circle_share_tokens_bool_exp
}

"""
Ordering options when selecting data from "circle_share_tokens".
"""
input circle_share_tokens_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  type: order_by
  updated_at: order_by
  uuid: order_by
}

"""
primary key columns input for table: circle_share_tokens
"""
input circle_share_tokens_pk_columns_input {
  circle_id: bigint!
  type: Int!
}

"""
select columns of table "circle_share_tokens"
"""
enum circle_share_tokens_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  type

  """
  column name
  """
  updated_at

  """
  column name
  """
  uuid
}

"""
input type for updating data in table "circle_share_tokens"
"""
input circle_share_tokens_set_input {
  circle_id: bigint
  created_at: timestamptz
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
aggregate stddev on columns
"""
type circle_share_tokens_stddev_fields {
  circle_id: Float
  type: Float
}

"""
aggregate stddev_pop on columns
"""
type circle_share_tokens_stddev_pop_fields {
  circle_id: Float
  type: Float
}

"""
aggregate stddev_samp on columns
"""
type circle_share_tokens_stddev_samp_fields {
  circle_id: Float
  type: Float
}

"""
Streaming cursor of the table "circle_share_tokens"
"""
input circle_share_tokens_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_share_tokens_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_share_tokens_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamptz
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
aggregate sum on columns
"""
type circle_share_tokens_sum_fields {
  circle_id: bigint
  type: Int
}

"""
update columns of table "circle_share_tokens"
"""
enum circle_share_tokens_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  type

  """
  column name
  """
  updated_at

  """
  column name
  """
  uuid
}

input circle_share_tokens_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: circle_share_tokens_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: circle_share_tokens_set_input
  where: circle_share_tokens_bool_exp!
}

"""
aggregate var_pop on columns
"""
type circle_share_tokens_var_pop_fields {
  circle_id: Float
  type: Float
}

"""
aggregate var_samp on columns
"""
type circle_share_tokens_var_samp_fields {
  circle_id: Float
  type: Float
}

"""
aggregate variance on columns
"""
type circle_share_tokens_variance_fields {
  circle_id: Float
  type: Float
}

"""
columns and relationships of "circles"
"""
type circles {
  alloc_text: String

  """
  An array relationship
  """
  api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  An aggregate relationship
  """
  api_keys_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): circle_api_keys_aggregate!
  auto_opt_out: Boolean!

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An aggregate relationship
  """
  burns_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): burns_aggregate!

  """
  An array relationship
  """
  circle_metadata(
    """
    distinct select on columns
    """
    distinct_on: [circle_metadata_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_metadata_order_by!]

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): [circle_metadata!]!

  """
  An aggregate relationship
  """
  circle_metadata_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_metadata_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_metadata_order_by!]

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): circle_metadata_aggregate!

  """
  An object relationship
  """
  circle_private: circle_private
  contact: String

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!
  created_at: timestamp!
  default_opt_in: Boolean!
  deleted_at: timestamp
  discord_webhook: String

  """
  An array relationship
  """
  epochs(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  An aggregate relationship
  """
  epochs_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): epochs_aggregate!
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  id: bigint!

  """
  An array relationship
  """
  integrations(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  An aggregate relationship
  """
  integrations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): circle_integrations_aggregate!
  is_verified: Boolean!
  logo: String
  min_vouches: Int!
  name: String!
  nomination_days_limit: Int!

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!
  only_giver_vouch: Boolean!

  """
  An object relationship
  """
  organization: organizations!
  organization_id: Int!

  """
  An array relationship
  """
  pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An aggregate relationship
  """
  pending_token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): pending_token_gifts_aggregate!
  show_pending_gives: Boolean!
  team_sel_text: String
  team_selection: Boolean!
  telegram_id: String

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  token_name: String!
  updated_at: timestamp!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An aggregate relationship
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!
  vouching: Boolean!
  vouching_text: String
}

"""
aggregated selection of "circles"
"""
type circles_aggregate {
  aggregate: circles_aggregate_fields
  nodes: [circles!]!
}

"""
aggregate fields of "circles"
"""
type circles_aggregate_fields {
  avg: circles_avg_fields
  count(columns: [circles_select_column!], distinct: Boolean): Int!
  max: circles_max_fields
  min: circles_min_fields
  stddev: circles_stddev_fields
  stddev_pop: circles_stddev_pop_fields
  stddev_samp: circles_stddev_samp_fields
  sum: circles_sum_fields
  var_pop: circles_var_pop_fields
  var_samp: circles_var_samp_fields
  variance: circles_variance_fields
}

"""
order by aggregate values of table "circles"
"""
input circles_aggregate_order_by {
  avg: circles_avg_order_by
  count: order_by
  max: circles_max_order_by
  min: circles_min_order_by
  stddev: circles_stddev_order_by
  stddev_pop: circles_stddev_pop_order_by
  stddev_samp: circles_stddev_samp_order_by
  sum: circles_sum_order_by
  var_pop: circles_var_pop_order_by
  var_samp: circles_var_samp_order_by
  variance: circles_variance_order_by
}

"""
input type for inserting array relation for remote table "circles"
"""
input circles_arr_rel_insert_input {
  data: [circles_insert_input!]!

  """
  upsert condition
  """
  on_conflict: circles_on_conflict
}

"""
aggregate avg on columns
"""
type circles_avg_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by avg() on columns of table "circles"
"""
input circles_avg_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
Boolean expression to filter rows from the table "circles". All fields are combined with a logical 'AND'.
"""
input circles_bool_exp {
  _and: [circles_bool_exp!]
  _not: circles_bool_exp
  _or: [circles_bool_exp!]
  alloc_text: String_comparison_exp
  api_keys: circle_api_keys_bool_exp
  auto_opt_out: Boolean_comparison_exp
  burns: burns_bool_exp
  circle_metadata: circle_metadata_bool_exp
  circle_private: circle_private_bool_exp
  contact: String_comparison_exp
  contributions: contributions_bool_exp
  created_at: timestamp_comparison_exp
  default_opt_in: Boolean_comparison_exp
  deleted_at: timestamp_comparison_exp
  discord_webhook: String_comparison_exp
  epochs: epochs_bool_exp
  fixed_payment_token_type: String_comparison_exp
  fixed_payment_vault_id: Int_comparison_exp
  id: bigint_comparison_exp
  integrations: circle_integrations_bool_exp
  is_verified: Boolean_comparison_exp
  logo: String_comparison_exp
  min_vouches: Int_comparison_exp
  name: String_comparison_exp
  nomination_days_limit: Int_comparison_exp
  nominees: nominees_bool_exp
  only_giver_vouch: Boolean_comparison_exp
  organization: organizations_bool_exp
  organization_id: Int_comparison_exp
  pending_token_gifts: pending_token_gifts_bool_exp
  show_pending_gives: Boolean_comparison_exp
  team_sel_text: String_comparison_exp
  team_selection: Boolean_comparison_exp
  telegram_id: String_comparison_exp
  token_gifts: token_gifts_bool_exp
  token_name: String_comparison_exp
  updated_at: timestamp_comparison_exp
  users: users_bool_exp
  vault_transactions: vault_transactions_bool_exp
  vouching: Boolean_comparison_exp
  vouching_text: String_comparison_exp
}

"""
unique or primary key constraints on table "circles"
"""
enum circles_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  circles_pkey
}

"""
input type for incrementing numeric columns in table "circles"
"""
input circles_inc_input {
  fixed_payment_vault_id: Int
  id: bigint
  min_vouches: Int
  nomination_days_limit: Int
  organization_id: Int
}

"""
input type for inserting data into table "circles"
"""
input circles_insert_input {
  alloc_text: String
  api_keys: circle_api_keys_arr_rel_insert_input
  auto_opt_out: Boolean
  burns: burns_arr_rel_insert_input
  circle_metadata: circle_metadata_arr_rel_insert_input
  circle_private: circle_private_obj_rel_insert_input
  contact: String
  contributions: contributions_arr_rel_insert_input
  created_at: timestamp
  default_opt_in: Boolean
  deleted_at: timestamp
  discord_webhook: String
  epochs: epochs_arr_rel_insert_input
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  id: bigint
  integrations: circle_integrations_arr_rel_insert_input
  is_verified: Boolean
  logo: String
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  nominees: nominees_arr_rel_insert_input
  only_giver_vouch: Boolean
  organization: organizations_obj_rel_insert_input
  organization_id: Int
  pending_token_gifts: pending_token_gifts_arr_rel_insert_input
  show_pending_gives: Boolean
  team_sel_text: String
  team_selection: Boolean
  telegram_id: String
  token_gifts: token_gifts_arr_rel_insert_input
  token_name: String
  updated_at: timestamp
  users: users_arr_rel_insert_input
  vault_transactions: vault_transactions_arr_rel_insert_input
  vouching: Boolean
  vouching_text: String
}

"""
aggregate max on columns
"""
type circles_max_fields {
  alloc_text: String
  contact: String
  created_at: timestamp
  deleted_at: timestamp
  discord_webhook: String
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  id: bigint
  logo: String
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  organization_id: Int
  team_sel_text: String
  telegram_id: String
  token_name: String
  updated_at: timestamp
  vouching_text: String
}

"""
order by max() on columns of table "circles"
"""
input circles_max_order_by {
  alloc_text: order_by
  contact: order_by
  created_at: order_by
  deleted_at: order_by
  discord_webhook: order_by
  fixed_payment_token_type: order_by
  fixed_payment_vault_id: order_by
  id: order_by
  logo: order_by
  min_vouches: order_by
  name: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  team_sel_text: order_by
  telegram_id: order_by
  token_name: order_by
  updated_at: order_by
  vouching_text: order_by
}

"""
aggregate min on columns
"""
type circles_min_fields {
  alloc_text: String
  contact: String
  created_at: timestamp
  deleted_at: timestamp
  discord_webhook: String
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  id: bigint
  logo: String
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  organization_id: Int
  team_sel_text: String
  telegram_id: String
  token_name: String
  updated_at: timestamp
  vouching_text: String
}

"""
order by min() on columns of table "circles"
"""
input circles_min_order_by {
  alloc_text: order_by
  contact: order_by
  created_at: order_by
  deleted_at: order_by
  discord_webhook: order_by
  fixed_payment_token_type: order_by
  fixed_payment_vault_id: order_by
  id: order_by
  logo: order_by
  min_vouches: order_by
  name: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  team_sel_text: order_by
  telegram_id: order_by
  token_name: order_by
  updated_at: order_by
  vouching_text: order_by
}

"""
response of any mutation on the table "circles"
"""
type circles_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circles!]!
}

"""
input type for inserting object relation for remote table "circles"
"""
input circles_obj_rel_insert_input {
  data: circles_insert_input!

  """
  upsert condition
  """
  on_conflict: circles_on_conflict
}

"""
on_conflict condition type for table "circles"
"""
input circles_on_conflict {
  constraint: circles_constraint!
  update_columns: [circles_update_column!]! = []
  where: circles_bool_exp
}

"""
Ordering options when selecting data from "circles".
"""
input circles_order_by {
  alloc_text: order_by
  api_keys_aggregate: circle_api_keys_aggregate_order_by
  auto_opt_out: order_by
  burns_aggregate: burns_aggregate_order_by
  circle_metadata_aggregate: circle_metadata_aggregate_order_by
  circle_private: circle_private_order_by
  contact: order_by
  contributions_aggregate: contributions_aggregate_order_by
  created_at: order_by
  default_opt_in: order_by
  deleted_at: order_by
  discord_webhook: order_by
  epochs_aggregate: epochs_aggregate_order_by
  fixed_payment_token_type: order_by
  fixed_payment_vault_id: order_by
  id: order_by
  integrations_aggregate: circle_integrations_aggregate_order_by
  is_verified: order_by
  logo: order_by
  min_vouches: order_by
  name: order_by
  nomination_days_limit: order_by
  nominees_aggregate: nominees_aggregate_order_by
  only_giver_vouch: order_by
  organization: organizations_order_by
  organization_id: order_by
  pending_token_gifts_aggregate: pending_token_gifts_aggregate_order_by
  show_pending_gives: order_by
  team_sel_text: order_by
  team_selection: order_by
  telegram_id: order_by
  token_gifts_aggregate: token_gifts_aggregate_order_by
  token_name: order_by
  updated_at: order_by
  users_aggregate: users_aggregate_order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
  vouching: order_by
  vouching_text: order_by
}

"""
primary key columns input for table: circles
"""
input circles_pk_columns_input {
  id: bigint!
}

"""
select columns of table "circles"
"""
enum circles_select_column {
  """
  column name
  """
  alloc_text

  """
  column name
  """
  auto_opt_out

  """
  column name
  """
  contact

  """
  column name
  """
  created_at

  """
  column name
  """
  default_opt_in

  """
  column name
  """
  deleted_at

  """
  column name
  """
  discord_webhook

  """
  column name
  """
  fixed_payment_token_type

  """
  column name
  """
  fixed_payment_vault_id

  """
  column name
  """
  id

  """
  column name
  """
  is_verified

  """
  column name
  """
  logo

  """
  column name
  """
  min_vouches

  """
  column name
  """
  name

  """
  column name
  """
  nomination_days_limit

  """
  column name
  """
  only_giver_vouch

  """
  column name
  """
  organization_id

  """
  column name
  """
  show_pending_gives

  """
  column name
  """
  team_sel_text

  """
  column name
  """
  team_selection

  """
  column name
  """
  telegram_id

  """
  column name
  """
  token_name

  """
  column name
  """
  updated_at

  """
  column name
  """
  vouching

  """
  column name
  """
  vouching_text
}

"""
input type for updating data in table "circles"
"""
input circles_set_input {
  alloc_text: String
  auto_opt_out: Boolean
  contact: String
  created_at: timestamp
  default_opt_in: Boolean
  deleted_at: timestamp
  discord_webhook: String
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  id: bigint
  is_verified: Boolean
  logo: String
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  only_giver_vouch: Boolean
  organization_id: Int
  show_pending_gives: Boolean
  team_sel_text: String
  team_selection: Boolean
  telegram_id: String
  token_name: String
  updated_at: timestamp
  vouching: Boolean
  vouching_text: String
}

"""
aggregate stddev on columns
"""
type circles_stddev_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by stddev() on columns of table "circles"
"""
input circles_stddev_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type circles_stddev_pop_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by stddev_pop() on columns of table "circles"
"""
input circles_stddev_pop_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type circles_stddev_samp_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by stddev_samp() on columns of table "circles"
"""
input circles_stddev_samp_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
Streaming cursor of the table "circles"
"""
input circles_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circles_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circles_stream_cursor_value_input {
  alloc_text: String
  auto_opt_out: Boolean
  contact: String
  created_at: timestamp
  default_opt_in: Boolean
  deleted_at: timestamp
  discord_webhook: String
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  id: bigint
  is_verified: Boolean
  logo: String
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  only_giver_vouch: Boolean
  organization_id: Int
  show_pending_gives: Boolean
  team_sel_text: String
  team_selection: Boolean
  telegram_id: String
  token_name: String
  updated_at: timestamp
  vouching: Boolean
  vouching_text: String
}

"""
aggregate sum on columns
"""
type circles_sum_fields {
  fixed_payment_vault_id: Int
  id: bigint
  min_vouches: Int
  nomination_days_limit: Int
  organization_id: Int
}

"""
order by sum() on columns of table "circles"
"""
input circles_sum_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
update columns of table "circles"
"""
enum circles_update_column {
  """
  column name
  """
  alloc_text

  """
  column name
  """
  auto_opt_out

  """
  column name
  """
  contact

  """
  column name
  """
  created_at

  """
  column name
  """
  default_opt_in

  """
  column name
  """
  deleted_at

  """
  column name
  """
  discord_webhook

  """
  column name
  """
  fixed_payment_token_type

  """
  column name
  """
  fixed_payment_vault_id

  """
  column name
  """
  id

  """
  column name
  """
  is_verified

  """
  column name
  """
  logo

  """
  column name
  """
  min_vouches

  """
  column name
  """
  name

  """
  column name
  """
  nomination_days_limit

  """
  column name
  """
  only_giver_vouch

  """
  column name
  """
  organization_id

  """
  column name
  """
  show_pending_gives

  """
  column name
  """
  team_sel_text

  """
  column name
  """
  team_selection

  """
  column name
  """
  telegram_id

  """
  column name
  """
  token_name

  """
  column name
  """
  updated_at

  """
  column name
  """
  vouching

  """
  column name
  """
  vouching_text
}

input circles_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: circles_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: circles_set_input
  where: circles_bool_exp!
}

"""
aggregate var_pop on columns
"""
type circles_var_pop_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by var_pop() on columns of table "circles"
"""
input circles_var_pop_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
aggregate var_samp on columns
"""
type circles_var_samp_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by var_samp() on columns of table "circles"
"""
input circles_var_samp_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
aggregate variance on columns
"""
type circles_variance_fields {
  fixed_payment_vault_id: Float
  id: Float
  min_vouches: Float
  nomination_days_limit: Float
  organization_id: Float
}

"""
order by variance() on columns of table "circles"
"""
input circles_variance_order_by {
  fixed_payment_vault_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
}

"""
columns and relationships of "claims"
"""
type claims {
  address: String!
  amount: numeric!
  created_at: timestamptz!

  """
  An object relationship
  """
  distribution: distributions!
  distribution_id: bigint!
  id: bigint!
  index: bigint!
  new_amount: numeric!

  """
  An object relationship
  """
  profile: profiles
  profile_id: bigint!
  proof: String!
  txHash: String
  updated_at: timestamptz!
}

"""
aggregated selection of "claims"
"""
type claims_aggregate {
  aggregate: claims_aggregate_fields
  nodes: [claims!]!
}

"""
aggregate fields of "claims"
"""
type claims_aggregate_fields {
  avg: claims_avg_fields
  count(columns: [claims_select_column!], distinct: Boolean): Int!
  max: claims_max_fields
  min: claims_min_fields
  stddev: claims_stddev_fields
  stddev_pop: claims_stddev_pop_fields
  stddev_samp: claims_stddev_samp_fields
  sum: claims_sum_fields
  var_pop: claims_var_pop_fields
  var_samp: claims_var_samp_fields
  variance: claims_variance_fields
}

"""
order by aggregate values of table "claims"
"""
input claims_aggregate_order_by {
  avg: claims_avg_order_by
  count: order_by
  max: claims_max_order_by
  min: claims_min_order_by
  stddev: claims_stddev_order_by
  stddev_pop: claims_stddev_pop_order_by
  stddev_samp: claims_stddev_samp_order_by
  sum: claims_sum_order_by
  var_pop: claims_var_pop_order_by
  var_samp: claims_var_samp_order_by
  variance: claims_variance_order_by
}

"""
input type for inserting array relation for remote table "claims"
"""
input claims_arr_rel_insert_input {
  data: [claims_insert_input!]!

  """
  upsert condition
  """
  on_conflict: claims_on_conflict
}

"""
aggregate avg on columns
"""
type claims_avg_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by avg() on columns of table "claims"
"""
input claims_avg_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "claims". All fields are combined with a logical 'AND'.
"""
input claims_bool_exp {
  _and: [claims_bool_exp!]
  _not: claims_bool_exp
  _or: [claims_bool_exp!]
  address: String_comparison_exp
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  distribution: distributions_bool_exp
  distribution_id: bigint_comparison_exp
  id: bigint_comparison_exp
  index: bigint_comparison_exp
  new_amount: numeric_comparison_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  proof: String_comparison_exp
  txHash: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "claims"
"""
enum claims_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  claims_pkey
}

"""
input type for incrementing numeric columns in table "claims"
"""
input claims_inc_input {
  amount: numeric
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
}

"""
input type for inserting data into table "claims"
"""
input claims_insert_input {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution: distributions_obj_rel_insert_input
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile: profiles_obj_rel_insert_input
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type claims_max_fields {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "claims"
"""
input claims_max_order_by {
  address: order_by
  amount: order_by
  created_at: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
  proof: order_by
  txHash: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type claims_min_fields {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "claims"
"""
input claims_min_order_by {
  address: order_by
  amount: order_by
  created_at: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
  proof: order_by
  txHash: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "claims"
"""
type claims_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [claims!]!
}

"""
on_conflict condition type for table "claims"
"""
input claims_on_conflict {
  constraint: claims_constraint!
  update_columns: [claims_update_column!]! = []
  where: claims_bool_exp
}

"""
Ordering options when selecting data from "claims".
"""
input claims_order_by {
  address: order_by
  amount: order_by
  created_at: order_by
  distribution: distributions_order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile: profiles_order_by
  profile_id: order_by
  proof: order_by
  txHash: order_by
  updated_at: order_by
}

"""
primary key columns input for table: claims
"""
input claims_pk_columns_input {
  id: bigint!
}

"""
select columns of table "claims"
"""
enum claims_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  amount

  """
  column name
  """
  created_at

  """
  column name
  """
  distribution_id

  """
  column name
  """
  id

  """
  column name
  """
  index

  """
  column name
  """
  new_amount

  """
  column name
  """
  profile_id

  """
  column name
  """
  proof

  """
  column name
  """
  txHash

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "claims"
"""
input claims_set_input {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type claims_stddev_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by stddev() on columns of table "claims"
"""
input claims_stddev_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type claims_stddev_pop_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by stddev_pop() on columns of table "claims"
"""
input claims_stddev_pop_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type claims_stddev_samp_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by stddev_samp() on columns of table "claims"
"""
input claims_stddev_samp_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "claims"
"""
input claims_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: claims_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input claims_stream_cursor_value_input {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type claims_sum_fields {
  amount: numeric
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
}

"""
order by sum() on columns of table "claims"
"""
input claims_sum_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
update columns of table "claims"
"""
enum claims_update_column {
  """
  column name
  """
  address

  """
  column name
  """
  amount

  """
  column name
  """
  created_at

  """
  column name
  """
  distribution_id

  """
  column name
  """
  id

  """
  column name
  """
  index

  """
  column name
  """
  new_amount

  """
  column name
  """
  profile_id

  """
  column name
  """
  proof

  """
  column name
  """
  txHash

  """
  column name
  """
  updated_at
}

input claims_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: claims_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: claims_set_input
  where: claims_bool_exp!
}

"""
aggregate var_pop on columns
"""
type claims_var_pop_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by var_pop() on columns of table "claims"
"""
input claims_var_pop_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type claims_var_samp_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by var_samp() on columns of table "claims"
"""
input claims_var_samp_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate variance on columns
"""
type claims_variance_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by variance() on columns of table "claims"
"""
input claims_variance_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
columns and relationships of "contributions"
"""
type contributions {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamptz!

  """
  An object relationship
  """
  created_with_api_key: circle_api_keys
  created_with_api_key_hash: String
  datetime_created: timestamptz!
  deleted_at: timestamptz
  description: String!
  id: bigint!
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users!
  user_id: bigint!
}

"""
aggregated selection of "contributions"
"""
type contributions_aggregate {
  aggregate: contributions_aggregate_fields
  nodes: [contributions!]!
}

"""
aggregate fields of "contributions"
"""
type contributions_aggregate_fields {
  avg: contributions_avg_fields
  count(columns: [contributions_select_column!], distinct: Boolean): Int!
  max: contributions_max_fields
  min: contributions_min_fields
  stddev: contributions_stddev_fields
  stddev_pop: contributions_stddev_pop_fields
  stddev_samp: contributions_stddev_samp_fields
  sum: contributions_sum_fields
  var_pop: contributions_var_pop_fields
  var_samp: contributions_var_samp_fields
  variance: contributions_variance_fields
}

"""
order by aggregate values of table "contributions"
"""
input contributions_aggregate_order_by {
  avg: contributions_avg_order_by
  count: order_by
  max: contributions_max_order_by
  min: contributions_min_order_by
  stddev: contributions_stddev_order_by
  stddev_pop: contributions_stddev_pop_order_by
  stddev_samp: contributions_stddev_samp_order_by
  sum: contributions_sum_order_by
  var_pop: contributions_var_pop_order_by
  var_samp: contributions_var_samp_order_by
  variance: contributions_variance_order_by
}

"""
input type for inserting array relation for remote table "contributions"
"""
input contributions_arr_rel_insert_input {
  data: [contributions_insert_input!]!

  """
  upsert condition
  """
  on_conflict: contributions_on_conflict
}

"""
aggregate avg on columns
"""
type contributions_avg_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "contributions"
"""
input contributions_avg_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "contributions". All fields are combined with a logical 'AND'.
"""
input contributions_bool_exp {
  _and: [contributions_bool_exp!]
  _not: contributions_bool_exp
  _or: [contributions_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  created_with_api_key: circle_api_keys_bool_exp
  created_with_api_key_hash: String_comparison_exp
  datetime_created: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "contributions"
"""
enum contributions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  contributions_pkey
}

"""
input type for incrementing numeric columns in table "contributions"
"""
input contributions_inc_input {
  circle_id: bigint
  id: bigint
  user_id: bigint
}

"""
input type for inserting data into table "contributions"
"""
input contributions_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key: circle_api_keys_obj_rel_insert_input
  created_with_api_key_hash: String
  datetime_created: timestamptz
  deleted_at: timestamptz
  description: String
  id: bigint
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""
aggregate max on columns
"""
type contributions_max_fields {
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  datetime_created: timestamptz
  deleted_at: timestamptz
  description: String
  id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
order by max() on columns of table "contributions"
"""
input contributions_max_order_by {
  circle_id: order_by
  created_at: order_by
  created_with_api_key_hash: order_by
  datetime_created: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type contributions_min_fields {
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  datetime_created: timestamptz
  deleted_at: timestamptz
  description: String
  id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
order by min() on columns of table "contributions"
"""
input contributions_min_order_by {
  circle_id: order_by
  created_at: order_by
  created_with_api_key_hash: order_by
  datetime_created: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "contributions"
"""
type contributions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [contributions!]!
}

"""
on_conflict condition type for table "contributions"
"""
input contributions_on_conflict {
  constraint: contributions_constraint!
  update_columns: [contributions_update_column!]! = []
  where: contributions_bool_exp
}

"""
Ordering options when selecting data from "contributions".
"""
input contributions_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  created_with_api_key: circle_api_keys_order_by
  created_with_api_key_hash: order_by
  datetime_created: order_by
  deleted_at: order_by
  description: order_by
  id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: contributions
"""
input contributions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "contributions"
"""
enum contributions_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_with_api_key_hash

  """
  column name
  """
  datetime_created

  """
  column name
  """
  deleted_at

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "contributions"
"""
input contributions_set_input {
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  datetime_created: timestamptz
  deleted_at: timestamptz
  description: String
  id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
aggregate stddev on columns
"""
type contributions_stddev_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "contributions"
"""
input contributions_stddev_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type contributions_stddev_pop_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "contributions"
"""
input contributions_stddev_pop_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type contributions_stddev_samp_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "contributions"
"""
input contributions_stddev_samp_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "contributions"
"""
input contributions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: contributions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input contributions_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  datetime_created: timestamptz
  deleted_at: timestamptz
  description: String
  id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
aggregate sum on columns
"""
type contributions_sum_fields {
  circle_id: bigint
  id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "contributions"
"""
input contributions_sum_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
update columns of table "contributions"
"""
enum contributions_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_with_api_key_hash

  """
  column name
  """
  datetime_created

  """
  column name
  """
  deleted_at

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

input contributions_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: contributions_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: contributions_set_input
  where: contributions_bool_exp!
}

"""
aggregate var_pop on columns
"""
type contributions_var_pop_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "contributions"
"""
input contributions_var_pop_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type contributions_var_samp_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "contributions"
"""
input contributions_var_samp_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type contributions_variance_fields {
  circle_id: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "contributions"
"""
input contributions_variance_order_by {
  circle_id: order_by
  id: order_by
  user_id: order_by
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
Vault Distributions
"""
type distributions {
  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!
  created_at: timestamp!
  created_by: bigint!
  distribution_epoch_id: bigint
  distribution_json(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  distribution_type: Int!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: bigint!
  fixed_amount: numeric!
  gift_amount: numeric!
  id: bigint!
  merkle_root: String

  """
  An object relationship
  """
  profile: profiles!
  total_amount: String!
  tx_hash: String
  updated_at: timestamp!

  """
  An object relationship
  """
  vault: vaults!
  vault_id: bigint!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!
}

"""
aggregated selection of "distributions"
"""
type distributions_aggregate {
  aggregate: distributions_aggregate_fields
  nodes: [distributions!]!
}

"""
aggregate fields of "distributions"
"""
type distributions_aggregate_fields {
  avg: distributions_avg_fields
  count(columns: [distributions_select_column!], distinct: Boolean): Int!
  max: distributions_max_fields
  min: distributions_min_fields
  stddev: distributions_stddev_fields
  stddev_pop: distributions_stddev_pop_fields
  stddev_samp: distributions_stddev_samp_fields
  sum: distributions_sum_fields
  var_pop: distributions_var_pop_fields
  var_samp: distributions_var_samp_fields
  variance: distributions_variance_fields
}

"""
order by aggregate values of table "distributions"
"""
input distributions_aggregate_order_by {
  avg: distributions_avg_order_by
  count: order_by
  max: distributions_max_order_by
  min: distributions_min_order_by
  stddev: distributions_stddev_order_by
  stddev_pop: distributions_stddev_pop_order_by
  stddev_samp: distributions_stddev_samp_order_by
  sum: distributions_sum_order_by
  var_pop: distributions_var_pop_order_by
  var_samp: distributions_var_samp_order_by
  variance: distributions_variance_order_by
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input distributions_append_input {
  distribution_json: jsonb
}

"""
input type for inserting array relation for remote table "distributions"
"""
input distributions_arr_rel_insert_input {
  data: [distributions_insert_input!]!

  """
  upsert condition
  """
  on_conflict: distributions_on_conflict
}

"""
aggregate avg on columns
"""
type distributions_avg_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by avg() on columns of table "distributions"
"""
input distributions_avg_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
Boolean expression to filter rows from the table "distributions". All fields are combined with a logical 'AND'.
"""
input distributions_bool_exp {
  _and: [distributions_bool_exp!]
  _not: distributions_bool_exp
  _or: [distributions_bool_exp!]
  claims: claims_bool_exp
  created_at: timestamp_comparison_exp
  created_by: bigint_comparison_exp
  distribution_epoch_id: bigint_comparison_exp
  distribution_json: jsonb_comparison_exp
  distribution_type: Int_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: bigint_comparison_exp
  fixed_amount: numeric_comparison_exp
  gift_amount: numeric_comparison_exp
  id: bigint_comparison_exp
  merkle_root: String_comparison_exp
  profile: profiles_bool_exp
  total_amount: String_comparison_exp
  tx_hash: String_comparison_exp
  updated_at: timestamp_comparison_exp
  vault: vaults_bool_exp
  vault_id: bigint_comparison_exp
  vault_transactions: vault_transactions_bool_exp
}

"""
unique or primary key constraints on table "distributions"
"""
enum distributions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  distributions_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input distributions_delete_at_path_input {
  distribution_json: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input distributions_delete_elem_input {
  distribution_json: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input distributions_delete_key_input {
  distribution_json: String
}

"""
input type for incrementing numeric columns in table "distributions"
"""
input distributions_inc_input {
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  vault_id: bigint
}

"""
input type for inserting data into table "distributions"
"""
input distributions_insert_input {
  claims: claims_arr_rel_insert_input
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_json: jsonb
  distribution_type: Int
  epoch: epochs_obj_rel_insert_input
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  profile: profiles_obj_rel_insert_input
  total_amount: String
  tx_hash: String
  updated_at: timestamp
  vault: vaults_obj_rel_insert_input
  vault_id: bigint
  vault_transactions: vault_transactions_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type distributions_max_fields {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  updated_at: timestamp
  vault_id: bigint
}

"""
order by max() on columns of table "distributions"
"""
input distributions_max_order_by {
  created_at: order_by
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  merkle_root: order_by
  total_amount: order_by
  tx_hash: order_by
  updated_at: order_by
  vault_id: order_by
}

"""
aggregate min on columns
"""
type distributions_min_fields {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  updated_at: timestamp
  vault_id: bigint
}

"""
order by min() on columns of table "distributions"
"""
input distributions_min_order_by {
  created_at: order_by
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  merkle_root: order_by
  total_amount: order_by
  tx_hash: order_by
  updated_at: order_by
  vault_id: order_by
}

"""
response of any mutation on the table "distributions"
"""
type distributions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [distributions!]!
}

"""
input type for inserting object relation for remote table "distributions"
"""
input distributions_obj_rel_insert_input {
  data: distributions_insert_input!

  """
  upsert condition
  """
  on_conflict: distributions_on_conflict
}

"""
on_conflict condition type for table "distributions"
"""
input distributions_on_conflict {
  constraint: distributions_constraint!
  update_columns: [distributions_update_column!]! = []
  where: distributions_bool_exp
}

"""
Ordering options when selecting data from "distributions".
"""
input distributions_order_by {
  claims_aggregate: claims_aggregate_order_by
  created_at: order_by
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_json: order_by
  distribution_type: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  merkle_root: order_by
  profile: profiles_order_by
  total_amount: order_by
  tx_hash: order_by
  updated_at: order_by
  vault: vaults_order_by
  vault_id: order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
}

"""
primary key columns input for table: distributions
"""
input distributions_pk_columns_input {
  id: bigint!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input distributions_prepend_input {
  distribution_json: jsonb
}

"""
select columns of table "distributions"
"""
enum distributions_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_epoch_id

  """
  column name
  """
  distribution_json

  """
  column name
  """
  distribution_type

  """
  column name
  """
  epoch_id

  """
  column name
  """
  fixed_amount

  """
  column name
  """
  gift_amount

  """
  column name
  """
  id

  """
  column name
  """
  merkle_root

  """
  column name
  """
  total_amount

  """
  column name
  """
  tx_hash

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_id
}

"""
input type for updating data in table "distributions"
"""
input distributions_set_input {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_json: jsonb
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  updated_at: timestamp
  vault_id: bigint
}

"""
aggregate stddev on columns
"""
type distributions_stddev_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by stddev() on columns of table "distributions"
"""
input distributions_stddev_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type distributions_stddev_pop_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by stddev_pop() on columns of table "distributions"
"""
input distributions_stddev_pop_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type distributions_stddev_samp_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by stddev_samp() on columns of table "distributions"
"""
input distributions_stddev_samp_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
Streaming cursor of the table "distributions"
"""
input distributions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: distributions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input distributions_stream_cursor_value_input {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_json: jsonb
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  updated_at: timestamp
  vault_id: bigint
}

"""
aggregate sum on columns
"""
type distributions_sum_fields {
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  vault_id: bigint
}

"""
order by sum() on columns of table "distributions"
"""
input distributions_sum_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
update columns of table "distributions"
"""
enum distributions_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_epoch_id

  """
  column name
  """
  distribution_json

  """
  column name
  """
  distribution_type

  """
  column name
  """
  epoch_id

  """
  column name
  """
  fixed_amount

  """
  column name
  """
  gift_amount

  """
  column name
  """
  id

  """
  column name
  """
  merkle_root

  """
  column name
  """
  total_amount

  """
  column name
  """
  tx_hash

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_id
}

input distributions_updates {
  """
  append existing jsonb value of filtered columns with new jsonb value
  """
  _append: distributions_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: distributions_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: distributions_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: distributions_delete_key_input

  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: distributions_inc_input

  """
  prepend existing jsonb value of filtered columns with new jsonb value
  """
  _prepend: distributions_prepend_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: distributions_set_input
  where: distributions_bool_exp!
}

"""
aggregate var_pop on columns
"""
type distributions_var_pop_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by var_pop() on columns of table "distributions"
"""
input distributions_var_pop_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate var_samp on columns
"""
type distributions_var_samp_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by var_samp() on columns of table "distributions"
"""
input distributions_var_samp_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate variance on columns
"""
type distributions_variance_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by variance() on columns of table "distributions"
"""
input distributions_variance_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
columns and relationships of "epoches"
"""
type epochs {
  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An aggregate relationship
  """
  burns_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): burns_aggregate!

  """
  An object relationship
  """
  circle: circles
  circle_id: Int!
  created_at: timestamp!
  days: Int
  description: String

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!
  end_date: timestamptz!
  ended: Boolean!

  """
  An array relationship
  """
  epoch_pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An aggregate relationship
  """
  epoch_pending_token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): pending_token_gifts_aggregate!
  grant: numeric!
  id: bigint!
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  regift_days: Int!
  repeat: Int!
  repeat_day_of_month: Int!
  start_date: timestamptz!

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  updated_at: timestamp!
}

"""
aggregated selection of "epoches"
"""
type epochs_aggregate {
  aggregate: epochs_aggregate_fields
  nodes: [epochs!]!
}

"""
aggregate fields of "epoches"
"""
type epochs_aggregate_fields {
  avg: epochs_avg_fields
  count(columns: [epochs_select_column!], distinct: Boolean): Int!
  max: epochs_max_fields
  min: epochs_min_fields
  stddev: epochs_stddev_fields
  stddev_pop: epochs_stddev_pop_fields
  stddev_samp: epochs_stddev_samp_fields
  sum: epochs_sum_fields
  var_pop: epochs_var_pop_fields
  var_samp: epochs_var_samp_fields
  variance: epochs_variance_fields
}

"""
order by aggregate values of table "epoches"
"""
input epochs_aggregate_order_by {
  avg: epochs_avg_order_by
  count: order_by
  max: epochs_max_order_by
  min: epochs_min_order_by
  stddev: epochs_stddev_order_by
  stddev_pop: epochs_stddev_pop_order_by
  stddev_samp: epochs_stddev_samp_order_by
  sum: epochs_sum_order_by
  var_pop: epochs_var_pop_order_by
  var_samp: epochs_var_samp_order_by
  variance: epochs_variance_order_by
}

"""
input type for inserting array relation for remote table "epoches"
"""
input epochs_arr_rel_insert_input {
  data: [epochs_insert_input!]!

  """
  upsert condition
  """
  on_conflict: epochs_on_conflict
}

"""
aggregate avg on columns
"""
type epochs_avg_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by avg() on columns of table "epoches"
"""
input epochs_avg_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
Boolean expression to filter rows from the table "epoches". All fields are combined with a logical 'AND'.
"""
input epochs_bool_exp {
  _and: [epochs_bool_exp!]
  _not: epochs_bool_exp
  _or: [epochs_bool_exp!]
  burns: burns_bool_exp
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  days: Int_comparison_exp
  description: String_comparison_exp
  distributions: distributions_bool_exp
  end_date: timestamptz_comparison_exp
  ended: Boolean_comparison_exp
  epoch_pending_token_gifts: pending_token_gifts_bool_exp
  grant: numeric_comparison_exp
  id: bigint_comparison_exp
  notified_before_end: timestamp_comparison_exp
  notified_end: timestamp_comparison_exp
  notified_start: timestamp_comparison_exp
  number: Int_comparison_exp
  regift_days: Int_comparison_exp
  repeat: Int_comparison_exp
  repeat_day_of_month: Int_comparison_exp
  start_date: timestamptz_comparison_exp
  token_gifts: token_gifts_bool_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "epoches"
"""
enum epochs_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  epoches_pkey
}

"""
input type for incrementing numeric columns in table "epoches"
"""
input epochs_inc_input {
  circle_id: Int
  days: Int
  grant: numeric
  id: bigint
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
}

"""
input type for inserting data into table "epoches"
"""
input epochs_insert_input {
  burns: burns_arr_rel_insert_input
  circle: circles_obj_rel_insert_input
  circle_id: Int
  created_at: timestamp
  days: Int
  description: String
  distributions: distributions_arr_rel_insert_input
  end_date: timestamptz
  ended: Boolean
  epoch_pending_token_gifts: pending_token_gifts_arr_rel_insert_input
  grant: numeric
  id: bigint
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
  start_date: timestamptz
  token_gifts: token_gifts_arr_rel_insert_input
  updated_at: timestamp
}

"""
aggregate max on columns
"""
type epochs_max_fields {
  circle_id: Int
  created_at: timestamp
  days: Int
  description: String
  end_date: timestamptz
  grant: numeric
  id: bigint
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
  start_date: timestamptz
  updated_at: timestamp
}

"""
order by max() on columns of table "epoches"
"""
input epochs_max_order_by {
  circle_id: order_by
  created_at: order_by
  days: order_by
  description: order_by
  end_date: order_by
  grant: order_by
  id: order_by
  notified_before_end: order_by
  notified_end: order_by
  notified_start: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
  start_date: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type epochs_min_fields {
  circle_id: Int
  created_at: timestamp
  days: Int
  description: String
  end_date: timestamptz
  grant: numeric
  id: bigint
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
  start_date: timestamptz
  updated_at: timestamp
}

"""
order by min() on columns of table "epoches"
"""
input epochs_min_order_by {
  circle_id: order_by
  created_at: order_by
  days: order_by
  description: order_by
  end_date: order_by
  grant: order_by
  id: order_by
  notified_before_end: order_by
  notified_end: order_by
  notified_start: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
  start_date: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "epoches"
"""
type epochs_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [epochs!]!
}

"""
input type for inserting object relation for remote table "epoches"
"""
input epochs_obj_rel_insert_input {
  data: epochs_insert_input!

  """
  upsert condition
  """
  on_conflict: epochs_on_conflict
}

"""
on_conflict condition type for table "epoches"
"""
input epochs_on_conflict {
  constraint: epochs_constraint!
  update_columns: [epochs_update_column!]! = []
  where: epochs_bool_exp
}

"""
Ordering options when selecting data from "epoches".
"""
input epochs_order_by {
  burns_aggregate: burns_aggregate_order_by
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  days: order_by
  description: order_by
  distributions_aggregate: distributions_aggregate_order_by
  end_date: order_by
  ended: order_by
  epoch_pending_token_gifts_aggregate: pending_token_gifts_aggregate_order_by
  grant: order_by
  id: order_by
  notified_before_end: order_by
  notified_end: order_by
  notified_start: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
  start_date: order_by
  token_gifts_aggregate: token_gifts_aggregate_order_by
  updated_at: order_by
}

"""
primary key columns input for table: epoches
"""
input epochs_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoches"
"""
enum epochs_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  days

  """
  column name
  """
  description

  """
  column name
  """
  end_date

  """
  column name
  """
  ended

  """
  column name
  """
  grant

  """
  column name
  """
  id

  """
  column name
  """
  notified_before_end

  """
  column name
  """
  notified_end

  """
  column name
  """
  notified_start

  """
  column name
  """
  number

  """
  column name
  """
  regift_days

  """
  column name
  """
  repeat

  """
  column name
  """
  repeat_day_of_month

  """
  column name
  """
  start_date

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "epoches"
"""
input epochs_set_input {
  circle_id: Int
  created_at: timestamp
  days: Int
  description: String
  end_date: timestamptz
  ended: Boolean
  grant: numeric
  id: bigint
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
  start_date: timestamptz
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type epochs_stddev_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by stddev() on columns of table "epoches"
"""
input epochs_stddev_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
aggregate stddev_pop on columns
"""
type epochs_stddev_pop_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by stddev_pop() on columns of table "epoches"
"""
input epochs_stddev_pop_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
aggregate stddev_samp on columns
"""
type epochs_stddev_samp_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by stddev_samp() on columns of table "epoches"
"""
input epochs_stddev_samp_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
Streaming cursor of the table "epochs"
"""
input epochs_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: epochs_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input epochs_stream_cursor_value_input {
  circle_id: Int
  created_at: timestamp
  days: Int
  description: String
  end_date: timestamptz
  ended: Boolean
  grant: numeric
  id: bigint
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
  start_date: timestamptz
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type epochs_sum_fields {
  circle_id: Int
  days: Int
  grant: numeric
  id: bigint
  number: Int
  regift_days: Int
  repeat: Int
  repeat_day_of_month: Int
}

"""
order by sum() on columns of table "epoches"
"""
input epochs_sum_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
update columns of table "epoches"
"""
enum epochs_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  days

  """
  column name
  """
  description

  """
  column name
  """
  end_date

  """
  column name
  """
  ended

  """
  column name
  """
  grant

  """
  column name
  """
  id

  """
  column name
  """
  notified_before_end

  """
  column name
  """
  notified_end

  """
  column name
  """
  notified_start

  """
  column name
  """
  number

  """
  column name
  """
  regift_days

  """
  column name
  """
  repeat

  """
  column name
  """
  repeat_day_of_month

  """
  column name
  """
  start_date

  """
  column name
  """
  updated_at
}

input epochs_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: epochs_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: epochs_set_input
  where: epochs_bool_exp!
}

"""
aggregate var_pop on columns
"""
type epochs_var_pop_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by var_pop() on columns of table "epoches"
"""
input epochs_var_pop_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
aggregate var_samp on columns
"""
type epochs_var_samp_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by var_samp() on columns of table "epoches"
"""
input epochs_var_samp_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
aggregate variance on columns
"""
type epochs_variance_fields {
  circle_id: Float
  days: Float
  grant: Float
  id: Float
  number: Float
  regift_days: Float
  repeat: Float
  repeat_day_of_month: Float
}

"""
order by variance() on columns of table "epoches"
"""
input epochs_variance_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  regift_days: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
columns and relationships of "gift_private"
"""
type gift_private {
  gift_id: bigint
  note: String

  """
  An object relationship
  """
  recipient: users
  recipient_id: bigint

  """
  An object relationship
  """
  sender: users
  sender_id: bigint
}

"""
aggregated selection of "gift_private"
"""
type gift_private_aggregate {
  aggregate: gift_private_aggregate_fields
  nodes: [gift_private!]!
}

"""
aggregate fields of "gift_private"
"""
type gift_private_aggregate_fields {
  avg: gift_private_avg_fields
  count(columns: [gift_private_select_column!], distinct: Boolean): Int!
  max: gift_private_max_fields
  min: gift_private_min_fields
  stddev: gift_private_stddev_fields
  stddev_pop: gift_private_stddev_pop_fields
  stddev_samp: gift_private_stddev_samp_fields
  sum: gift_private_sum_fields
  var_pop: gift_private_var_pop_fields
  var_samp: gift_private_var_samp_fields
  variance: gift_private_variance_fields
}

"""
aggregate avg on columns
"""
type gift_private_avg_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
Boolean expression to filter rows from the table "gift_private". All fields are combined with a logical 'AND'.
"""
input gift_private_bool_exp {
  _and: [gift_private_bool_exp!]
  _not: gift_private_bool_exp
  _or: [gift_private_bool_exp!]
  gift_id: bigint_comparison_exp
  note: String_comparison_exp
  recipient: users_bool_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_id: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "gift_private"
"""
input gift_private_inc_input {
  gift_id: bigint
  recipient_id: bigint
  sender_id: bigint
}

"""
input type for inserting data into table "gift_private"
"""
input gift_private_insert_input {
  gift_id: bigint
  note: String
  recipient: users_obj_rel_insert_input
  recipient_id: bigint
  sender: users_obj_rel_insert_input
  sender_id: bigint
}

"""
aggregate max on columns
"""
type gift_private_max_fields {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
aggregate min on columns
"""
type gift_private_min_fields {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
response of any mutation on the table "gift_private"
"""
type gift_private_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [gift_private!]!
}

"""
input type for inserting object relation for remote table "gift_private"
"""
input gift_private_obj_rel_insert_input {
  data: gift_private_insert_input!
}

"""
Ordering options when selecting data from "gift_private".
"""
input gift_private_order_by {
  gift_id: order_by
  note: order_by
  recipient: users_order_by
  recipient_id: order_by
  sender: users_order_by
  sender_id: order_by
}

"""
select columns of table "gift_private"
"""
enum gift_private_select_column {
  """
  column name
  """
  gift_id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_id
}

"""
input type for updating data in table "gift_private"
"""
input gift_private_set_input {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
aggregate stddev on columns
"""
type gift_private_stddev_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate stddev_pop on columns
"""
type gift_private_stddev_pop_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate stddev_samp on columns
"""
type gift_private_stddev_samp_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
Streaming cursor of the table "gift_private"
"""
input gift_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: gift_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input gift_private_stream_cursor_value_input {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
aggregate sum on columns
"""
type gift_private_sum_fields {
  gift_id: bigint
  recipient_id: bigint
  sender_id: bigint
}

input gift_private_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: gift_private_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: gift_private_set_input
  where: gift_private_bool_exp!
}

"""
aggregate var_pop on columns
"""
type gift_private_var_pop_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate var_samp on columns
"""
type gift_private_var_samp_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate variance on columns
"""
type gift_private_variance_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
columns and relationships of "histories"
"""
type histories {
  bio: String

  """
  An object relationship
  """
  circle: circles
  circle_id: Int!
  created_at: timestamp!

  """
  An object relationship
  """
  epoch: epochs
  epoch_id: Int!
  id: bigint!
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int!
}

"""
aggregated selection of "histories"
"""
type histories_aggregate {
  aggregate: histories_aggregate_fields
  nodes: [histories!]!
}

"""
aggregate fields of "histories"
"""
type histories_aggregate_fields {
  avg: histories_avg_fields
  count(columns: [histories_select_column!], distinct: Boolean): Int!
  max: histories_max_fields
  min: histories_min_fields
  stddev: histories_stddev_fields
  stddev_pop: histories_stddev_pop_fields
  stddev_samp: histories_stddev_samp_fields
  sum: histories_sum_fields
  var_pop: histories_var_pop_fields
  var_samp: histories_var_samp_fields
  variance: histories_variance_fields
}

"""
aggregate avg on columns
"""
type histories_avg_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "histories". All fields are combined with a logical 'AND'.
"""
input histories_bool_exp {
  _and: [histories_bool_exp!]
  _not: histories_bool_exp
  _or: [histories_bool_exp!]
  bio: String_comparison_exp
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  id: bigint_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "histories"
"""
enum histories_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  histories_pkey
}

"""
input type for incrementing numeric columns in table "histories"
"""
input histories_inc_input {
  circle_id: Int
  epoch_id: Int
  id: bigint
  user_id: Int
}

"""
input type for inserting data into table "histories"
"""
input histories_insert_input {
  bio: String
  circle: circles_obj_rel_insert_input
  circle_id: Int
  created_at: timestamp
  epoch: epochs_obj_rel_insert_input
  epoch_id: Int
  id: bigint
  updated_at: timestamp
  user: users_obj_rel_insert_input
  user_id: Int
}

"""
aggregate max on columns
"""
type histories_max_fields {
  bio: String
  circle_id: Int
  created_at: timestamp
  epoch_id: Int
  id: bigint
  updated_at: timestamp
  user_id: Int
}

"""
aggregate min on columns
"""
type histories_min_fields {
  bio: String
  circle_id: Int
  created_at: timestamp
  epoch_id: Int
  id: bigint
  updated_at: timestamp
  user_id: Int
}

"""
response of any mutation on the table "histories"
"""
type histories_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [histories!]!
}

"""
on_conflict condition type for table "histories"
"""
input histories_on_conflict {
  constraint: histories_constraint!
  update_columns: [histories_update_column!]! = []
  where: histories_bool_exp
}

"""
Ordering options when selecting data from "histories".
"""
input histories_order_by {
  bio: order_by
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  id: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: histories
"""
input histories_pk_columns_input {
  id: bigint!
}

"""
select columns of table "histories"
"""
enum histories_select_column {
  """
  column name
  """
  bio

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "histories"
"""
input histories_set_input {
  bio: String
  circle_id: Int
  created_at: timestamp
  epoch_id: Int
  id: bigint
  updated_at: timestamp
  user_id: Int
}

"""
aggregate stddev on columns
"""
type histories_stddev_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
aggregate stddev_pop on columns
"""
type histories_stddev_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
aggregate stddev_samp on columns
"""
type histories_stddev_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
Streaming cursor of the table "histories"
"""
input histories_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: histories_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input histories_stream_cursor_value_input {
  bio: String
  circle_id: Int
  created_at: timestamp
  epoch_id: Int
  id: bigint
  updated_at: timestamp
  user_id: Int
}

"""
aggregate sum on columns
"""
type histories_sum_fields {
  circle_id: Int
  epoch_id: Int
  id: bigint
  user_id: Int
}

"""
update columns of table "histories"
"""
enum histories_update_column {
  """
  column name
  """
  bio

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

input histories_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: histories_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: histories_set_input
  where: histories_bool_exp!
}

"""
aggregate var_pop on columns
"""
type histories_var_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
aggregate var_samp on columns
"""
type histories_var_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
aggregate variance on columns
"""
type histories_variance_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  user_id: Float
}

"""
columns and relationships of "interaction_events"
"""
type interaction_events {
  """
  An object relationship
  """
  circle: circles
  circle_id: Int
  created_at: timestamptz!
  data(
    """
    JSON select path
    """
    path: String
  ): jsonb
  event_subtype: String
  event_type: String!
  id: Int!
  org_id: Int

  """
  An object relationship
  """
  organization: organizations

  """
  An object relationship
  """
  profile: profiles
  profile_id: Int
  updated_at: timestamptz
}

"""
aggregated selection of "interaction_events"
"""
type interaction_events_aggregate {
  aggregate: interaction_events_aggregate_fields
  nodes: [interaction_events!]!
}

"""
aggregate fields of "interaction_events"
"""
type interaction_events_aggregate_fields {
  avg: interaction_events_avg_fields
  count(columns: [interaction_events_select_column!], distinct: Boolean): Int!
  max: interaction_events_max_fields
  min: interaction_events_min_fields
  stddev: interaction_events_stddev_fields
  stddev_pop: interaction_events_stddev_pop_fields
  stddev_samp: interaction_events_stddev_samp_fields
  sum: interaction_events_sum_fields
  var_pop: interaction_events_var_pop_fields
  var_samp: interaction_events_var_samp_fields
  variance: interaction_events_variance_fields
}

"""
append existing jsonb value of filtered columns with new jsonb value
"""
input interaction_events_append_input {
  data: jsonb
}

"""
aggregate avg on columns
"""
type interaction_events_avg_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

"""
Boolean expression to filter rows from the table "interaction_events". All fields are combined with a logical 'AND'.
"""
input interaction_events_bool_exp {
  _and: [interaction_events_bool_exp!]
  _not: interaction_events_bool_exp
  _or: [interaction_events_bool_exp!]
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  data: jsonb_comparison_exp
  event_subtype: String_comparison_exp
  event_type: String_comparison_exp
  id: Int_comparison_exp
  org_id: Int_comparison_exp
  organization: organizations_bool_exp
  profile: profiles_bool_exp
  profile_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "interaction_events"
"""
enum interaction_events_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  interaction_events_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input interaction_events_delete_at_path_input {
  data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input interaction_events_delete_elem_input {
  data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input interaction_events_delete_key_input {
  data: String
}

"""
input type for incrementing numeric columns in table "interaction_events"
"""
input interaction_events_inc_input {
  circle_id: Int
  id: Int
  org_id: Int
  profile_id: Int
}

"""
input type for inserting data into table "interaction_events"
"""
input interaction_events_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: Int
  created_at: timestamptz
  data: jsonb
  event_subtype: String
  event_type: String
  id: Int
  org_id: Int
  organization: organizations_obj_rel_insert_input
  profile: profiles_obj_rel_insert_input
  profile_id: Int
  updated_at: timestamptz
}

"""
aggregate max on columns
"""
type interaction_events_max_fields {
  circle_id: Int
  created_at: timestamptz
  event_subtype: String
  event_type: String
  id: Int
  org_id: Int
  profile_id: Int
  updated_at: timestamptz
}

"""
aggregate min on columns
"""
type interaction_events_min_fields {
  circle_id: Int
  created_at: timestamptz
  event_subtype: String
  event_type: String
  id: Int
  org_id: Int
  profile_id: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "interaction_events"
"""
type interaction_events_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [interaction_events!]!
}

"""
on_conflict condition type for table "interaction_events"
"""
input interaction_events_on_conflict {
  constraint: interaction_events_constraint!
  update_columns: [interaction_events_update_column!]! = []
  where: interaction_events_bool_exp
}

"""
Ordering options when selecting data from "interaction_events".
"""
input interaction_events_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  data: order_by
  event_subtype: order_by
  event_type: order_by
  id: order_by
  org_id: order_by
  organization: organizations_order_by
  profile: profiles_order_by
  profile_id: order_by
  updated_at: order_by
}

"""
primary key columns input for table: interaction_events
"""
input interaction_events_pk_columns_input {
  id: Int!
}

"""
prepend existing jsonb value of filtered columns with new jsonb value
"""
input interaction_events_prepend_input {
  data: jsonb
}

"""
select columns of table "interaction_events"
"""
enum interaction_events_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  data

  """
  column name
  """
  event_subtype

  """
  column name
  """
  event_type

  """
  column name
  """
  id

  """
  column name
  """
  org_id

  """
  column name
  """
  profile_id

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "interaction_events"
"""
input interaction_events_set_input {
  circle_id: Int
  created_at: timestamptz
  data: jsonb
  event_subtype: String
  event_type: String
  id: Int
  org_id: Int
  profile_id: Int
  updated_at: timestamptz
}

"""
aggregate stddev on columns
"""
type interaction_events_stddev_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

"""
aggregate stddev_pop on columns
"""
type interaction_events_stddev_pop_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

"""
aggregate stddev_samp on columns
"""
type interaction_events_stddev_samp_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

"""
Streaming cursor of the table "interaction_events"
"""
input interaction_events_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: interaction_events_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input interaction_events_stream_cursor_value_input {
  circle_id: Int
  created_at: timestamptz
  data: jsonb
  event_subtype: String
  event_type: String
  id: Int
  org_id: Int
  profile_id: Int
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type interaction_events_sum_fields {
  circle_id: Int
  id: Int
  org_id: Int
  profile_id: Int
}

"""
update columns of table "interaction_events"
"""
enum interaction_events_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  data

  """
  column name
  """
  event_subtype

  """
  column name
  """
  event_type

  """
  column name
  """
  id

  """
  column name
  """
  org_id

  """
  column name
  """
  profile_id

  """
  column name
  """
  updated_at
}

input interaction_events_updates {
  """
  append existing jsonb value of filtered columns with new jsonb value
  """
  _append: interaction_events_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: interaction_events_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: interaction_events_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: interaction_events_delete_key_input

  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: interaction_events_inc_input

  """
  prepend existing jsonb value of filtered columns with new jsonb value
  """
  _prepend: interaction_events_prepend_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: interaction_events_set_input
  where: interaction_events_bool_exp!
}

"""
aggregate var_pop on columns
"""
type interaction_events_var_pop_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

"""
aggregate var_samp on columns
"""
type interaction_events_var_samp_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

"""
aggregate variance on columns
"""
type interaction_events_variance_fields {
  circle_id: Float
  id: Float
  org_id: Float
  profile_id: Float
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """
  is the column contained in the given json value
  """
  _contained_in: jsonb

  """
  does the column contain the given json value at the top level
  """
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """
  does the string exist as a top-level key in the column
  """
  _has_key: String

  """
  do all of these strings exist as top-level keys in the column
  """
  _has_keys_all: [String!]

  """
  do any of these strings exist as top-level keys in the column
  """
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
mutation root
"""
type mutation_root {
  adminUpdateUser(payload: AdminUpdateUserInput!): UserResponse
  allocationCsv(payload: AllocationCsvInput!): AllocationCsvResponse
  createCircle(payload: CreateCircleInput!): CreateCircleResponse
  createEpoch(payload: CreateEpochInput!): EpochResponse
  createNominee(payload: CreateNomineeInput!): CreateNomineeResponse
  createUser(payload: CreateUserInput!): UserResponse
  createUserWithToken(payload: CreateUserWithTokenInput!): UserResponse
  createUsers(payload: CreateUsersInput!): [UserResponse]
  createVault(payload: CreateVaultInput!): VaultResponse

  """
  Log offchain information for vault transactions
  """
  createVaultTx(payload: LogVaultTxInput!): LogVaultTxResponse
  deleteCircle(payload: DeleteCircleInput!): ConfirmationResponse
  deleteContribution(payload: DeleteContributionInput!): ConfirmationResponse
  deleteEpoch(payload: DeleteEpochInput!): DeleteEpochResponse
  deleteUser(payload: DeleteUserInput!): ConfirmationResponse

  """
  delete data from the table: "burns"
  """
  delete_burns(
    """
    filter the rows which have to be deleted
    """
    where: burns_bool_exp!
  ): burns_mutation_response

  """
  delete single row from the table: "burns"
  """
  delete_burns_by_pk(id: bigint!): burns

  """
  delete data from the table: "circle_api_keys"
  """
  delete_circle_api_keys(
    """
    filter the rows which have to be deleted
    """
    where: circle_api_keys_bool_exp!
  ): circle_api_keys_mutation_response

  """
  delete single row from the table: "circle_api_keys"
  """
  delete_circle_api_keys_by_pk(hash: String!): circle_api_keys

  """
  delete data from the table: "circle_integrations"
  """
  delete_circle_integrations(
    """
    filter the rows which have to be deleted
    """
    where: circle_integrations_bool_exp!
  ): circle_integrations_mutation_response

  """
  delete single row from the table: "circle_integrations"
  """
  delete_circle_integrations_by_pk(id: bigint!): circle_integrations

  """
  delete data from the table: "circle_metadata"
  """
  delete_circle_metadata(
    """
    filter the rows which have to be deleted
    """
    where: circle_metadata_bool_exp!
  ): circle_metadata_mutation_response

  """
  delete single row from the table: "circle_metadata"
  """
  delete_circle_metadata_by_pk(id: bigint!): circle_metadata

  """
  delete data from the table: "circle_private"
  """
  delete_circle_private(
    """
    filter the rows which have to be deleted
    """
    where: circle_private_bool_exp!
  ): circle_private_mutation_response

  """
  delete data from the table: "circle_share_tokens"
  """
  delete_circle_share_tokens(
    """
    filter the rows which have to be deleted
    """
    where: circle_share_tokens_bool_exp!
  ): circle_share_tokens_mutation_response

  """
  delete single row from the table: "circle_share_tokens"
  """
  delete_circle_share_tokens_by_pk(
    circle_id: bigint!
    type: Int!
  ): circle_share_tokens

  """
  delete data from the table: "circles"
  """
  delete_circles(
    """
    filter the rows which have to be deleted
    """
    where: circles_bool_exp!
  ): circles_mutation_response

  """
  delete single row from the table: "circles"
  """
  delete_circles_by_pk(id: bigint!): circles

  """
  delete data from the table: "claims"
  """
  delete_claims(
    """
    filter the rows which have to be deleted
    """
    where: claims_bool_exp!
  ): claims_mutation_response

  """
  delete single row from the table: "claims"
  """
  delete_claims_by_pk(id: bigint!): claims

  """
  delete data from the table: "contributions"
  """
  delete_contributions(
    """
    filter the rows which have to be deleted
    """
    where: contributions_bool_exp!
  ): contributions_mutation_response

  """
  delete single row from the table: "contributions"
  """
  delete_contributions_by_pk(id: bigint!): contributions

  """
  delete data from the table: "distributions"
  """
  delete_distributions(
    """
    filter the rows which have to be deleted
    """
    where: distributions_bool_exp!
  ): distributions_mutation_response

  """
  delete single row from the table: "distributions"
  """
  delete_distributions_by_pk(id: bigint!): distributions

  """
  delete data from the table: "epoches"
  """
  delete_epochs(
    """
    filter the rows which have to be deleted
    """
    where: epochs_bool_exp!
  ): epochs_mutation_response

  """
  delete single row from the table: "epoches"
  """
  delete_epochs_by_pk(id: bigint!): epochs

  """
  delete data from the table: "gift_private"
  """
  delete_gift_private(
    """
    filter the rows which have to be deleted
    """
    where: gift_private_bool_exp!
  ): gift_private_mutation_response

  """
  delete data from the table: "histories"
  """
  delete_histories(
    """
    filter the rows which have to be deleted
    """
    where: histories_bool_exp!
  ): histories_mutation_response

  """
  delete single row from the table: "histories"
  """
  delete_histories_by_pk(id: bigint!): histories

  """
  delete data from the table: "interaction_events"
  """
  delete_interaction_events(
    """
    filter the rows which have to be deleted
    """
    where: interaction_events_bool_exp!
  ): interaction_events_mutation_response

  """
  delete single row from the table: "interaction_events"
  """
  delete_interaction_events_by_pk(id: Int!): interaction_events

  """
  delete data from the table: "nominees"
  """
  delete_nominees(
    """
    filter the rows which have to be deleted
    """
    where: nominees_bool_exp!
  ): nominees_mutation_response

  """
  delete single row from the table: "nominees"
  """
  delete_nominees_by_pk(id: bigint!): nominees

  """
  delete data from the table: "organizations"
  """
  delete_organizations(
    """
    filter the rows which have to be deleted
    """
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  delete single row from the table: "organizations"
  """
  delete_organizations_by_pk(id: bigint!): organizations

  """
  delete data from the table: "pending_gift_private"
  """
  delete_pending_gift_private(
    """
    filter the rows which have to be deleted
    """
    where: pending_gift_private_bool_exp!
  ): pending_gift_private_mutation_response

  """
  delete data from the table: "pending_token_gifts"
  """
  delete_pending_token_gifts(
    """
    filter the rows which have to be deleted
    """
    where: pending_token_gifts_bool_exp!
  ): pending_token_gifts_mutation_response

  """
  delete single row from the table: "pending_token_gifts"
  """
  delete_pending_token_gifts_by_pk(id: bigint!): pending_token_gifts

  """
  delete data from the table: "pending_vault_transactions"
  """
  delete_pending_vault_transactions(
    """
    filter the rows which have to be deleted
    """
    where: pending_vault_transactions_bool_exp!
  ): pending_vault_transactions_mutation_response

  """
  delete single row from the table: "pending_vault_transactions"
  """
  delete_pending_vault_transactions_by_pk(
    tx_hash: String!
  ): pending_vault_transactions

  """
  delete data from the table: "personal_access_tokens"
  """
  delete_personal_access_tokens(
    """
    filter the rows which have to be deleted
    """
    where: personal_access_tokens_bool_exp!
  ): personal_access_tokens_mutation_response

  """
  delete single row from the table: "personal_access_tokens"
  """
  delete_personal_access_tokens_by_pk(id: bigint!): personal_access_tokens

  """
  delete data from the table: "profiles"
  """
  delete_profiles(
    """
    filter the rows which have to be deleted
    """
    where: profiles_bool_exp!
  ): profiles_mutation_response

  """
  delete single row from the table: "profiles"
  """
  delete_profiles_by_pk(id: bigint!): profiles

  """
  delete data from the table: "teammates"
  """
  delete_teammates(
    """
    filter the rows which have to be deleted
    """
    where: teammates_bool_exp!
  ): teammates_mutation_response

  """
  delete single row from the table: "teammates"
  """
  delete_teammates_by_pk(id: bigint!): teammates

  """
  delete data from the table: "token_gifts"
  """
  delete_token_gifts(
    """
    filter the rows which have to be deleted
    """
    where: token_gifts_bool_exp!
  ): token_gifts_mutation_response

  """
  delete single row from the table: "token_gifts"
  """
  delete_token_gifts_by_pk(id: bigint!): token_gifts

  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: bigint!): users

  """
  delete data from the table: "vault_transactions"
  """
  delete_vault_transactions(
    """
    filter the rows which have to be deleted
    """
    where: vault_transactions_bool_exp!
  ): vault_transactions_mutation_response

  """
  delete single row from the table: "vault_transactions"
  """
  delete_vault_transactions_by_pk(id: bigint!): vault_transactions

  """
  delete data from the table: "vault_tx_types"
  """
  delete_vault_tx_types(
    """
    filter the rows which have to be deleted
    """
    where: vault_tx_types_bool_exp!
  ): vault_tx_types_mutation_response

  """
  delete single row from the table: "vault_tx_types"
  """
  delete_vault_tx_types_by_pk(value: String!): vault_tx_types

  """
  delete data from the table: "vaults"
  """
  delete_vaults(
    """
    filter the rows which have to be deleted
    """
    where: vaults_bool_exp!
  ): vaults_mutation_response

  """
  delete single row from the table: "vaults"
  """
  delete_vaults_by_pk(id: bigint!): vaults

  """
  delete data from the table: "vouches"
  """
  delete_vouches(
    """
    filter the rows which have to be deleted
    """
    where: vouches_bool_exp!
  ): vouches_mutation_response

  """
  delete single row from the table: "vouches"
  """
  delete_vouches_by_pk(id: bigint!): vouches

  """
  Generates an API key for a circle
  """
  generateApiKey(payload: GenerateApiKeyInput!): GenerateApiKeyResponse

  """
  insert data into the table: "burns"
  """
  insert_burns(
    """
    the rows to be inserted
    """
    objects: [burns_insert_input!]!

    """
    upsert condition
    """
    on_conflict: burns_on_conflict
  ): burns_mutation_response

  """
  insert a single row into the table: "burns"
  """
  insert_burns_one(
    """
    the row to be inserted
    """
    object: burns_insert_input!

    """
    upsert condition
    """
    on_conflict: burns_on_conflict
  ): burns

  """
  insert data into the table: "circle_api_keys"
  """
  insert_circle_api_keys(
    """
    the rows to be inserted
    """
    objects: [circle_api_keys_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circle_api_keys_on_conflict
  ): circle_api_keys_mutation_response

  """
  insert a single row into the table: "circle_api_keys"
  """
  insert_circle_api_keys_one(
    """
    the row to be inserted
    """
    object: circle_api_keys_insert_input!

    """
    upsert condition
    """
    on_conflict: circle_api_keys_on_conflict
  ): circle_api_keys

  """
  insert data into the table: "circle_integrations"
  """
  insert_circle_integrations(
    """
    the rows to be inserted
    """
    objects: [circle_integrations_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circle_integrations_on_conflict
  ): circle_integrations_mutation_response

  """
  insert a single row into the table: "circle_integrations"
  """
  insert_circle_integrations_one(
    """
    the row to be inserted
    """
    object: circle_integrations_insert_input!

    """
    upsert condition
    """
    on_conflict: circle_integrations_on_conflict
  ): circle_integrations

  """
  insert data into the table: "circle_metadata"
  """
  insert_circle_metadata(
    """
    the rows to be inserted
    """
    objects: [circle_metadata_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circle_metadata_on_conflict
  ): circle_metadata_mutation_response

  """
  insert a single row into the table: "circle_metadata"
  """
  insert_circle_metadata_one(
    """
    the row to be inserted
    """
    object: circle_metadata_insert_input!

    """
    upsert condition
    """
    on_conflict: circle_metadata_on_conflict
  ): circle_metadata

  """
  insert data into the table: "circle_private"
  """
  insert_circle_private(
    """
    the rows to be inserted
    """
    objects: [circle_private_insert_input!]!
  ): circle_private_mutation_response

  """
  insert a single row into the table: "circle_private"
  """
  insert_circle_private_one(
    """
    the row to be inserted
    """
    object: circle_private_insert_input!
  ): circle_private

  """
  insert data into the table: "circle_share_tokens"
  """
  insert_circle_share_tokens(
    """
    the rows to be inserted
    """
    objects: [circle_share_tokens_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circle_share_tokens_on_conflict
  ): circle_share_tokens_mutation_response

  """
  insert a single row into the table: "circle_share_tokens"
  """
  insert_circle_share_tokens_one(
    """
    the row to be inserted
    """
    object: circle_share_tokens_insert_input!

    """
    upsert condition
    """
    on_conflict: circle_share_tokens_on_conflict
  ): circle_share_tokens

  """
  insert data into the table: "circles"
  """
  insert_circles(
    """
    the rows to be inserted
    """
    objects: [circles_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circles_on_conflict
  ): circles_mutation_response

  """
  insert a single row into the table: "circles"
  """
  insert_circles_one(
    """
    the row to be inserted
    """
    object: circles_insert_input!

    """
    upsert condition
    """
    on_conflict: circles_on_conflict
  ): circles

  """
  insert data into the table: "claims"
  """
  insert_claims(
    """
    the rows to be inserted
    """
    objects: [claims_insert_input!]!

    """
    upsert condition
    """
    on_conflict: claims_on_conflict
  ): claims_mutation_response

  """
  insert a single row into the table: "claims"
  """
  insert_claims_one(
    """
    the row to be inserted
    """
    object: claims_insert_input!

    """
    upsert condition
    """
    on_conflict: claims_on_conflict
  ): claims

  """
  insert data into the table: "contributions"
  """
  insert_contributions(
    """
    the rows to be inserted
    """
    objects: [contributions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: contributions_on_conflict
  ): contributions_mutation_response

  """
  insert a single row into the table: "contributions"
  """
  insert_contributions_one(
    """
    the row to be inserted
    """
    object: contributions_insert_input!

    """
    upsert condition
    """
    on_conflict: contributions_on_conflict
  ): contributions

  """
  insert data into the table: "distributions"
  """
  insert_distributions(
    """
    the rows to be inserted
    """
    objects: [distributions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: distributions_on_conflict
  ): distributions_mutation_response

  """
  insert a single row into the table: "distributions"
  """
  insert_distributions_one(
    """
    the row to be inserted
    """
    object: distributions_insert_input!

    """
    upsert condition
    """
    on_conflict: distributions_on_conflict
  ): distributions

  """
  insert data into the table: "epoches"
  """
  insert_epochs(
    """
    the rows to be inserted
    """
    objects: [epochs_insert_input!]!

    """
    upsert condition
    """
    on_conflict: epochs_on_conflict
  ): epochs_mutation_response

  """
  insert a single row into the table: "epoches"
  """
  insert_epochs_one(
    """
    the row to be inserted
    """
    object: epochs_insert_input!

    """
    upsert condition
    """
    on_conflict: epochs_on_conflict
  ): epochs

  """
  insert data into the table: "gift_private"
  """
  insert_gift_private(
    """
    the rows to be inserted
    """
    objects: [gift_private_insert_input!]!
  ): gift_private_mutation_response

  """
  insert a single row into the table: "gift_private"
  """
  insert_gift_private_one(
    """
    the row to be inserted
    """
    object: gift_private_insert_input!
  ): gift_private

  """
  insert data into the table: "histories"
  """
  insert_histories(
    """
    the rows to be inserted
    """
    objects: [histories_insert_input!]!

    """
    upsert condition
    """
    on_conflict: histories_on_conflict
  ): histories_mutation_response

  """
  insert a single row into the table: "histories"
  """
  insert_histories_one(
    """
    the row to be inserted
    """
    object: histories_insert_input!

    """
    upsert condition
    """
    on_conflict: histories_on_conflict
  ): histories

  """
  insert data into the table: "interaction_events"
  """
  insert_interaction_events(
    """
    the rows to be inserted
    """
    objects: [interaction_events_insert_input!]!

    """
    upsert condition
    """
    on_conflict: interaction_events_on_conflict
  ): interaction_events_mutation_response

  """
  insert a single row into the table: "interaction_events"
  """
  insert_interaction_events_one(
    """
    the row to be inserted
    """
    object: interaction_events_insert_input!

    """
    upsert condition
    """
    on_conflict: interaction_events_on_conflict
  ): interaction_events

  """
  insert data into the table: "nominees"
  """
  insert_nominees(
    """
    the rows to be inserted
    """
    objects: [nominees_insert_input!]!

    """
    upsert condition
    """
    on_conflict: nominees_on_conflict
  ): nominees_mutation_response

  """
  insert a single row into the table: "nominees"
  """
  insert_nominees_one(
    """
    the row to be inserted
    """
    object: nominees_insert_input!

    """
    upsert condition
    """
    on_conflict: nominees_on_conflict
  ): nominees

  """
  insert data into the table: "organizations"
  """
  insert_organizations(
    """
    the rows to be inserted
    """
    objects: [organizations_insert_input!]!

    """
    upsert condition
    """
    on_conflict: organizations_on_conflict
  ): organizations_mutation_response

  """
  insert a single row into the table: "organizations"
  """
  insert_organizations_one(
    """
    the row to be inserted
    """
    object: organizations_insert_input!

    """
    upsert condition
    """
    on_conflict: organizations_on_conflict
  ): organizations

  """
  insert data into the table: "pending_gift_private"
  """
  insert_pending_gift_private(
    """
    the rows to be inserted
    """
    objects: [pending_gift_private_insert_input!]!
  ): pending_gift_private_mutation_response

  """
  insert a single row into the table: "pending_gift_private"
  """
  insert_pending_gift_private_one(
    """
    the row to be inserted
    """
    object: pending_gift_private_insert_input!
  ): pending_gift_private

  """
  insert data into the table: "pending_token_gifts"
  """
  insert_pending_token_gifts(
    """
    the rows to be inserted
    """
    objects: [pending_token_gifts_insert_input!]!

    """
    upsert condition
    """
    on_conflict: pending_token_gifts_on_conflict
  ): pending_token_gifts_mutation_response

  """
  insert a single row into the table: "pending_token_gifts"
  """
  insert_pending_token_gifts_one(
    """
    the row to be inserted
    """
    object: pending_token_gifts_insert_input!

    """
    upsert condition
    """
    on_conflict: pending_token_gifts_on_conflict
  ): pending_token_gifts

  """
  insert data into the table: "pending_vault_transactions"
  """
  insert_pending_vault_transactions(
    """
    the rows to be inserted
    """
    objects: [pending_vault_transactions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: pending_vault_transactions_on_conflict
  ): pending_vault_transactions_mutation_response

  """
  insert a single row into the table: "pending_vault_transactions"
  """
  insert_pending_vault_transactions_one(
    """
    the row to be inserted
    """
    object: pending_vault_transactions_insert_input!

    """
    upsert condition
    """
    on_conflict: pending_vault_transactions_on_conflict
  ): pending_vault_transactions

  """
  insert data into the table: "personal_access_tokens"
  """
  insert_personal_access_tokens(
    """
    the rows to be inserted
    """
    objects: [personal_access_tokens_insert_input!]!

    """
    upsert condition
    """
    on_conflict: personal_access_tokens_on_conflict
  ): personal_access_tokens_mutation_response

  """
  insert a single row into the table: "personal_access_tokens"
  """
  insert_personal_access_tokens_one(
    """
    the row to be inserted
    """
    object: personal_access_tokens_insert_input!

    """
    upsert condition
    """
    on_conflict: personal_access_tokens_on_conflict
  ): personal_access_tokens

  """
  insert data into the table: "profiles"
  """
  insert_profiles(
    """
    the rows to be inserted
    """
    objects: [profiles_insert_input!]!

    """
    upsert condition
    """
    on_conflict: profiles_on_conflict
  ): profiles_mutation_response

  """
  insert a single row into the table: "profiles"
  """
  insert_profiles_one(
    """
    the row to be inserted
    """
    object: profiles_insert_input!

    """
    upsert condition
    """
    on_conflict: profiles_on_conflict
  ): profiles

  """
  insert data into the table: "teammates"
  """
  insert_teammates(
    """
    the rows to be inserted
    """
    objects: [teammates_insert_input!]!

    """
    upsert condition
    """
    on_conflict: teammates_on_conflict
  ): teammates_mutation_response

  """
  insert a single row into the table: "teammates"
  """
  insert_teammates_one(
    """
    the row to be inserted
    """
    object: teammates_insert_input!

    """
    upsert condition
    """
    on_conflict: teammates_on_conflict
  ): teammates

  """
  insert data into the table: "token_gifts"
  """
  insert_token_gifts(
    """
    the rows to be inserted
    """
    objects: [token_gifts_insert_input!]!

    """
    upsert condition
    """
    on_conflict: token_gifts_on_conflict
  ): token_gifts_mutation_response

  """
  insert a single row into the table: "token_gifts"
  """
  insert_token_gifts_one(
    """
    the row to be inserted
    """
    object: token_gifts_insert_input!

    """
    upsert condition
    """
    on_conflict: token_gifts_on_conflict
  ): token_gifts

  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!

    """
    upsert condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """
    the row to be inserted
    """
    object: users_insert_input!

    """
    upsert condition
    """
    on_conflict: users_on_conflict
  ): users

  """
  insert data into the table: "vault_transactions"
  """
  insert_vault_transactions(
    """
    the rows to be inserted
    """
    objects: [vault_transactions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: vault_transactions_on_conflict
  ): vault_transactions_mutation_response

  """
  insert a single row into the table: "vault_transactions"
  """
  insert_vault_transactions_one(
    """
    the row to be inserted
    """
    object: vault_transactions_insert_input!

    """
    upsert condition
    """
    on_conflict: vault_transactions_on_conflict
  ): vault_transactions

  """
  insert data into the table: "vault_tx_types"
  """
  insert_vault_tx_types(
    """
    the rows to be inserted
    """
    objects: [vault_tx_types_insert_input!]!

    """
    upsert condition
    """
    on_conflict: vault_tx_types_on_conflict
  ): vault_tx_types_mutation_response

  """
  insert a single row into the table: "vault_tx_types"
  """
  insert_vault_tx_types_one(
    """
    the row to be inserted
    """
    object: vault_tx_types_insert_input!

    """
    upsert condition
    """
    on_conflict: vault_tx_types_on_conflict
  ): vault_tx_types

  """
  insert data into the table: "vaults"
  """
  insert_vaults(
    """
    the rows to be inserted
    """
    objects: [vaults_insert_input!]!

    """
    upsert condition
    """
    on_conflict: vaults_on_conflict
  ): vaults_mutation_response

  """
  insert a single row into the table: "vaults"
  """
  insert_vaults_one(
    """
    the row to be inserted
    """
    object: vaults_insert_input!

    """
    upsert condition
    """
    on_conflict: vaults_on_conflict
  ): vaults

  """
  insert data into the table: "vouches"
  """
  insert_vouches(
    """
    the rows to be inserted
    """
    objects: [vouches_insert_input!]!

    """
    upsert condition
    """
    on_conflict: vouches_on_conflict
  ): vouches_mutation_response

  """
  insert a single row into the table: "vouches"
  """
  insert_vouches_one(
    """
    the row to be inserted
    """
    object: vouches_insert_input!

    """
    upsert condition
    """
    on_conflict: vouches_on_conflict
  ): vouches
  logoutUser: LogoutResponse
  markClaimed(payload: MarkClaimedInput!): MarkClaimedOutput
  restoreCoordinape(payload: CoordinapeInput!): ConfirmationResponse
  updateAllocations(payload: Allocations!): AllocationsResponse
  updateCircle(payload: UpdateCircleInput!): UpdateCircleOutput

  """
  users can modify contributions and update their dates.
  """
  updateContribution(
    payload: UpdateContributionInput!
  ): UpdateContributionResponse
  updateEpoch(payload: UpdateEpochInput!): EpochResponse
  updateTeammates(payload: UpdateTeammatesInput!): UpdateTeammatesResponse

  """
  Update own user
  """
  updateUser(payload: UpdateUserInput!): UserResponse

  """
  update data of the table: "burns"
  """
  update_burns(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: burns_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: burns_set_input

    """
    filter the rows which have to be updated
    """
    where: burns_bool_exp!
  ): burns_mutation_response

  """
  update single row of the table: "burns"
  """
  update_burns_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: burns_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: burns_set_input
    pk_columns: burns_pk_columns_input!
  ): burns

  """
  update multiples rows of table: "burns"
  """
  update_burns_many(
    """
    updates to execute, in order
    """
    updates: [burns_updates!]!
  ): [burns_mutation_response]

  """
  update data of the table: "circle_api_keys"
  """
  update_circle_api_keys(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_api_keys_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_api_keys_set_input

    """
    filter the rows which have to be updated
    """
    where: circle_api_keys_bool_exp!
  ): circle_api_keys_mutation_response

  """
  update single row of the table: "circle_api_keys"
  """
  update_circle_api_keys_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_api_keys_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_api_keys_set_input
    pk_columns: circle_api_keys_pk_columns_input!
  ): circle_api_keys

  """
  update multiples rows of table: "circle_api_keys"
  """
  update_circle_api_keys_many(
    """
    updates to execute, in order
    """
    updates: [circle_api_keys_updates!]!
  ): [circle_api_keys_mutation_response]

  """
  update data of the table: "circle_integrations"
  """
  update_circle_integrations(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_integrations_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_integrations_set_input

    """
    filter the rows which have to be updated
    """
    where: circle_integrations_bool_exp!
  ): circle_integrations_mutation_response

  """
  update single row of the table: "circle_integrations"
  """
  update_circle_integrations_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_integrations_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_integrations_set_input
    pk_columns: circle_integrations_pk_columns_input!
  ): circle_integrations

  """
  update multiples rows of table: "circle_integrations"
  """
  update_circle_integrations_many(
    """
    updates to execute, in order
    """
    updates: [circle_integrations_updates!]!
  ): [circle_integrations_mutation_response]

  """
  update data of the table: "circle_metadata"
  """
  update_circle_metadata(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_metadata_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_metadata_set_input

    """
    filter the rows which have to be updated
    """
    where: circle_metadata_bool_exp!
  ): circle_metadata_mutation_response

  """
  update single row of the table: "circle_metadata"
  """
  update_circle_metadata_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_metadata_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_metadata_set_input
    pk_columns: circle_metadata_pk_columns_input!
  ): circle_metadata

  """
  update multiples rows of table: "circle_metadata"
  """
  update_circle_metadata_many(
    """
    updates to execute, in order
    """
    updates: [circle_metadata_updates!]!
  ): [circle_metadata_mutation_response]

  """
  update data of the table: "circle_private"
  """
  update_circle_private(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_private_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_private_set_input

    """
    filter the rows which have to be updated
    """
    where: circle_private_bool_exp!
  ): circle_private_mutation_response

  """
  update multiples rows of table: "circle_private"
  """
  update_circle_private_many(
    """
    updates to execute, in order
    """
    updates: [circle_private_updates!]!
  ): [circle_private_mutation_response]

  """
  update data of the table: "circle_share_tokens"
  """
  update_circle_share_tokens(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_share_tokens_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_share_tokens_set_input

    """
    filter the rows which have to be updated
    """
    where: circle_share_tokens_bool_exp!
  ): circle_share_tokens_mutation_response

  """
  update single row of the table: "circle_share_tokens"
  """
  update_circle_share_tokens_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circle_share_tokens_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_share_tokens_set_input
    pk_columns: circle_share_tokens_pk_columns_input!
  ): circle_share_tokens

  """
  update multiples rows of table: "circle_share_tokens"
  """
  update_circle_share_tokens_many(
    """
    updates to execute, in order
    """
    updates: [circle_share_tokens_updates!]!
  ): [circle_share_tokens_mutation_response]

  """
  update data of the table: "circles"
  """
  update_circles(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circles_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circles_set_input

    """
    filter the rows which have to be updated
    """
    where: circles_bool_exp!
  ): circles_mutation_response

  """
  update single row of the table: "circles"
  """
  update_circles_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: circles_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: circles_set_input
    pk_columns: circles_pk_columns_input!
  ): circles

  """
  update multiples rows of table: "circles"
  """
  update_circles_many(
    """
    updates to execute, in order
    """
    updates: [circles_updates!]!
  ): [circles_mutation_response]

  """
  update data of the table: "claims"
  """
  update_claims(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: claims_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: claims_set_input

    """
    filter the rows which have to be updated
    """
    where: claims_bool_exp!
  ): claims_mutation_response

  """
  update single row of the table: "claims"
  """
  update_claims_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: claims_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: claims_set_input
    pk_columns: claims_pk_columns_input!
  ): claims

  """
  update multiples rows of table: "claims"
  """
  update_claims_many(
    """
    updates to execute, in order
    """
    updates: [claims_updates!]!
  ): [claims_mutation_response]

  """
  update data of the table: "contributions"
  """
  update_contributions(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: contributions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: contributions_set_input

    """
    filter the rows which have to be updated
    """
    where: contributions_bool_exp!
  ): contributions_mutation_response

  """
  update single row of the table: "contributions"
  """
  update_contributions_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: contributions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: contributions_set_input
    pk_columns: contributions_pk_columns_input!
  ): contributions

  """
  update multiples rows of table: "contributions"
  """
  update_contributions_many(
    """
    updates to execute, in order
    """
    updates: [contributions_updates!]!
  ): [contributions_mutation_response]

  """
  update data of the table: "distributions"
  """
  update_distributions(
    """
    append existing jsonb value of filtered columns with new jsonb value
    """
    _append: distributions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: distributions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: distributions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: distributions_delete_key_input

    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: distributions_inc_input

    """
    prepend existing jsonb value of filtered columns with new jsonb value
    """
    _prepend: distributions_prepend_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: distributions_set_input

    """
    filter the rows which have to be updated
    """
    where: distributions_bool_exp!
  ): distributions_mutation_response

  """
  update single row of the table: "distributions"
  """
  update_distributions_by_pk(
    """
    append existing jsonb value of filtered columns with new jsonb value
    """
    _append: distributions_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: distributions_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: distributions_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: distributions_delete_key_input

    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: distributions_inc_input

    """
    prepend existing jsonb value of filtered columns with new jsonb value
    """
    _prepend: distributions_prepend_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: distributions_set_input
    pk_columns: distributions_pk_columns_input!
  ): distributions

  """
  update multiples rows of table: "distributions"
  """
  update_distributions_many(
    """
    updates to execute, in order
    """
    updates: [distributions_updates!]!
  ): [distributions_mutation_response]

  """
  update data of the table: "epoches"
  """
  update_epochs(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: epochs_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: epochs_set_input

    """
    filter the rows which have to be updated
    """
    where: epochs_bool_exp!
  ): epochs_mutation_response

  """
  update single row of the table: "epoches"
  """
  update_epochs_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: epochs_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: epochs_set_input
    pk_columns: epochs_pk_columns_input!
  ): epochs

  """
  update multiples rows of table: "epoches"
  """
  update_epochs_many(
    """
    updates to execute, in order
    """
    updates: [epochs_updates!]!
  ): [epochs_mutation_response]

  """
  update data of the table: "gift_private"
  """
  update_gift_private(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: gift_private_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: gift_private_set_input

    """
    filter the rows which have to be updated
    """
    where: gift_private_bool_exp!
  ): gift_private_mutation_response

  """
  update multiples rows of table: "gift_private"
  """
  update_gift_private_many(
    """
    updates to execute, in order
    """
    updates: [gift_private_updates!]!
  ): [gift_private_mutation_response]

  """
  update data of the table: "histories"
  """
  update_histories(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: histories_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: histories_set_input

    """
    filter the rows which have to be updated
    """
    where: histories_bool_exp!
  ): histories_mutation_response

  """
  update single row of the table: "histories"
  """
  update_histories_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: histories_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: histories_set_input
    pk_columns: histories_pk_columns_input!
  ): histories

  """
  update multiples rows of table: "histories"
  """
  update_histories_many(
    """
    updates to execute, in order
    """
    updates: [histories_updates!]!
  ): [histories_mutation_response]

  """
  update data of the table: "interaction_events"
  """
  update_interaction_events(
    """
    append existing jsonb value of filtered columns with new jsonb value
    """
    _append: interaction_events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: interaction_events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: interaction_events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: interaction_events_delete_key_input

    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: interaction_events_inc_input

    """
    prepend existing jsonb value of filtered columns with new jsonb value
    """
    _prepend: interaction_events_prepend_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: interaction_events_set_input

    """
    filter the rows which have to be updated
    """
    where: interaction_events_bool_exp!
  ): interaction_events_mutation_response

  """
  update single row of the table: "interaction_events"
  """
  update_interaction_events_by_pk(
    """
    append existing jsonb value of filtered columns with new jsonb value
    """
    _append: interaction_events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: interaction_events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: interaction_events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: interaction_events_delete_key_input

    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: interaction_events_inc_input

    """
    prepend existing jsonb value of filtered columns with new jsonb value
    """
    _prepend: interaction_events_prepend_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: interaction_events_set_input
    pk_columns: interaction_events_pk_columns_input!
  ): interaction_events

  """
  update multiples rows of table: "interaction_events"
  """
  update_interaction_events_many(
    """
    updates to execute, in order
    """
    updates: [interaction_events_updates!]!
  ): [interaction_events_mutation_response]

  """
  update data of the table: "nominees"
  """
  update_nominees(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: nominees_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: nominees_set_input

    """
    filter the rows which have to be updated
    """
    where: nominees_bool_exp!
  ): nominees_mutation_response

  """
  update single row of the table: "nominees"
  """
  update_nominees_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: nominees_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: nominees_set_input
    pk_columns: nominees_pk_columns_input!
  ): nominees

  """
  update multiples rows of table: "nominees"
  """
  update_nominees_many(
    """
    updates to execute, in order
    """
    updates: [nominees_updates!]!
  ): [nominees_mutation_response]

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: organizations_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: organizations_set_input

    """
    filter the rows which have to be updated
    """
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: organizations_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update multiples rows of table: "organizations"
  """
  update_organizations_many(
    """
    updates to execute, in order
    """
    updates: [organizations_updates!]!
  ): [organizations_mutation_response]

  """
  update data of the table: "pending_gift_private"
  """
  update_pending_gift_private(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: pending_gift_private_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pending_gift_private_set_input

    """
    filter the rows which have to be updated
    """
    where: pending_gift_private_bool_exp!
  ): pending_gift_private_mutation_response

  """
  update multiples rows of table: "pending_gift_private"
  """
  update_pending_gift_private_many(
    """
    updates to execute, in order
    """
    updates: [pending_gift_private_updates!]!
  ): [pending_gift_private_mutation_response]

  """
  update data of the table: "pending_token_gifts"
  """
  update_pending_token_gifts(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: pending_token_gifts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pending_token_gifts_set_input

    """
    filter the rows which have to be updated
    """
    where: pending_token_gifts_bool_exp!
  ): pending_token_gifts_mutation_response

  """
  update single row of the table: "pending_token_gifts"
  """
  update_pending_token_gifts_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: pending_token_gifts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pending_token_gifts_set_input
    pk_columns: pending_token_gifts_pk_columns_input!
  ): pending_token_gifts

  """
  update multiples rows of table: "pending_token_gifts"
  """
  update_pending_token_gifts_many(
    """
    updates to execute, in order
    """
    updates: [pending_token_gifts_updates!]!
  ): [pending_token_gifts_mutation_response]

  """
  update data of the table: "pending_vault_transactions"
  """
  update_pending_vault_transactions(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: pending_vault_transactions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pending_vault_transactions_set_input

    """
    filter the rows which have to be updated
    """
    where: pending_vault_transactions_bool_exp!
  ): pending_vault_transactions_mutation_response

  """
  update single row of the table: "pending_vault_transactions"
  """
  update_pending_vault_transactions_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: pending_vault_transactions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: pending_vault_transactions_set_input
    pk_columns: pending_vault_transactions_pk_columns_input!
  ): pending_vault_transactions

  """
  update multiples rows of table: "pending_vault_transactions"
  """
  update_pending_vault_transactions_many(
    """
    updates to execute, in order
    """
    updates: [pending_vault_transactions_updates!]!
  ): [pending_vault_transactions_mutation_response]

  """
  update data of the table: "personal_access_tokens"
  """
  update_personal_access_tokens(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: personal_access_tokens_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: personal_access_tokens_set_input

    """
    filter the rows which have to be updated
    """
    where: personal_access_tokens_bool_exp!
  ): personal_access_tokens_mutation_response

  """
  update single row of the table: "personal_access_tokens"
  """
  update_personal_access_tokens_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: personal_access_tokens_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: personal_access_tokens_set_input
    pk_columns: personal_access_tokens_pk_columns_input!
  ): personal_access_tokens

  """
  update multiples rows of table: "personal_access_tokens"
  """
  update_personal_access_tokens_many(
    """
    updates to execute, in order
    """
    updates: [personal_access_tokens_updates!]!
  ): [personal_access_tokens_mutation_response]

  """
  update data of the table: "profiles"
  """
  update_profiles(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: profiles_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: profiles_set_input

    """
    filter the rows which have to be updated
    """
    where: profiles_bool_exp!
  ): profiles_mutation_response

  """
  update single row of the table: "profiles"
  """
  update_profiles_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: profiles_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: profiles_set_input
    pk_columns: profiles_pk_columns_input!
  ): profiles

  """
  update multiples rows of table: "profiles"
  """
  update_profiles_many(
    """
    updates to execute, in order
    """
    updates: [profiles_updates!]!
  ): [profiles_mutation_response]

  """
  update data of the table: "teammates"
  """
  update_teammates(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: teammates_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: teammates_set_input

    """
    filter the rows which have to be updated
    """
    where: teammates_bool_exp!
  ): teammates_mutation_response

  """
  update single row of the table: "teammates"
  """
  update_teammates_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: teammates_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: teammates_set_input
    pk_columns: teammates_pk_columns_input!
  ): teammates

  """
  update multiples rows of table: "teammates"
  """
  update_teammates_many(
    """
    updates to execute, in order
    """
    updates: [teammates_updates!]!
  ): [teammates_mutation_response]

  """
  update data of the table: "token_gifts"
  """
  update_token_gifts(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: token_gifts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: token_gifts_set_input

    """
    filter the rows which have to be updated
    """
    where: token_gifts_bool_exp!
  ): token_gifts_mutation_response

  """
  update single row of the table: "token_gifts"
  """
  update_token_gifts_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: token_gifts_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: token_gifts_set_input
    pk_columns: token_gifts_pk_columns_input!
  ): token_gifts

  """
  update multiples rows of table: "token_gifts"
  """
  update_token_gifts_many(
    """
    updates to execute, in order
    """
    updates: [token_gifts_updates!]!
  ): [token_gifts_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input

    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: users_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """
    updates to execute, in order
    """
    updates: [users_updates!]!
  ): [users_mutation_response]

  """
  update data of the table: "vault_transactions"
  """
  update_vault_transactions(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: vault_transactions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: vault_transactions_set_input

    """
    filter the rows which have to be updated
    """
    where: vault_transactions_bool_exp!
  ): vault_transactions_mutation_response

  """
  update single row of the table: "vault_transactions"
  """
  update_vault_transactions_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: vault_transactions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: vault_transactions_set_input
    pk_columns: vault_transactions_pk_columns_input!
  ): vault_transactions

  """
  update multiples rows of table: "vault_transactions"
  """
  update_vault_transactions_many(
    """
    updates to execute, in order
    """
    updates: [vault_transactions_updates!]!
  ): [vault_transactions_mutation_response]

  """
  update data of the table: "vault_tx_types"
  """
  update_vault_tx_types(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: vault_tx_types_set_input

    """
    filter the rows which have to be updated
    """
    where: vault_tx_types_bool_exp!
  ): vault_tx_types_mutation_response

  """
  update single row of the table: "vault_tx_types"
  """
  update_vault_tx_types_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: vault_tx_types_set_input
    pk_columns: vault_tx_types_pk_columns_input!
  ): vault_tx_types

  """
  update multiples rows of table: "vault_tx_types"
  """
  update_vault_tx_types_many(
    """
    updates to execute, in order
    """
    updates: [vault_tx_types_updates!]!
  ): [vault_tx_types_mutation_response]

  """
  update data of the table: "vaults"
  """
  update_vaults(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: vaults_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: vaults_set_input

    """
    filter the rows which have to be updated
    """
    where: vaults_bool_exp!
  ): vaults_mutation_response

  """
  update single row of the table: "vaults"
  """
  update_vaults_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: vaults_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: vaults_set_input
    pk_columns: vaults_pk_columns_input!
  ): vaults

  """
  update multiples rows of table: "vaults"
  """
  update_vaults_many(
    """
    updates to execute, in order
    """
    updates: [vaults_updates!]!
  ): [vaults_mutation_response]

  """
  update data of the table: "vouches"
  """
  update_vouches(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: vouches_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: vouches_set_input

    """
    filter the rows which have to be updated
    """
    where: vouches_bool_exp!
  ): vouches_mutation_response

  """
  update single row of the table: "vouches"
  """
  update_vouches_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: vouches_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: vouches_set_input
    pk_columns: vouches_pk_columns_input!
  ): vouches

  """
  update multiples rows of table: "vouches"
  """
  update_vouches_many(
    """
    updates to execute, in order
    """
    updates: [vouches_updates!]!
  ): [vouches_mutation_response]
  uploadCircleLogo(payload: UploadCircleImageInput!): UpdateCircleResponse
  uploadOrgLogo(payload: UploadOrgImageInput!): UpdateOrgResponse
  uploadProfileAvatar(payload: UploadImageInput!): UpdateProfileResponse
  uploadProfileBackground(payload: UploadImageInput!): UpdateProfileResponse
  vouch(payload: VouchInput!): VouchOutput
}

"""
columns and relationships of "nominees"
"""
type nominees {
  address: String!

  """
  An object relationship
  """
  circle: circles
  circle_id: Int!
  created_at: timestamp!
  description: String!
  ended: Boolean!
  expiry_date: timestamp!
  id: bigint!
  name: String!
  nominated_by_user_id: Int!
  nominated_date: date!

  """
  An array relationship
  """
  nominations(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  An aggregate relationship
  """
  nominations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): vouches_aggregate!

  """
  An object relationship
  """
  nominator: users
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int
  vouches_required: Int!
}

"""
aggregated selection of "nominees"
"""
type nominees_aggregate {
  aggregate: nominees_aggregate_fields
  nodes: [nominees!]!
}

"""
aggregate fields of "nominees"
"""
type nominees_aggregate_fields {
  avg: nominees_avg_fields
  count(columns: [nominees_select_column!], distinct: Boolean): Int!
  max: nominees_max_fields
  min: nominees_min_fields
  stddev: nominees_stddev_fields
  stddev_pop: nominees_stddev_pop_fields
  stddev_samp: nominees_stddev_samp_fields
  sum: nominees_sum_fields
  var_pop: nominees_var_pop_fields
  var_samp: nominees_var_samp_fields
  variance: nominees_variance_fields
}

"""
order by aggregate values of table "nominees"
"""
input nominees_aggregate_order_by {
  avg: nominees_avg_order_by
  count: order_by
  max: nominees_max_order_by
  min: nominees_min_order_by
  stddev: nominees_stddev_order_by
  stddev_pop: nominees_stddev_pop_order_by
  stddev_samp: nominees_stddev_samp_order_by
  sum: nominees_sum_order_by
  var_pop: nominees_var_pop_order_by
  var_samp: nominees_var_samp_order_by
  variance: nominees_variance_order_by
}

"""
input type for inserting array relation for remote table "nominees"
"""
input nominees_arr_rel_insert_input {
  data: [nominees_insert_input!]!

  """
  upsert condition
  """
  on_conflict: nominees_on_conflict
}

"""
aggregate avg on columns
"""
type nominees_avg_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by avg() on columns of table "nominees"
"""
input nominees_avg_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
Boolean expression to filter rows from the table "nominees". All fields are combined with a logical 'AND'.
"""
input nominees_bool_exp {
  _and: [nominees_bool_exp!]
  _not: nominees_bool_exp
  _or: [nominees_bool_exp!]
  address: String_comparison_exp
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  ended: Boolean_comparison_exp
  expiry_date: timestamp_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  nominated_by_user_id: Int_comparison_exp
  nominated_date: date_comparison_exp
  nominations: vouches_bool_exp
  nominator: users_bool_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
  vouches_required: Int_comparison_exp
}

"""
unique or primary key constraints on table "nominees"
"""
enum nominees_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  nominees_pkey
}

"""
input type for incrementing numeric columns in table "nominees"
"""
input nominees_inc_input {
  circle_id: Int
  id: bigint
  nominated_by_user_id: Int
  user_id: Int
  vouches_required: Int
}

"""
input type for inserting data into table "nominees"
"""
input nominees_insert_input {
  address: String
  circle: circles_obj_rel_insert_input
  circle_id: Int
  created_at: timestamp
  description: String
  ended: Boolean
  expiry_date: timestamp
  id: bigint
  name: String
  nominated_by_user_id: Int
  nominated_date: date
  nominations: vouches_arr_rel_insert_input
  nominator: users_obj_rel_insert_input
  updated_at: timestamp
  user: users_obj_rel_insert_input
  user_id: Int
  vouches_required: Int
}

"""
aggregate max on columns
"""
type nominees_max_fields {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  expiry_date: timestamp
  id: bigint
  name: String
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
order by max() on columns of table "nominees"
"""
input nominees_max_order_by {
  address: order_by
  circle_id: order_by
  created_at: order_by
  description: order_by
  expiry_date: order_by
  id: order_by
  name: order_by
  nominated_by_user_id: order_by
  nominated_date: order_by
  updated_at: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate min on columns
"""
type nominees_min_fields {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  expiry_date: timestamp
  id: bigint
  name: String
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
order by min() on columns of table "nominees"
"""
input nominees_min_order_by {
  address: order_by
  circle_id: order_by
  created_at: order_by
  description: order_by
  expiry_date: order_by
  id: order_by
  name: order_by
  nominated_by_user_id: order_by
  nominated_date: order_by
  updated_at: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
response of any mutation on the table "nominees"
"""
type nominees_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [nominees!]!
}

"""
input type for inserting object relation for remote table "nominees"
"""
input nominees_obj_rel_insert_input {
  data: nominees_insert_input!

  """
  upsert condition
  """
  on_conflict: nominees_on_conflict
}

"""
on_conflict condition type for table "nominees"
"""
input nominees_on_conflict {
  constraint: nominees_constraint!
  update_columns: [nominees_update_column!]! = []
  where: nominees_bool_exp
}

"""
Ordering options when selecting data from "nominees".
"""
input nominees_order_by {
  address: order_by
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  description: order_by
  ended: order_by
  expiry_date: order_by
  id: order_by
  name: order_by
  nominated_by_user_id: order_by
  nominated_date: order_by
  nominations_aggregate: vouches_aggregate_order_by
  nominator: users_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
  vouches_required: order_by
}

"""
primary key columns input for table: nominees
"""
input nominees_pk_columns_input {
  id: bigint!
}

"""
select columns of table "nominees"
"""
enum nominees_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  ended

  """
  column name
  """
  expiry_date

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  nominated_by_user_id

  """
  column name
  """
  nominated_date

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id

  """
  column name
  """
  vouches_required
}

"""
input type for updating data in table "nominees"
"""
input nominees_set_input {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  ended: Boolean
  expiry_date: timestamp
  id: bigint
  name: String
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
aggregate stddev on columns
"""
type nominees_stddev_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by stddev() on columns of table "nominees"
"""
input nominees_stddev_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate stddev_pop on columns
"""
type nominees_stddev_pop_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by stddev_pop() on columns of table "nominees"
"""
input nominees_stddev_pop_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate stddev_samp on columns
"""
type nominees_stddev_samp_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by stddev_samp() on columns of table "nominees"
"""
input nominees_stddev_samp_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
Streaming cursor of the table "nominees"
"""
input nominees_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: nominees_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input nominees_stream_cursor_value_input {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  ended: Boolean
  expiry_date: timestamp
  id: bigint
  name: String
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
aggregate sum on columns
"""
type nominees_sum_fields {
  circle_id: Int
  id: bigint
  nominated_by_user_id: Int
  user_id: Int
  vouches_required: Int
}

"""
order by sum() on columns of table "nominees"
"""
input nominees_sum_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
update columns of table "nominees"
"""
enum nominees_update_column {
  """
  column name
  """
  address

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  ended

  """
  column name
  """
  expiry_date

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  nominated_by_user_id

  """
  column name
  """
  nominated_date

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id

  """
  column name
  """
  vouches_required
}

input nominees_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: nominees_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: nominees_set_input
  where: nominees_bool_exp!
}

"""
aggregate var_pop on columns
"""
type nominees_var_pop_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by var_pop() on columns of table "nominees"
"""
input nominees_var_pop_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate var_samp on columns
"""
type nominees_var_samp_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by var_samp() on columns of table "nominees"
"""
input nominees_var_samp_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate variance on columns
"""
type nominees_variance_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by variance() on columns of table "nominees"
"""
input nominees_variance_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "organizations"
"""
type organizations {
  """
  An array relationship
  """
  circles(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  An aggregate relationship
  """
  circles_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): circles_aggregate!
  created_at: timestamp!
  id: bigint!
  is_verified: Boolean!
  logo: String
  name: String!

  """
  Indicates a test/sample/sandbox org
  """
  sandbox: Boolean!
  telegram_id: String
  updated_at: timestamp!

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!
}

"""
aggregated selection of "organizations"
"""
type organizations_aggregate {
  aggregate: organizations_aggregate_fields
  nodes: [organizations!]!
}

"""
aggregate fields of "organizations"
"""
type organizations_aggregate_fields {
  avg: organizations_avg_fields
  count(columns: [organizations_select_column!], distinct: Boolean): Int!
  max: organizations_max_fields
  min: organizations_min_fields
  stddev: organizations_stddev_fields
  stddev_pop: organizations_stddev_pop_fields
  stddev_samp: organizations_stddev_samp_fields
  sum: organizations_sum_fields
  var_pop: organizations_var_pop_fields
  var_samp: organizations_var_samp_fields
  variance: organizations_variance_fields
}

"""
aggregate avg on columns
"""
type organizations_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  circles: circles_bool_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  is_verified: Boolean_comparison_exp
  logo: String_comparison_exp
  name: String_comparison_exp
  sandbox: Boolean_comparison_exp
  telegram_id: String_comparison_exp
  updated_at: timestamp_comparison_exp
  vaults: vaults_bool_exp
}

"""
unique or primary key constraints on table "organizations"
"""
enum organizations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  organizations_pkey
}

"""
input type for incrementing numeric columns in table "organizations"
"""
input organizations_inc_input {
  id: bigint
}

"""
input type for inserting data into table "organizations"
"""
input organizations_insert_input {
  circles: circles_arr_rel_insert_input
  created_at: timestamp
  id: bigint
  is_verified: Boolean
  logo: String
  name: String

  """
  Indicates a test/sample/sandbox org
  """
  sandbox: Boolean
  telegram_id: String
  updated_at: timestamp
  vaults: vaults_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type organizations_max_fields {
  created_at: timestamp
  id: bigint
  logo: String
  name: String
  telegram_id: String
  updated_at: timestamp
}

"""
aggregate min on columns
"""
type organizations_min_fields {
  created_at: timestamp
  id: bigint
  logo: String
  name: String
  telegram_id: String
  updated_at: timestamp
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [organizations!]!
}

"""
input type for inserting object relation for remote table "organizations"
"""
input organizations_obj_rel_insert_input {
  data: organizations_insert_input!

  """
  upsert condition
  """
  on_conflict: organizations_on_conflict
}

"""
on_conflict condition type for table "organizations"
"""
input organizations_on_conflict {
  constraint: organizations_constraint!
  update_columns: [organizations_update_column!]! = []
  where: organizations_bool_exp
}

"""
Ordering options when selecting data from "organizations".
"""
input organizations_order_by {
  circles_aggregate: circles_aggregate_order_by
  created_at: order_by
  id: order_by
  is_verified: order_by
  logo: order_by
  name: order_by
  sandbox: order_by
  telegram_id: order_by
  updated_at: order_by
  vaults_aggregate: vaults_aggregate_order_by
}

"""
primary key columns input for table: organizations
"""
input organizations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  is_verified

  """
  column name
  """
  logo

  """
  column name
  """
  name

  """
  column name
  """
  sandbox

  """
  column name
  """
  telegram_id

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  created_at: timestamp
  id: bigint
  is_verified: Boolean
  logo: String
  name: String

  """
  Indicates a test/sample/sandbox org
  """
  sandbox: Boolean
  telegram_id: String
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type organizations_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type organizations_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type organizations_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "organizations"
"""
input organizations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: organizations_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input organizations_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  is_verified: Boolean
  logo: String
  name: String

  """
  Indicates a test/sample/sandbox org
  """
  sandbox: Boolean
  telegram_id: String
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type organizations_sum_fields {
  id: bigint
}

"""
update columns of table "organizations"
"""
enum organizations_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  is_verified

  """
  column name
  """
  logo

  """
  column name
  """
  name

  """
  column name
  """
  sandbox

  """
  column name
  """
  telegram_id

  """
  column name
  """
  updated_at
}

input organizations_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: organizations_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: organizations_set_input
  where: organizations_bool_exp!
}

"""
aggregate var_pop on columns
"""
type organizations_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type organizations_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type organizations_variance_fields {
  id: Float
}

"""
columns and relationships of "pending_gift_private"
"""
type pending_gift_private {
  gift_id: bigint
  note: String

  """
  An object relationship
  """
  recipient: users
  recipient_id: bigint

  """
  An object relationship
  """
  sender: users
  sender_id: bigint
}

"""
aggregated selection of "pending_gift_private"
"""
type pending_gift_private_aggregate {
  aggregate: pending_gift_private_aggregate_fields
  nodes: [pending_gift_private!]!
}

"""
aggregate fields of "pending_gift_private"
"""
type pending_gift_private_aggregate_fields {
  avg: pending_gift_private_avg_fields
  count(columns: [pending_gift_private_select_column!], distinct: Boolean): Int!
  max: pending_gift_private_max_fields
  min: pending_gift_private_min_fields
  stddev: pending_gift_private_stddev_fields
  stddev_pop: pending_gift_private_stddev_pop_fields
  stddev_samp: pending_gift_private_stddev_samp_fields
  sum: pending_gift_private_sum_fields
  var_pop: pending_gift_private_var_pop_fields
  var_samp: pending_gift_private_var_samp_fields
  variance: pending_gift_private_variance_fields
}

"""
aggregate avg on columns
"""
type pending_gift_private_avg_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
Boolean expression to filter rows from the table "pending_gift_private". All fields are combined with a logical 'AND'.
"""
input pending_gift_private_bool_exp {
  _and: [pending_gift_private_bool_exp!]
  _not: pending_gift_private_bool_exp
  _or: [pending_gift_private_bool_exp!]
  gift_id: bigint_comparison_exp
  note: String_comparison_exp
  recipient: users_bool_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_id: bigint_comparison_exp
}

"""
input type for incrementing numeric columns in table "pending_gift_private"
"""
input pending_gift_private_inc_input {
  gift_id: bigint
  recipient_id: bigint
  sender_id: bigint
}

"""
input type for inserting data into table "pending_gift_private"
"""
input pending_gift_private_insert_input {
  gift_id: bigint
  note: String
  recipient: users_obj_rel_insert_input
  recipient_id: bigint
  sender: users_obj_rel_insert_input
  sender_id: bigint
}

"""
aggregate max on columns
"""
type pending_gift_private_max_fields {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
aggregate min on columns
"""
type pending_gift_private_min_fields {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
response of any mutation on the table "pending_gift_private"
"""
type pending_gift_private_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [pending_gift_private!]!
}

"""
input type for inserting object relation for remote table "pending_gift_private"
"""
input pending_gift_private_obj_rel_insert_input {
  data: pending_gift_private_insert_input!
}

"""
Ordering options when selecting data from "pending_gift_private".
"""
input pending_gift_private_order_by {
  gift_id: order_by
  note: order_by
  recipient: users_order_by
  recipient_id: order_by
  sender: users_order_by
  sender_id: order_by
}

"""
select columns of table "pending_gift_private"
"""
enum pending_gift_private_select_column {
  """
  column name
  """
  gift_id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_id
}

"""
input type for updating data in table "pending_gift_private"
"""
input pending_gift_private_set_input {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
aggregate stddev on columns
"""
type pending_gift_private_stddev_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate stddev_pop on columns
"""
type pending_gift_private_stddev_pop_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate stddev_samp on columns
"""
type pending_gift_private_stddev_samp_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
Streaming cursor of the table "pending_gift_private"
"""
input pending_gift_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: pending_gift_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input pending_gift_private_stream_cursor_value_input {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
aggregate sum on columns
"""
type pending_gift_private_sum_fields {
  gift_id: bigint
  recipient_id: bigint
  sender_id: bigint
}

input pending_gift_private_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: pending_gift_private_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: pending_gift_private_set_input
  where: pending_gift_private_bool_exp!
}

"""
aggregate var_pop on columns
"""
type pending_gift_private_var_pop_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate var_samp on columns
"""
type pending_gift_private_var_samp_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
aggregate variance on columns
"""
type pending_gift_private_variance_fields {
  gift_id: Float
  recipient_id: Float
  sender_id: Float
}

"""
GIVE allocations made by circle members for the currently running epoch
"""
type pending_token_gifts {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!
  dts_created: timestamp!

  """
  An object relationship
  """
  epoch: epochs
  epoch_id: Int!

  """
  An object relationship
  """
  gift_private: pending_gift_private
  id: bigint!
  note: String

  """
  An object relationship
  """
  recipient: users!
  recipient_address: String!
  recipient_id: bigint!

  """
  An object relationship
  """
  sender: users!
  sender_address: String!
  sender_id: bigint!
  tokens: Int!
  updated_at: timestamp!
}

"""
aggregated selection of "pending_token_gifts"
"""
type pending_token_gifts_aggregate {
  aggregate: pending_token_gifts_aggregate_fields
  nodes: [pending_token_gifts!]!
}

"""
aggregate fields of "pending_token_gifts"
"""
type pending_token_gifts_aggregate_fields {
  avg: pending_token_gifts_avg_fields
  count(columns: [pending_token_gifts_select_column!], distinct: Boolean): Int!
  max: pending_token_gifts_max_fields
  min: pending_token_gifts_min_fields
  stddev: pending_token_gifts_stddev_fields
  stddev_pop: pending_token_gifts_stddev_pop_fields
  stddev_samp: pending_token_gifts_stddev_samp_fields
  sum: pending_token_gifts_sum_fields
  var_pop: pending_token_gifts_var_pop_fields
  var_samp: pending_token_gifts_var_samp_fields
  variance: pending_token_gifts_variance_fields
}

"""
order by aggregate values of table "pending_token_gifts"
"""
input pending_token_gifts_aggregate_order_by {
  avg: pending_token_gifts_avg_order_by
  count: order_by
  max: pending_token_gifts_max_order_by
  min: pending_token_gifts_min_order_by
  stddev: pending_token_gifts_stddev_order_by
  stddev_pop: pending_token_gifts_stddev_pop_order_by
  stddev_samp: pending_token_gifts_stddev_samp_order_by
  sum: pending_token_gifts_sum_order_by
  var_pop: pending_token_gifts_var_pop_order_by
  var_samp: pending_token_gifts_var_samp_order_by
  variance: pending_token_gifts_variance_order_by
}

"""
input type for inserting array relation for remote table "pending_token_gifts"
"""
input pending_token_gifts_arr_rel_insert_input {
  data: [pending_token_gifts_insert_input!]!

  """
  upsert condition
  """
  on_conflict: pending_token_gifts_on_conflict
}

"""
aggregate avg on columns
"""
type pending_token_gifts_avg_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by avg() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Boolean expression to filter rows from the table "pending_token_gifts". All fields are combined with a logical 'AND'.
"""
input pending_token_gifts_bool_exp {
  _and: [pending_token_gifts_bool_exp!]
  _not: pending_token_gifts_bool_exp
  _or: [pending_token_gifts_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  dts_created: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  gift_private: pending_gift_private_bool_exp
  id: bigint_comparison_exp
  note: String_comparison_exp
  recipient: users_bool_exp
  recipient_address: String_comparison_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_address: String_comparison_exp
  sender_id: bigint_comparison_exp
  tokens: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "pending_token_gifts"
"""
enum pending_token_gifts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  pending_token_gifts_pkey

  """
  unique or primary key constraint on columns "recipient_id", "sender_id", "epoch_id"
  """
  pending_token_gifts_sender_id_recipient_id_epoch_id_key
}

"""
input type for incrementing numeric columns in table "pending_token_gifts"
"""
input pending_token_gifts_inc_input {
  circle_id: bigint
  epoch_id: Int
  id: bigint
  recipient_id: bigint
  sender_id: bigint
  tokens: Int
}

"""
input type for inserting data into table "pending_token_gifts"
"""
input pending_token_gifts_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch: epochs_obj_rel_insert_input
  epoch_id: Int
  gift_private: pending_gift_private_obj_rel_insert_input
  id: bigint
  note: String
  recipient: users_obj_rel_insert_input
  recipient_address: String
  recipient_id: bigint
  sender: users_obj_rel_insert_input
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate max on columns
"""
type pending_token_gifts_max_fields {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by max() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_max_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  note: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type pending_token_gifts_min_fields {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by min() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_min_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  note: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "pending_token_gifts"
"""
type pending_token_gifts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [pending_token_gifts!]!
}

"""
on_conflict condition type for table "pending_token_gifts"
"""
input pending_token_gifts_on_conflict {
  constraint: pending_token_gifts_constraint!
  update_columns: [pending_token_gifts_update_column!]! = []
  where: pending_token_gifts_bool_exp
}

"""
Ordering options when selecting data from "pending_token_gifts".
"""
input pending_token_gifts_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gift_private: pending_gift_private_order_by
  id: order_by
  note: order_by
  recipient: users_order_by
  recipient_address: order_by
  recipient_id: order_by
  sender: users_order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
primary key columns input for table: pending_token_gifts
"""
input pending_token_gifts_pk_columns_input {
  id: bigint!
}

"""
select columns of table "pending_token_gifts"
"""
enum pending_token_gifts_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dts_created

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_address

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_address

  """
  column name
  """
  sender_id

  """
  column name
  """
  tokens

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "pending_token_gifts"
"""
input pending_token_gifts_set_input {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type pending_token_gifts_stddev_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate stddev_pop on columns
"""
type pending_token_gifts_stddev_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev_pop() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate stddev_samp on columns
"""
type pending_token_gifts_stddev_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev_samp() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Streaming cursor of the table "pending_token_gifts"
"""
input pending_token_gifts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: pending_token_gifts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input pending_token_gifts_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type pending_token_gifts_sum_fields {
  circle_id: bigint
  epoch_id: Int
  id: bigint
  recipient_id: bigint
  sender_id: bigint
  tokens: Int
}

"""
order by sum() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
update columns of table "pending_token_gifts"
"""
enum pending_token_gifts_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dts_created

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_address

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_address

  """
  column name
  """
  sender_id

  """
  column name
  """
  tokens

  """
  column name
  """
  updated_at
}

input pending_token_gifts_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: pending_token_gifts_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: pending_token_gifts_set_input
  where: pending_token_gifts_bool_exp!
}

"""
aggregate var_pop on columns
"""
type pending_token_gifts_var_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by var_pop() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate var_samp on columns
"""
type pending_token_gifts_var_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by var_samp() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate variance on columns
"""
type pending_token_gifts_variance_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by variance() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
stores app-specific context to aid in the recovery of incomplete transactions
"""
type pending_vault_transactions {
  chain_id: Int!
  claim_id: bigint
  created_at: timestamp!
  created_by: bigint!

  """
  An object relationship
  """
  distribution: distributions
  distribution_id: bigint
  org_id: bigint

  """
  An object relationship
  """
  organization: organizations

  """
  An object relationship
  """
  profile: profiles!
  tx_hash: String!
  tx_type: vault_tx_types_enum!

  """
  An object relationship
  """
  vault_tx_type: vault_tx_types!
}

"""
aggregated selection of "pending_vault_transactions"
"""
type pending_vault_transactions_aggregate {
  aggregate: pending_vault_transactions_aggregate_fields
  nodes: [pending_vault_transactions!]!
}

"""
aggregate fields of "pending_vault_transactions"
"""
type pending_vault_transactions_aggregate_fields {
  avg: pending_vault_transactions_avg_fields
  count(
    columns: [pending_vault_transactions_select_column!]
    distinct: Boolean
  ): Int!
  max: pending_vault_transactions_max_fields
  min: pending_vault_transactions_min_fields
  stddev: pending_vault_transactions_stddev_fields
  stddev_pop: pending_vault_transactions_stddev_pop_fields
  stddev_samp: pending_vault_transactions_stddev_samp_fields
  sum: pending_vault_transactions_sum_fields
  var_pop: pending_vault_transactions_var_pop_fields
  var_samp: pending_vault_transactions_var_samp_fields
  variance: pending_vault_transactions_variance_fields
}

"""
aggregate avg on columns
"""
type pending_vault_transactions_avg_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
Boolean expression to filter rows from the table "pending_vault_transactions". All fields are combined with a logical 'AND'.
"""
input pending_vault_transactions_bool_exp {
  _and: [pending_vault_transactions_bool_exp!]
  _not: pending_vault_transactions_bool_exp
  _or: [pending_vault_transactions_bool_exp!]
  chain_id: Int_comparison_exp
  claim_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  created_by: bigint_comparison_exp
  distribution: distributions_bool_exp
  distribution_id: bigint_comparison_exp
  org_id: bigint_comparison_exp
  organization: organizations_bool_exp
  profile: profiles_bool_exp
  tx_hash: String_comparison_exp
  tx_type: vault_tx_types_enum_comparison_exp
  vault_tx_type: vault_tx_types_bool_exp
}

"""
unique or primary key constraints on table "pending_vault_transactions"
"""
enum pending_vault_transactions_constraint {
  """
  unique or primary key constraint on columns "tx_hash"
  """
  pending_vault_transactions_pkey
}

"""
input type for incrementing numeric columns in table "pending_vault_transactions"
"""
input pending_vault_transactions_inc_input {
  chain_id: Int
  claim_id: bigint
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
}

"""
input type for inserting data into table "pending_vault_transactions"
"""
input pending_vault_transactions_insert_input {
  chain_id: Int
  claim_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution: distributions_obj_rel_insert_input
  distribution_id: bigint
  org_id: bigint
  organization: organizations_obj_rel_insert_input
  profile: profiles_obj_rel_insert_input
  tx_hash: String
  tx_type: vault_tx_types_enum
  vault_tx_type: vault_tx_types_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type pending_vault_transactions_max_fields {
  chain_id: Int
  claim_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
  tx_hash: String
}

"""
aggregate min on columns
"""
type pending_vault_transactions_min_fields {
  chain_id: Int
  claim_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
  tx_hash: String
}

"""
response of any mutation on the table "pending_vault_transactions"
"""
type pending_vault_transactions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [pending_vault_transactions!]!
}

"""
on_conflict condition type for table "pending_vault_transactions"
"""
input pending_vault_transactions_on_conflict {
  constraint: pending_vault_transactions_constraint!
  update_columns: [pending_vault_transactions_update_column!]! = []
  where: pending_vault_transactions_bool_exp
}

"""
Ordering options when selecting data from "pending_vault_transactions".
"""
input pending_vault_transactions_order_by {
  chain_id: order_by
  claim_id: order_by
  created_at: order_by
  created_by: order_by
  distribution: distributions_order_by
  distribution_id: order_by
  org_id: order_by
  organization: organizations_order_by
  profile: profiles_order_by
  tx_hash: order_by
  tx_type: order_by
  vault_tx_type: vault_tx_types_order_by
}

"""
primary key columns input for table: pending_vault_transactions
"""
input pending_vault_transactions_pk_columns_input {
  tx_hash: String!
}

"""
select columns of table "pending_vault_transactions"
"""
enum pending_vault_transactions_select_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  claim_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_id

  """
  column name
  """
  org_id

  """
  column name
  """
  tx_hash

  """
  column name
  """
  tx_type
}

"""
input type for updating data in table "pending_vault_transactions"
"""
input pending_vault_transactions_set_input {
  chain_id: Int
  claim_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
}

"""
aggregate stddev on columns
"""
type pending_vault_transactions_stddev_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
aggregate stddev_pop on columns
"""
type pending_vault_transactions_stddev_pop_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
aggregate stddev_samp on columns
"""
type pending_vault_transactions_stddev_samp_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
Streaming cursor of the table "pending_vault_transactions"
"""
input pending_vault_transactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: pending_vault_transactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input pending_vault_transactions_stream_cursor_value_input {
  chain_id: Int
  claim_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
}

"""
aggregate sum on columns
"""
type pending_vault_transactions_sum_fields {
  chain_id: Int
  claim_id: bigint
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
}

"""
update columns of table "pending_vault_transactions"
"""
enum pending_vault_transactions_update_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  claim_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_id

  """
  column name
  """
  org_id

  """
  column name
  """
  tx_hash

  """
  column name
  """
  tx_type
}

input pending_vault_transactions_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: pending_vault_transactions_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: pending_vault_transactions_set_input
  where: pending_vault_transactions_bool_exp!
}

"""
aggregate var_pop on columns
"""
type pending_vault_transactions_var_pop_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
aggregate var_samp on columns
"""
type pending_vault_transactions_var_samp_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
aggregate variance on columns
"""
type pending_vault_transactions_variance_fields {
  chain_id: Float
  claim_id: Float
  created_by: Float
  distribution_id: Float
  org_id: Float
}

"""
columns and relationships of "personal_access_tokens"
"""
type personal_access_tokens {
  abilities: String
  created_at: timestamp!
  id: bigint!
  last_used_at: timestamp
  name: String!

  """
  An object relationship
  """
  profile: profiles
  token: String!
  tokenable_id: bigint!
  tokenable_type: String!
  updated_at: timestamp!
}

"""
aggregated selection of "personal_access_tokens"
"""
type personal_access_tokens_aggregate {
  aggregate: personal_access_tokens_aggregate_fields
  nodes: [personal_access_tokens!]!
}

"""
aggregate fields of "personal_access_tokens"
"""
type personal_access_tokens_aggregate_fields {
  avg: personal_access_tokens_avg_fields
  count(
    columns: [personal_access_tokens_select_column!]
    distinct: Boolean
  ): Int!
  max: personal_access_tokens_max_fields
  min: personal_access_tokens_min_fields
  stddev: personal_access_tokens_stddev_fields
  stddev_pop: personal_access_tokens_stddev_pop_fields
  stddev_samp: personal_access_tokens_stddev_samp_fields
  sum: personal_access_tokens_sum_fields
  var_pop: personal_access_tokens_var_pop_fields
  var_samp: personal_access_tokens_var_samp_fields
  variance: personal_access_tokens_variance_fields
}

"""
aggregate avg on columns
"""
type personal_access_tokens_avg_fields {
  id: Float
  tokenable_id: Float
}

"""
Boolean expression to filter rows from the table "personal_access_tokens". All fields are combined with a logical 'AND'.
"""
input personal_access_tokens_bool_exp {
  _and: [personal_access_tokens_bool_exp!]
  _not: personal_access_tokens_bool_exp
  _or: [personal_access_tokens_bool_exp!]
  abilities: String_comparison_exp
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  last_used_at: timestamp_comparison_exp
  name: String_comparison_exp
  profile: profiles_bool_exp
  token: String_comparison_exp
  tokenable_id: bigint_comparison_exp
  tokenable_type: String_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "personal_access_tokens"
"""
enum personal_access_tokens_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  personal_access_tokens_pkey

  """
  unique or primary key constraint on columns "token"
  """
  personal_access_tokens_token_key
}

"""
input type for incrementing numeric columns in table "personal_access_tokens"
"""
input personal_access_tokens_inc_input {
  id: bigint
  tokenable_id: bigint
}

"""
input type for inserting data into table "personal_access_tokens"
"""
input personal_access_tokens_insert_input {
  abilities: String
  created_at: timestamp
  id: bigint
  last_used_at: timestamp
  name: String
  profile: profiles_obj_rel_insert_input
  token: String
  tokenable_id: bigint
  tokenable_type: String
  updated_at: timestamp
}

"""
aggregate max on columns
"""
type personal_access_tokens_max_fields {
  abilities: String
  created_at: timestamp
  id: bigint
  last_used_at: timestamp
  name: String
  token: String
  tokenable_id: bigint
  tokenable_type: String
  updated_at: timestamp
}

"""
aggregate min on columns
"""
type personal_access_tokens_min_fields {
  abilities: String
  created_at: timestamp
  id: bigint
  last_used_at: timestamp
  name: String
  token: String
  tokenable_id: bigint
  tokenable_type: String
  updated_at: timestamp
}

"""
response of any mutation on the table "personal_access_tokens"
"""
type personal_access_tokens_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [personal_access_tokens!]!
}

"""
on_conflict condition type for table "personal_access_tokens"
"""
input personal_access_tokens_on_conflict {
  constraint: personal_access_tokens_constraint!
  update_columns: [personal_access_tokens_update_column!]! = []
  where: personal_access_tokens_bool_exp
}

"""
Ordering options when selecting data from "personal_access_tokens".
"""
input personal_access_tokens_order_by {
  abilities: order_by
  created_at: order_by
  id: order_by
  last_used_at: order_by
  name: order_by
  profile: profiles_order_by
  token: order_by
  tokenable_id: order_by
  tokenable_type: order_by
  updated_at: order_by
}

"""
primary key columns input for table: personal_access_tokens
"""
input personal_access_tokens_pk_columns_input {
  id: bigint!
}

"""
select columns of table "personal_access_tokens"
"""
enum personal_access_tokens_select_column {
  """
  column name
  """
  abilities

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  last_used_at

  """
  column name
  """
  name

  """
  column name
  """
  token

  """
  column name
  """
  tokenable_id

  """
  column name
  """
  tokenable_type

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "personal_access_tokens"
"""
input personal_access_tokens_set_input {
  abilities: String
  created_at: timestamp
  id: bigint
  last_used_at: timestamp
  name: String
  token: String
  tokenable_id: bigint
  tokenable_type: String
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type personal_access_tokens_stddev_fields {
  id: Float
  tokenable_id: Float
}

"""
aggregate stddev_pop on columns
"""
type personal_access_tokens_stddev_pop_fields {
  id: Float
  tokenable_id: Float
}

"""
aggregate stddev_samp on columns
"""
type personal_access_tokens_stddev_samp_fields {
  id: Float
  tokenable_id: Float
}

"""
Streaming cursor of the table "personal_access_tokens"
"""
input personal_access_tokens_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: personal_access_tokens_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input personal_access_tokens_stream_cursor_value_input {
  abilities: String
  created_at: timestamp
  id: bigint
  last_used_at: timestamp
  name: String
  token: String
  tokenable_id: bigint
  tokenable_type: String
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type personal_access_tokens_sum_fields {
  id: bigint
  tokenable_id: bigint
}

"""
update columns of table "personal_access_tokens"
"""
enum personal_access_tokens_update_column {
  """
  column name
  """
  abilities

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  last_used_at

  """
  column name
  """
  name

  """
  column name
  """
  token

  """
  column name
  """
  tokenable_id

  """
  column name
  """
  tokenable_type

  """
  column name
  """
  updated_at
}

input personal_access_tokens_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: personal_access_tokens_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: personal_access_tokens_set_input
  where: personal_access_tokens_bool_exp!
}

"""
aggregate var_pop on columns
"""
type personal_access_tokens_var_pop_fields {
  id: Float
  tokenable_id: Float
}

"""
aggregate var_samp on columns
"""
type personal_access_tokens_var_samp_fields {
  id: Float
  tokenable_id: Float
}

"""
aggregate variance on columns
"""
type personal_access_tokens_variance_fields {
  id: Float
  tokenable_id: Float
}

"""
Coordinape user accounts that can belong to one or many circles via the relationship to the users table
"""
type profiles {
  address: String!
  ann_power: Boolean!
  avatar: String
  background: String
  bio: String
  chat_id: String

  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!
  created_at: timestamp!
  discord_username: String

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!
  github_username: String
  id: bigint!
  medium_username: String
  name: String
  skills: String
  telegram_username: String
  twitter_username: String
  updated_at: timestamp!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An aggregate relationship
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!
  website: String
}

"""
aggregated selection of "profiles"
"""
type profiles_aggregate {
  aggregate: profiles_aggregate_fields
  nodes: [profiles!]!
}

"""
aggregate fields of "profiles"
"""
type profiles_aggregate_fields {
  avg: profiles_avg_fields
  count(columns: [profiles_select_column!], distinct: Boolean): Int!
  max: profiles_max_fields
  min: profiles_min_fields
  stddev: profiles_stddev_fields
  stddev_pop: profiles_stddev_pop_fields
  stddev_samp: profiles_stddev_samp_fields
  sum: profiles_sum_fields
  var_pop: profiles_var_pop_fields
  var_samp: profiles_var_samp_fields
  variance: profiles_variance_fields
}

"""
aggregate avg on columns
"""
type profiles_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "profiles". All fields are combined with a logical 'AND'.
"""
input profiles_bool_exp {
  _and: [profiles_bool_exp!]
  _not: profiles_bool_exp
  _or: [profiles_bool_exp!]
  address: String_comparison_exp
  ann_power: Boolean_comparison_exp
  avatar: String_comparison_exp
  background: String_comparison_exp
  bio: String_comparison_exp
  chat_id: String_comparison_exp
  claims: claims_bool_exp
  created_at: timestamp_comparison_exp
  discord_username: String_comparison_exp
  distributions: distributions_bool_exp
  github_username: String_comparison_exp
  id: bigint_comparison_exp
  medium_username: String_comparison_exp
  name: String_comparison_exp
  skills: String_comparison_exp
  telegram_username: String_comparison_exp
  twitter_username: String_comparison_exp
  updated_at: timestamp_comparison_exp
  users: users_bool_exp
  vault_transactions: vault_transactions_bool_exp
  vaults: vaults_bool_exp
  website: String_comparison_exp
}

"""
unique or primary key constraints on table "profiles"
"""
enum profiles_constraint {
  """
  unique or primary key constraint on columns "address"
  """
  profiles_address_key

  """
  unique or primary key constraint on columns "name"
  """
  profiles_name_key

  """
  unique or primary key constraint on columns "id"
  """
  profiles_pkey
}

"""
input type for incrementing numeric columns in table "profiles"
"""
input profiles_inc_input {
  id: bigint
}

"""
input type for inserting data into table "profiles"
"""
input profiles_insert_input {
  address: String
  ann_power: Boolean
  avatar: String
  background: String
  bio: String
  chat_id: String
  claims: claims_arr_rel_insert_input
  created_at: timestamp
  discord_username: String
  distributions: distributions_arr_rel_insert_input
  github_username: String
  id: bigint
  medium_username: String
  name: String
  skills: String
  telegram_username: String
  twitter_username: String
  updated_at: timestamp
  users: users_arr_rel_insert_input
  vault_transactions: vault_transactions_arr_rel_insert_input
  vaults: vaults_arr_rel_insert_input
  website: String
}

"""
aggregate max on columns
"""
type profiles_max_fields {
  address: String
  avatar: String
  background: String
  bio: String
  chat_id: String
  created_at: timestamp
  discord_username: String
  github_username: String
  id: bigint
  medium_username: String
  name: String
  skills: String
  telegram_username: String
  twitter_username: String
  updated_at: timestamp
  website: String
}

"""
aggregate min on columns
"""
type profiles_min_fields {
  address: String
  avatar: String
  background: String
  bio: String
  chat_id: String
  created_at: timestamp
  discord_username: String
  github_username: String
  id: bigint
  medium_username: String
  name: String
  skills: String
  telegram_username: String
  twitter_username: String
  updated_at: timestamp
  website: String
}

"""
response of any mutation on the table "profiles"
"""
type profiles_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [profiles!]!
}

"""
input type for inserting object relation for remote table "profiles"
"""
input profiles_obj_rel_insert_input {
  data: profiles_insert_input!

  """
  upsert condition
  """
  on_conflict: profiles_on_conflict
}

"""
on_conflict condition type for table "profiles"
"""
input profiles_on_conflict {
  constraint: profiles_constraint!
  update_columns: [profiles_update_column!]! = []
  where: profiles_bool_exp
}

"""
Ordering options when selecting data from "profiles".
"""
input profiles_order_by {
  address: order_by
  ann_power: order_by
  avatar: order_by
  background: order_by
  bio: order_by
  chat_id: order_by
  claims_aggregate: claims_aggregate_order_by
  created_at: order_by
  discord_username: order_by
  distributions_aggregate: distributions_aggregate_order_by
  github_username: order_by
  id: order_by
  medium_username: order_by
  name: order_by
  skills: order_by
  telegram_username: order_by
  twitter_username: order_by
  updated_at: order_by
  users_aggregate: users_aggregate_order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
  vaults_aggregate: vaults_aggregate_order_by
  website: order_by
}

"""
primary key columns input for table: profiles
"""
input profiles_pk_columns_input {
  id: bigint!
}

"""
select columns of table "profiles"
"""
enum profiles_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  ann_power

  """
  column name
  """
  avatar

  """
  column name
  """
  background

  """
  column name
  """
  bio

  """
  column name
  """
  chat_id

  """
  column name
  """
  created_at

  """
  column name
  """
  discord_username

  """
  column name
  """
  github_username

  """
  column name
  """
  id

  """
  column name
  """
  medium_username

  """
  column name
  """
  name

  """
  column name
  """
  skills

  """
  column name
  """
  telegram_username

  """
  column name
  """
  twitter_username

  """
  column name
  """
  updated_at

  """
  column name
  """
  website
}

"""
input type for updating data in table "profiles"
"""
input profiles_set_input {
  address: String
  ann_power: Boolean
  avatar: String
  background: String
  bio: String
  chat_id: String
  created_at: timestamp
  discord_username: String
  github_username: String
  id: bigint
  medium_username: String
  name: String
  skills: String
  telegram_username: String
  twitter_username: String
  updated_at: timestamp
  website: String
}

"""
aggregate stddev on columns
"""
type profiles_stddev_fields {
  id: Float
}

"""
aggregate stddev_pop on columns
"""
type profiles_stddev_pop_fields {
  id: Float
}

"""
aggregate stddev_samp on columns
"""
type profiles_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "profiles"
"""
input profiles_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_stream_cursor_value_input {
  address: String
  ann_power: Boolean
  avatar: String
  background: String
  bio: String
  chat_id: String
  created_at: timestamp
  discord_username: String
  github_username: String
  id: bigint
  medium_username: String
  name: String
  skills: String
  telegram_username: String
  twitter_username: String
  updated_at: timestamp
  website: String
}

"""
aggregate sum on columns
"""
type profiles_sum_fields {
  id: bigint
}

"""
update columns of table "profiles"
"""
enum profiles_update_column {
  """
  column name
  """
  address

  """
  column name
  """
  ann_power

  """
  column name
  """
  avatar

  """
  column name
  """
  background

  """
  column name
  """
  bio

  """
  column name
  """
  chat_id

  """
  column name
  """
  created_at

  """
  column name
  """
  discord_username

  """
  column name
  """
  github_username

  """
  column name
  """
  id

  """
  column name
  """
  medium_username

  """
  column name
  """
  name

  """
  column name
  """
  skills

  """
  column name
  """
  telegram_username

  """
  column name
  """
  twitter_username

  """
  column name
  """
  updated_at

  """
  column name
  """
  website
}

input profiles_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: profiles_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: profiles_set_input
  where: profiles_bool_exp!
}

"""
aggregate var_pop on columns
"""
type profiles_var_pop_fields {
  id: Float
}

"""
aggregate var_samp on columns
"""
type profiles_var_samp_fields {
  id: Float
}

"""
aggregate variance on columns
"""
type profiles_variance_fields {
  id: Float
}

type query_root {
  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An aggregate relationship
  """
  burns_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): burns_aggregate!

  """
  fetch data from the table: "burns" using primary key columns
  """
  burns_by_pk(id: bigint!): burns

  """
  An array relationship
  """
  circle_api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  An aggregate relationship
  """
  circle_api_keys_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): circle_api_keys_aggregate!

  """
  fetch data from the table: "circle_api_keys" using primary key columns
  """
  circle_api_keys_by_pk(hash: String!): circle_api_keys

  """
  fetch data from the table: "circle_integrations"
  """
  circle_integrations(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  fetch aggregated fields from the table: "circle_integrations"
  """
  circle_integrations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): circle_integrations_aggregate!

  """
  fetch data from the table: "circle_integrations" using primary key columns
  """
  circle_integrations_by_pk(id: bigint!): circle_integrations

  """
  An array relationship
  """
  circle_metadata(
    """
    distinct select on columns
    """
    distinct_on: [circle_metadata_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_metadata_order_by!]

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): [circle_metadata!]!

  """
  An aggregate relationship
  """
  circle_metadata_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_metadata_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_metadata_order_by!]

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): circle_metadata_aggregate!

  """
  fetch data from the table: "circle_metadata" using primary key columns
  """
  circle_metadata_by_pk(id: bigint!): circle_metadata

  """
  fetch data from the table: "circle_private"
  """
  circle_private(
    """
    distinct select on columns
    """
    distinct_on: [circle_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_private_order_by!]

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): [circle_private!]!

  """
  fetch aggregated fields from the table: "circle_private"
  """
  circle_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_private_order_by!]

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): circle_private_aggregate!

  """
  fetch data from the table: "circle_share_tokens"
  """
  circle_share_tokens(
    """
    distinct select on columns
    """
    distinct_on: [circle_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): [circle_share_tokens!]!

  """
  fetch aggregated fields from the table: "circle_share_tokens"
  """
  circle_share_tokens_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): circle_share_tokens_aggregate!

  """
  fetch data from the table: "circle_share_tokens" using primary key columns
  """
  circle_share_tokens_by_pk(circle_id: bigint!, type: Int!): circle_share_tokens

  """
  An array relationship
  """
  circles(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  An aggregate relationship
  """
  circles_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): circles_aggregate!

  """
  fetch data from the table: "circles" using primary key columns
  """
  circles_by_pk(id: bigint!): circles

  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!

  """
  fetch data from the table: "claims" using primary key columns
  """
  claims_by_pk(id: bigint!): claims

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  fetch data from the table: "contributions" using primary key columns
  """
  contributions_by_pk(id: bigint!): contributions

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!

  """
  fetch data from the table: "distributions" using primary key columns
  """
  distributions_by_pk(id: bigint!): distributions

  """
  An array relationship
  """
  epochs(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  An aggregate relationship
  """
  epochs_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): epochs_aggregate!

  """
  fetch data from the table: "epoches" using primary key columns
  """
  epochs_by_pk(id: bigint!): epochs

  """
  fetch data from the table: "gift_private"
  """
  gift_private(
    """
    distinct select on columns
    """
    distinct_on: [gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [gift_private_order_by!]

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): [gift_private!]!

  """
  fetch aggregated fields from the table: "gift_private"
  """
  gift_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [gift_private_order_by!]

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): gift_private_aggregate!

  """
  fetch data from the table: "histories"
  """
  histories(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!

  """
  fetch aggregated fields from the table: "histories"
  """
  histories_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): histories_aggregate!

  """
  fetch data from the table: "histories" using primary key columns
  """
  histories_by_pk(id: bigint!): histories

  """
  fetch data from the table: "interaction_events"
  """
  interaction_events(
    """
    distinct select on columns
    """
    distinct_on: [interaction_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [interaction_events_order_by!]

    """
    filter the rows returned
    """
    where: interaction_events_bool_exp
  ): [interaction_events!]!

  """
  fetch aggregated fields from the table: "interaction_events"
  """
  interaction_events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [interaction_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [interaction_events_order_by!]

    """
    filter the rows returned
    """
    where: interaction_events_bool_exp
  ): interaction_events_aggregate!

  """
  fetch data from the table: "interaction_events" using primary key columns
  """
  interaction_events_by_pk(id: Int!): interaction_events

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!

  """
  fetch data from the table: "nominees" using primary key columns
  """
  nominees_by_pk(id: bigint!): nominees

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): organizations_aggregate!

  """
  fetch data from the table: "organizations" using primary key columns
  """
  organizations_by_pk(id: bigint!): organizations

  """
  fetch data from the table: "pending_gift_private"
  """
  pending_gift_private(
    """
    distinct select on columns
    """
    distinct_on: [pending_gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_gift_private_order_by!]

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): [pending_gift_private!]!

  """
  fetch aggregated fields from the table: "pending_gift_private"
  """
  pending_gift_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_gift_private_order_by!]

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): pending_gift_private_aggregate!

  """
  An array relationship
  """
  pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An aggregate relationship
  """
  pending_token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): pending_token_gifts_aggregate!

  """
  fetch data from the table: "pending_token_gifts" using primary key columns
  """
  pending_token_gifts_by_pk(id: bigint!): pending_token_gifts

  """
  fetch data from the table: "pending_vault_transactions"
  """
  pending_vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [pending_vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): [pending_vault_transactions!]!

  """
  fetch aggregated fields from the table: "pending_vault_transactions"
  """
  pending_vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): pending_vault_transactions_aggregate!

  """
  fetch data from the table: "pending_vault_transactions" using primary key columns
  """
  pending_vault_transactions_by_pk(tx_hash: String!): pending_vault_transactions

  """
  fetch data from the table: "personal_access_tokens"
  """
  personal_access_tokens(
    """
    distinct select on columns
    """
    distinct_on: [personal_access_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [personal_access_tokens_order_by!]

    """
    filter the rows returned
    """
    where: personal_access_tokens_bool_exp
  ): [personal_access_tokens!]!

  """
  fetch aggregated fields from the table: "personal_access_tokens"
  """
  personal_access_tokens_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [personal_access_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [personal_access_tokens_order_by!]

    """
    filter the rows returned
    """
    where: personal_access_tokens_bool_exp
  ): personal_access_tokens_aggregate!

  """
  fetch data from the table: "personal_access_tokens" using primary key columns
  """
  personal_access_tokens_by_pk(id: bigint!): personal_access_tokens

  """
  fetch data from the table: "profiles"
  """
  profiles(
    """
    distinct select on columns
    """
    distinct_on: [profiles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_order_by!]

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): [profiles!]!

  """
  fetch aggregated fields from the table: "profiles"
  """
  profiles_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [profiles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_order_by!]

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): profiles_aggregate!

  """
  fetch data from the table: "profiles" using primary key columns
  """
  profiles_by_pk(id: bigint!): profiles

  """
  An array relationship
  """
  teammates(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  An aggregate relationship
  """
  teammates_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): teammates_aggregate!

  """
  fetch data from the table: "teammates" using primary key columns
  """
  teammates_by_pk(id: bigint!): teammates

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!

  """
  fetch data from the table: "token_gifts" using primary key columns
  """
  token_gifts_by_pk(id: bigint!): token_gifts

  """
  fetch data from the table: "user_private"
  """
  user_private(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): [user_private!]!

  """
  fetch aggregated fields from the table: "user_private"
  """
  user_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): user_private_aggregate!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An aggregate relationship
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: bigint!): users

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!

  """
  fetch data from the table: "vault_transactions" using primary key columns
  """
  vault_transactions_by_pk(id: bigint!): vault_transactions

  """
  fetch data from the table: "vault_tx_types"
  """
  vault_tx_types(
    """
    distinct select on columns
    """
    distinct_on: [vault_tx_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_tx_types_order_by!]

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): [vault_tx_types!]!

  """
  fetch aggregated fields from the table: "vault_tx_types"
  """
  vault_tx_types_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_tx_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_tx_types_order_by!]

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): vault_tx_types_aggregate!

  """
  fetch data from the table: "vault_tx_types" using primary key columns
  """
  vault_tx_types_by_pk(value: String!): vault_tx_types

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!

  """
  fetch data from the table: "vaults" using primary key columns
  """
  vaults_by_pk(id: bigint!): vaults

  """
  An array relationship
  """
  vouches(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  An aggregate relationship
  """
  vouches_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): vouches_aggregate!

  """
  fetch data from the table: "vouches" using primary key columns
  """
  vouches_by_pk(id: bigint!): vouches
}

type subscription_root {
  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An aggregate relationship
  """
  burns_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): burns_aggregate!

  """
  fetch data from the table: "burns" using primary key columns
  """
  burns_by_pk(id: bigint!): burns

  """
  fetch data from the table in a streaming manner : "burns"
  """
  burns_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [burns_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An array relationship
  """
  circle_api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  An aggregate relationship
  """
  circle_api_keys_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): circle_api_keys_aggregate!

  """
  fetch data from the table: "circle_api_keys" using primary key columns
  """
  circle_api_keys_by_pk(hash: String!): circle_api_keys

  """
  fetch data from the table in a streaming manner : "circle_api_keys"
  """
  circle_api_keys_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_api_keys_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  fetch data from the table: "circle_integrations"
  """
  circle_integrations(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  fetch aggregated fields from the table: "circle_integrations"
  """
  circle_integrations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): circle_integrations_aggregate!

  """
  fetch data from the table: "circle_integrations" using primary key columns
  """
  circle_integrations_by_pk(id: bigint!): circle_integrations

  """
  fetch data from the table in a streaming manner : "circle_integrations"
  """
  circle_integrations_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_integrations_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  An array relationship
  """
  circle_metadata(
    """
    distinct select on columns
    """
    distinct_on: [circle_metadata_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_metadata_order_by!]

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): [circle_metadata!]!

  """
  An aggregate relationship
  """
  circle_metadata_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_metadata_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_metadata_order_by!]

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): circle_metadata_aggregate!

  """
  fetch data from the table: "circle_metadata" using primary key columns
  """
  circle_metadata_by_pk(id: bigint!): circle_metadata

  """
  fetch data from the table in a streaming manner : "circle_metadata"
  """
  circle_metadata_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_metadata_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_metadata_bool_exp
  ): [circle_metadata!]!

  """
  fetch data from the table: "circle_private"
  """
  circle_private(
    """
    distinct select on columns
    """
    distinct_on: [circle_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_private_order_by!]

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): [circle_private!]!

  """
  fetch aggregated fields from the table: "circle_private"
  """
  circle_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_private_order_by!]

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): circle_private_aggregate!

  """
  fetch data from the table in a streaming manner : "circle_private"
  """
  circle_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): [circle_private!]!

  """
  fetch data from the table: "circle_share_tokens"
  """
  circle_share_tokens(
    """
    distinct select on columns
    """
    distinct_on: [circle_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): [circle_share_tokens!]!

  """
  fetch aggregated fields from the table: "circle_share_tokens"
  """
  circle_share_tokens_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): circle_share_tokens_aggregate!

  """
  fetch data from the table: "circle_share_tokens" using primary key columns
  """
  circle_share_tokens_by_pk(circle_id: bigint!, type: Int!): circle_share_tokens

  """
  fetch data from the table in a streaming manner : "circle_share_tokens"
  """
  circle_share_tokens_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_share_tokens_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): [circle_share_tokens!]!

  """
  An array relationship
  """
  circles(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  An aggregate relationship
  """
  circles_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): circles_aggregate!

  """
  fetch data from the table: "circles" using primary key columns
  """
  circles_by_pk(id: bigint!): circles

  """
  fetch data from the table in a streaming manner : "circles"
  """
  circles_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circles_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!

  """
  fetch data from the table: "claims" using primary key columns
  """
  claims_by_pk(id: bigint!): claims

  """
  fetch data from the table in a streaming manner : "claims"
  """
  claims_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [claims_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  fetch data from the table: "contributions" using primary key columns
  """
  contributions_by_pk(id: bigint!): contributions

  """
  fetch data from the table in a streaming manner : "contributions"
  """
  contributions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [contributions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!

  """
  fetch data from the table: "distributions" using primary key columns
  """
  distributions_by_pk(id: bigint!): distributions

  """
  fetch data from the table in a streaming manner : "distributions"
  """
  distributions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [distributions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An array relationship
  """
  epochs(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  An aggregate relationship
  """
  epochs_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): epochs_aggregate!

  """
  fetch data from the table: "epoches" using primary key columns
  """
  epochs_by_pk(id: bigint!): epochs

  """
  fetch data from the table in a streaming manner : "epoches"
  """
  epochs_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [epochs_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  fetch data from the table: "gift_private"
  """
  gift_private(
    """
    distinct select on columns
    """
    distinct_on: [gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [gift_private_order_by!]

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): [gift_private!]!

  """
  fetch aggregated fields from the table: "gift_private"
  """
  gift_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [gift_private_order_by!]

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): gift_private_aggregate!

  """
  fetch data from the table in a streaming manner : "gift_private"
  """
  gift_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [gift_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): [gift_private!]!

  """
  fetch data from the table: "histories"
  """
  histories(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!

  """
  fetch aggregated fields from the table: "histories"
  """
  histories_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): histories_aggregate!

  """
  fetch data from the table: "histories" using primary key columns
  """
  histories_by_pk(id: bigint!): histories

  """
  fetch data from the table in a streaming manner : "histories"
  """
  histories_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [histories_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!

  """
  fetch data from the table: "interaction_events"
  """
  interaction_events(
    """
    distinct select on columns
    """
    distinct_on: [interaction_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [interaction_events_order_by!]

    """
    filter the rows returned
    """
    where: interaction_events_bool_exp
  ): [interaction_events!]!

  """
  fetch aggregated fields from the table: "interaction_events"
  """
  interaction_events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [interaction_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [interaction_events_order_by!]

    """
    filter the rows returned
    """
    where: interaction_events_bool_exp
  ): interaction_events_aggregate!

  """
  fetch data from the table: "interaction_events" using primary key columns
  """
  interaction_events_by_pk(id: Int!): interaction_events

  """
  fetch data from the table in a streaming manner : "interaction_events"
  """
  interaction_events_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [interaction_events_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: interaction_events_bool_exp
  ): [interaction_events!]!

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!

  """
  fetch data from the table: "nominees" using primary key columns
  """
  nominees_by_pk(id: bigint!): nominees

  """
  fetch data from the table in a streaming manner : "nominees"
  """
  nominees_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [nominees_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch aggregated fields from the table: "organizations"
  """
  organizations_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): organizations_aggregate!

  """
  fetch data from the table: "organizations" using primary key columns
  """
  organizations_by_pk(id: bigint!): organizations

  """
  fetch data from the table in a streaming manner : "organizations"
  """
  organizations_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [organizations_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch data from the table: "pending_gift_private"
  """
  pending_gift_private(
    """
    distinct select on columns
    """
    distinct_on: [pending_gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_gift_private_order_by!]

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): [pending_gift_private!]!

  """
  fetch aggregated fields from the table: "pending_gift_private"
  """
  pending_gift_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_gift_private_order_by!]

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): pending_gift_private_aggregate!

  """
  fetch data from the table in a streaming manner : "pending_gift_private"
  """
  pending_gift_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [pending_gift_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): [pending_gift_private!]!

  """
  An array relationship
  """
  pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An aggregate relationship
  """
  pending_token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): pending_token_gifts_aggregate!

  """
  fetch data from the table: "pending_token_gifts" using primary key columns
  """
  pending_token_gifts_by_pk(id: bigint!): pending_token_gifts

  """
  fetch data from the table in a streaming manner : "pending_token_gifts"
  """
  pending_token_gifts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [pending_token_gifts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  fetch data from the table: "pending_vault_transactions"
  """
  pending_vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [pending_vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): [pending_vault_transactions!]!

  """
  fetch aggregated fields from the table: "pending_vault_transactions"
  """
  pending_vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): pending_vault_transactions_aggregate!

  """
  fetch data from the table: "pending_vault_transactions" using primary key columns
  """
  pending_vault_transactions_by_pk(tx_hash: String!): pending_vault_transactions

  """
  fetch data from the table in a streaming manner : "pending_vault_transactions"
  """
  pending_vault_transactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [pending_vault_transactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): [pending_vault_transactions!]!

  """
  fetch data from the table: "personal_access_tokens"
  """
  personal_access_tokens(
    """
    distinct select on columns
    """
    distinct_on: [personal_access_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [personal_access_tokens_order_by!]

    """
    filter the rows returned
    """
    where: personal_access_tokens_bool_exp
  ): [personal_access_tokens!]!

  """
  fetch aggregated fields from the table: "personal_access_tokens"
  """
  personal_access_tokens_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [personal_access_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [personal_access_tokens_order_by!]

    """
    filter the rows returned
    """
    where: personal_access_tokens_bool_exp
  ): personal_access_tokens_aggregate!

  """
  fetch data from the table: "personal_access_tokens" using primary key columns
  """
  personal_access_tokens_by_pk(id: bigint!): personal_access_tokens

  """
  fetch data from the table in a streaming manner : "personal_access_tokens"
  """
  personal_access_tokens_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [personal_access_tokens_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: personal_access_tokens_bool_exp
  ): [personal_access_tokens!]!

  """
  fetch data from the table: "profiles"
  """
  profiles(
    """
    distinct select on columns
    """
    distinct_on: [profiles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_order_by!]

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): [profiles!]!

  """
  fetch aggregated fields from the table: "profiles"
  """
  profiles_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [profiles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_order_by!]

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): profiles_aggregate!

  """
  fetch data from the table: "profiles" using primary key columns
  """
  profiles_by_pk(id: bigint!): profiles

  """
  fetch data from the table in a streaming manner : "profiles"
  """
  profiles_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): [profiles!]!

  """
  An array relationship
  """
  teammates(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  An aggregate relationship
  """
  teammates_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): teammates_aggregate!

  """
  fetch data from the table: "teammates" using primary key columns
  """
  teammates_by_pk(id: bigint!): teammates

  """
  fetch data from the table in a streaming manner : "teammates"
  """
  teammates_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [teammates_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!

  """
  fetch data from the table: "token_gifts" using primary key columns
  """
  token_gifts_by_pk(id: bigint!): token_gifts

  """
  fetch data from the table in a streaming manner : "token_gifts"
  """
  token_gifts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [token_gifts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  fetch data from the table: "user_private"
  """
  user_private(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): [user_private!]!

  """
  fetch aggregated fields from the table: "user_private"
  """
  user_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): user_private_aggregate!

  """
  fetch data from the table in a streaming manner : "user_private"
  """
  user_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): [user_private!]!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An aggregate relationship
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: bigint!): users

  """
  fetch data from the table in a streaming manner : "users"
  """
  users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!

  """
  fetch data from the table: "vault_transactions" using primary key columns
  """
  vault_transactions_by_pk(id: bigint!): vault_transactions

  """
  fetch data from the table in a streaming manner : "vault_transactions"
  """
  vault_transactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vault_transactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  fetch data from the table: "vault_tx_types"
  """
  vault_tx_types(
    """
    distinct select on columns
    """
    distinct_on: [vault_tx_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_tx_types_order_by!]

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): [vault_tx_types!]!

  """
  fetch aggregated fields from the table: "vault_tx_types"
  """
  vault_tx_types_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_tx_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_tx_types_order_by!]

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): vault_tx_types_aggregate!

  """
  fetch data from the table: "vault_tx_types" using primary key columns
  """
  vault_tx_types_by_pk(value: String!): vault_tx_types

  """
  fetch data from the table in a streaming manner : "vault_tx_types"
  """
  vault_tx_types_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vault_tx_types_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): [vault_tx_types!]!

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  An aggregate relationship
  """
  vaults_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): vaults_aggregate!

  """
  fetch data from the table: "vaults" using primary key columns
  """
  vaults_by_pk(id: bigint!): vaults

  """
  fetch data from the table in a streaming manner : "vaults"
  """
  vaults_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vaults_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  An array relationship
  """
  vouches(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  An aggregate relationship
  """
  vouches_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): vouches_aggregate!

  """
  fetch data from the table: "vouches" using primary key columns
  """
  vouches_by_pk(id: bigint!): vouches

  """
  fetch data from the table in a streaming manner : "vouches"
  """
  vouches_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vouches_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!
}

"""
columns and relationships of "teammates"
"""
type teammates {
  created_at: timestamp!
  id: bigint!
  team_mate_id: Int!

  """
  An object relationship
  """
  teammate: users
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int!
}

"""
aggregated selection of "teammates"
"""
type teammates_aggregate {
  aggregate: teammates_aggregate_fields
  nodes: [teammates!]!
}

"""
aggregate fields of "teammates"
"""
type teammates_aggregate_fields {
  avg: teammates_avg_fields
  count(columns: [teammates_select_column!], distinct: Boolean): Int!
  max: teammates_max_fields
  min: teammates_min_fields
  stddev: teammates_stddev_fields
  stddev_pop: teammates_stddev_pop_fields
  stddev_samp: teammates_stddev_samp_fields
  sum: teammates_sum_fields
  var_pop: teammates_var_pop_fields
  var_samp: teammates_var_samp_fields
  variance: teammates_variance_fields
}

"""
order by aggregate values of table "teammates"
"""
input teammates_aggregate_order_by {
  avg: teammates_avg_order_by
  count: order_by
  max: teammates_max_order_by
  min: teammates_min_order_by
  stddev: teammates_stddev_order_by
  stddev_pop: teammates_stddev_pop_order_by
  stddev_samp: teammates_stddev_samp_order_by
  sum: teammates_sum_order_by
  var_pop: teammates_var_pop_order_by
  var_samp: teammates_var_samp_order_by
  variance: teammates_variance_order_by
}

"""
input type for inserting array relation for remote table "teammates"
"""
input teammates_arr_rel_insert_input {
  data: [teammates_insert_input!]!

  """
  upsert condition
  """
  on_conflict: teammates_on_conflict
}

"""
aggregate avg on columns
"""
type teammates_avg_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "teammates"
"""
input teammates_avg_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "teammates". All fields are combined with a logical 'AND'.
"""
input teammates_bool_exp {
  _and: [teammates_bool_exp!]
  _not: teammates_bool_exp
  _or: [teammates_bool_exp!]
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  team_mate_id: Int_comparison_exp
  teammate: users_bool_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "teammates"
"""
enum teammates_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  teammates_pkey

  """
  unique or primary key constraint on columns "team_mate_id", "user_id"
  """
  teammates_user_id_team_mate_id_key
}

"""
input type for incrementing numeric columns in table "teammates"
"""
input teammates_inc_input {
  id: bigint
  team_mate_id: Int
  user_id: Int
}

"""
input type for inserting data into table "teammates"
"""
input teammates_insert_input {
  created_at: timestamp
  id: bigint
  team_mate_id: Int
  teammate: users_obj_rel_insert_input
  updated_at: timestamp
  user: users_obj_rel_insert_input
  user_id: Int
}

"""
aggregate max on columns
"""
type teammates_max_fields {
  created_at: timestamp
  id: bigint
  team_mate_id: Int
  updated_at: timestamp
  user_id: Int
}

"""
order by max() on columns of table "teammates"
"""
input teammates_max_order_by {
  created_at: order_by
  id: order_by
  team_mate_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type teammates_min_fields {
  created_at: timestamp
  id: bigint
  team_mate_id: Int
  updated_at: timestamp
  user_id: Int
}

"""
order by min() on columns of table "teammates"
"""
input teammates_min_order_by {
  created_at: order_by
  id: order_by
  team_mate_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "teammates"
"""
type teammates_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [teammates!]!
}

"""
on_conflict condition type for table "teammates"
"""
input teammates_on_conflict {
  constraint: teammates_constraint!
  update_columns: [teammates_update_column!]! = []
  where: teammates_bool_exp
}

"""
Ordering options when selecting data from "teammates".
"""
input teammates_order_by {
  created_at: order_by
  id: order_by
  team_mate_id: order_by
  teammate: users_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
primary key columns input for table: teammates
"""
input teammates_pk_columns_input {
  id: bigint!
}

"""
select columns of table "teammates"
"""
enum teammates_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  team_mate_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
input type for updating data in table "teammates"
"""
input teammates_set_input {
  created_at: timestamp
  id: bigint
  team_mate_id: Int
  updated_at: timestamp
  user_id: Int
}

"""
aggregate stddev on columns
"""
type teammates_stddev_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "teammates"
"""
input teammates_stddev_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type teammates_stddev_pop_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "teammates"
"""
input teammates_stddev_pop_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type teammates_stddev_samp_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "teammates"
"""
input teammates_stddev_samp_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "teammates"
"""
input teammates_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: teammates_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input teammates_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  team_mate_id: Int
  updated_at: timestamp
  user_id: Int
}

"""
aggregate sum on columns
"""
type teammates_sum_fields {
  id: bigint
  team_mate_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "teammates"
"""
input teammates_sum_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
update columns of table "teammates"
"""
enum teammates_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  team_mate_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

input teammates_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: teammates_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: teammates_set_input
  where: teammates_bool_exp!
}

"""
aggregate var_pop on columns
"""
type teammates_var_pop_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "teammates"
"""
input teammates_var_pop_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type teammates_var_samp_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "teammates"
"""
input teammates_var_samp_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type teammates_variance_fields {
  id: Float
  team_mate_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "teammates"
"""
input teammates_variance_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
GIVE allocations made by circle members for completed epochs
"""
type token_gifts {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!
  dts_created: timestamp!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: Int!

  """
  An object relationship
  """
  gift_private: gift_private
  id: bigint!
  note: String

  """
  An object relationship
  """
  recipient: users!
  recipient_address: String!
  recipient_id: bigint!

  """
  An object relationship
  """
  sender: users!
  sender_address: String!
  sender_id: bigint!
  tokens: Int!
  updated_at: timestamp!
}

"""
aggregated selection of "token_gifts"
"""
type token_gifts_aggregate {
  aggregate: token_gifts_aggregate_fields
  nodes: [token_gifts!]!
}

"""
aggregate fields of "token_gifts"
"""
type token_gifts_aggregate_fields {
  avg: token_gifts_avg_fields
  count(columns: [token_gifts_select_column!], distinct: Boolean): Int!
  max: token_gifts_max_fields
  min: token_gifts_min_fields
  stddev: token_gifts_stddev_fields
  stddev_pop: token_gifts_stddev_pop_fields
  stddev_samp: token_gifts_stddev_samp_fields
  sum: token_gifts_sum_fields
  var_pop: token_gifts_var_pop_fields
  var_samp: token_gifts_var_samp_fields
  variance: token_gifts_variance_fields
}

"""
order by aggregate values of table "token_gifts"
"""
input token_gifts_aggregate_order_by {
  avg: token_gifts_avg_order_by
  count: order_by
  max: token_gifts_max_order_by
  min: token_gifts_min_order_by
  stddev: token_gifts_stddev_order_by
  stddev_pop: token_gifts_stddev_pop_order_by
  stddev_samp: token_gifts_stddev_samp_order_by
  sum: token_gifts_sum_order_by
  var_pop: token_gifts_var_pop_order_by
  var_samp: token_gifts_var_samp_order_by
  variance: token_gifts_variance_order_by
}

"""
input type for inserting array relation for remote table "token_gifts"
"""
input token_gifts_arr_rel_insert_input {
  data: [token_gifts_insert_input!]!

  """
  upsert condition
  """
  on_conflict: token_gifts_on_conflict
}

"""
aggregate avg on columns
"""
type token_gifts_avg_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by avg() on columns of table "token_gifts"
"""
input token_gifts_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Boolean expression to filter rows from the table "token_gifts". All fields are combined with a logical 'AND'.
"""
input token_gifts_bool_exp {
  _and: [token_gifts_bool_exp!]
  _not: token_gifts_bool_exp
  _or: [token_gifts_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  dts_created: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  gift_private: gift_private_bool_exp
  id: bigint_comparison_exp
  note: String_comparison_exp
  recipient: users_bool_exp
  recipient_address: String_comparison_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_address: String_comparison_exp
  sender_id: bigint_comparison_exp
  tokens: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "token_gifts"
"""
enum token_gifts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  token_gifts_pkey
}

"""
input type for incrementing numeric columns in table "token_gifts"
"""
input token_gifts_inc_input {
  circle_id: bigint
  epoch_id: Int
  id: bigint
  recipient_id: bigint
  sender_id: bigint
  tokens: Int
}

"""
input type for inserting data into table "token_gifts"
"""
input token_gifts_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch: epochs_obj_rel_insert_input
  epoch_id: Int
  gift_private: gift_private_obj_rel_insert_input
  id: bigint
  note: String
  recipient: users_obj_rel_insert_input
  recipient_address: String
  recipient_id: bigint
  sender: users_obj_rel_insert_input
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate max on columns
"""
type token_gifts_max_fields {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by max() on columns of table "token_gifts"
"""
input token_gifts_max_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  note: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type token_gifts_min_fields {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by min() on columns of table "token_gifts"
"""
input token_gifts_min_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  note: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "token_gifts"
"""
type token_gifts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [token_gifts!]!
}

"""
on_conflict condition type for table "token_gifts"
"""
input token_gifts_on_conflict {
  constraint: token_gifts_constraint!
  update_columns: [token_gifts_update_column!]! = []
  where: token_gifts_bool_exp
}

"""
Ordering options when selecting data from "token_gifts".
"""
input token_gifts_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gift_private: gift_private_order_by
  id: order_by
  note: order_by
  recipient: users_order_by
  recipient_address: order_by
  recipient_id: order_by
  sender: users_order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
primary key columns input for table: token_gifts
"""
input token_gifts_pk_columns_input {
  id: bigint!
}

"""
select columns of table "token_gifts"
"""
enum token_gifts_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dts_created

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_address

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_address

  """
  column name
  """
  sender_id

  """
  column name
  """
  tokens

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "token_gifts"
"""
input token_gifts_set_input {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type token_gifts_stddev_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev() on columns of table "token_gifts"
"""
input token_gifts_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate stddev_pop on columns
"""
type token_gifts_stddev_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev_pop() on columns of table "token_gifts"
"""
input token_gifts_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate stddev_samp on columns
"""
type token_gifts_stddev_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev_samp() on columns of table "token_gifts"
"""
input token_gifts_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Streaming cursor of the table "token_gifts"
"""
input token_gifts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: token_gifts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input token_gifts_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  note: String
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type token_gifts_sum_fields {
  circle_id: bigint
  epoch_id: Int
  id: bigint
  recipient_id: bigint
  sender_id: bigint
  tokens: Int
}

"""
order by sum() on columns of table "token_gifts"
"""
input token_gifts_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
update columns of table "token_gifts"
"""
enum token_gifts_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dts_created

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_address

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_address

  """
  column name
  """
  sender_id

  """
  column name
  """
  tokens

  """
  column name
  """
  updated_at
}

input token_gifts_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: token_gifts_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: token_gifts_set_input
  where: token_gifts_bool_exp!
}

"""
aggregate var_pop on columns
"""
type token_gifts_var_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by var_pop() on columns of table "token_gifts"
"""
input token_gifts_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate var_samp on columns
"""
type token_gifts_var_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by var_samp() on columns of table "token_gifts"
"""
input token_gifts_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate variance on columns
"""
type token_gifts_variance_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by variance() on columns of table "token_gifts"
"""
input token_gifts_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
columns and relationships of "user_private"
"""
type user_private {
  """
  An object relationship
  """
  circle: circles
  circle_id: bigint
  fixed_payment_amount: numeric
  fixed_payment_token_type: String

  """
  An object relationship
  """
  user: users
  user_id: bigint
}

"""
aggregated selection of "user_private"
"""
type user_private_aggregate {
  aggregate: user_private_aggregate_fields
  nodes: [user_private!]!
}

"""
aggregate fields of "user_private"
"""
type user_private_aggregate_fields {
  avg: user_private_avg_fields
  count(columns: [user_private_select_column!], distinct: Boolean): Int!
  max: user_private_max_fields
  min: user_private_min_fields
  stddev: user_private_stddev_fields
  stddev_pop: user_private_stddev_pop_fields
  stddev_samp: user_private_stddev_samp_fields
  sum: user_private_sum_fields
  var_pop: user_private_var_pop_fields
  var_samp: user_private_var_samp_fields
  variance: user_private_variance_fields
}

"""
aggregate avg on columns
"""
type user_private_avg_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "user_private". All fields are combined with a logical 'AND'.
"""
input user_private_bool_exp {
  _and: [user_private_bool_exp!]
  _not: user_private_bool_exp
  _or: [user_private_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  fixed_payment_amount: numeric_comparison_exp
  fixed_payment_token_type: String_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
input type for inserting data into table "user_private"
"""
input user_private_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user: users_obj_rel_insert_input
  user_id: bigint
}

"""
aggregate max on columns
"""
type user_private_max_fields {
  circle_id: bigint
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user_id: bigint
}

"""
aggregate min on columns
"""
type user_private_min_fields {
  circle_id: bigint
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user_id: bigint
}

"""
input type for inserting object relation for remote table "user_private"
"""
input user_private_obj_rel_insert_input {
  data: user_private_insert_input!
}

"""
Ordering options when selecting data from "user_private".
"""
input user_private_order_by {
  circle: circles_order_by
  circle_id: order_by
  fixed_payment_amount: order_by
  fixed_payment_token_type: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "user_private"
"""
enum user_private_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  fixed_payment_amount

  """
  column name
  """
  fixed_payment_token_type

  """
  column name
  """
  user_id
}

"""
aggregate stddev on columns
"""
type user_private_stddev_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate stddev_pop on columns
"""
type user_private_stddev_pop_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate stddev_samp on columns
"""
type user_private_stddev_samp_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
Streaming cursor of the table "user_private"
"""
input user_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_private_stream_cursor_value_input {
  circle_id: bigint
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user_id: bigint
}

"""
aggregate sum on columns
"""
type user_private_sum_fields {
  circle_id: bigint
  fixed_payment_amount: numeric
  user_id: bigint
}

"""
aggregate var_pop on columns
"""
type user_private_var_pop_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate var_samp on columns
"""
type user_private_var_samp_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate variance on columns
"""
type user_private_variance_fields {
  circle_id: Float
  fixed_payment_amount: Float
  user_id: Float
}

"""
Members of a circle
"""
type users {
  address: String!
  bio: String

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An aggregate relationship
  """
  burns_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): burns_aggregate!

  """
  An object relationship
  """
  circle: circles!

  """
  An array relationship
  """
  circle_api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  An aggregate relationship
  """
  circle_api_keys_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): circle_api_keys_aggregate!
  circle_id: bigint!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!
  created_at: timestamp!
  deleted_at: timestamp
  entrance: String
  epoch_first_visit: Boolean!
  fixed_non_receiver: Boolean!
  fixed_payment_amount: numeric!
  give_token_received: Int!
  give_token_remaining: Int!
  id: bigint!
  name: String!
  non_giver: Boolean!
  non_receiver: Boolean!

  """
  An array relationship
  """
  pending_received_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An aggregate relationship
  """
  pending_received_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): pending_token_gifts_aggregate!

  """
  An array relationship
  """
  pending_sent_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An aggregate relationship
  """
  pending_sent_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): pending_token_gifts_aggregate!

  """
  An object relationship
  """
  profile: profiles!

  """
  An array relationship
  """
  received_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  received_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  role: Int!

  """
  An array relationship
  """
  sent_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  sent_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  starting_tokens: Int!

  """
  An array relationship
  """
  teammates(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  An aggregate relationship
  """
  teammates_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): teammates_aggregate!
  updated_at: timestamp!

  """
  An object relationship
  """
  user_private: user_private

  """
  An array relationship
  """
  vouches(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  An aggregate relationship
  """
  vouches_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): vouches_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!

  """
  upsert condition
  """
  on_conflict: users_on_conflict
}

"""
aggregate avg on columns
"""
type users_avg_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by avg() on columns of table "users"
"""
input users_avg_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  address: String_comparison_exp
  bio: String_comparison_exp
  burns: burns_bool_exp
  circle: circles_bool_exp
  circle_api_keys: circle_api_keys_bool_exp
  circle_id: bigint_comparison_exp
  contributions: contributions_bool_exp
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  entrance: String_comparison_exp
  epoch_first_visit: Boolean_comparison_exp
  fixed_non_receiver: Boolean_comparison_exp
  fixed_payment_amount: numeric_comparison_exp
  give_token_received: Int_comparison_exp
  give_token_remaining: Int_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  non_giver: Boolean_comparison_exp
  non_receiver: Boolean_comparison_exp
  pending_received_gifts: pending_token_gifts_bool_exp
  pending_sent_gifts: pending_token_gifts_bool_exp
  profile: profiles_bool_exp
  received_gifts: token_gifts_bool_exp
  role: Int_comparison_exp
  sent_gifts: token_gifts_bool_exp
  starting_tokens: Int_comparison_exp
  teammates: teammates_bool_exp
  updated_at: timestamp_comparison_exp
  user_private: user_private_bool_exp
  vouches: vouches_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "address", "circle_id", "deleted_at"
  """
  users_address_circle_id_deleted_at_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  circle_id: bigint
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  role: Int
  starting_tokens: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  address: String
  bio: String
  burns: burns_arr_rel_insert_input
  circle: circles_obj_rel_insert_input
  circle_api_keys: circle_api_keys_arr_rel_insert_input
  circle_id: bigint
  contributions: contributions_arr_rel_insert_input
  created_at: timestamp
  deleted_at: timestamp
  entrance: String
  epoch_first_visit: Boolean
  fixed_non_receiver: Boolean
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  name: String
  non_giver: Boolean
  non_receiver: Boolean
  pending_received_gifts: pending_token_gifts_arr_rel_insert_input
  pending_sent_gifts: pending_token_gifts_arr_rel_insert_input
  profile: profiles_obj_rel_insert_input
  received_gifts: token_gifts_arr_rel_insert_input
  role: Int
  sent_gifts: token_gifts_arr_rel_insert_input
  starting_tokens: Int
  teammates: teammates_arr_rel_insert_input
  updated_at: timestamp
  user_private: user_private_obj_rel_insert_input
  vouches: vouches_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type users_max_fields {
  address: String
  bio: String
  circle_id: bigint
  created_at: timestamp
  deleted_at: timestamp
  entrance: String
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  name: String
  role: Int
  starting_tokens: Int
  updated_at: timestamp
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  address: order_by
  bio: order_by
  circle_id: order_by
  created_at: order_by
  deleted_at: order_by
  entrance: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  name: order_by
  role: order_by
  starting_tokens: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type users_min_fields {
  address: String
  bio: String
  circle_id: bigint
  created_at: timestamp
  deleted_at: timestamp
  entrance: String
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  name: String
  role: Int
  starting_tokens: Int
  updated_at: timestamp
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  address: order_by
  bio: order_by
  circle_id: order_by
  created_at: order_by
  deleted_at: order_by
  entrance: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  name: order_by
  role: order_by
  starting_tokens: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """
  upsert condition
  """
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  address: order_by
  bio: order_by
  burns_aggregate: burns_aggregate_order_by
  circle: circles_order_by
  circle_api_keys_aggregate: circle_api_keys_aggregate_order_by
  circle_id: order_by
  contributions_aggregate: contributions_aggregate_order_by
  created_at: order_by
  deleted_at: order_by
  entrance: order_by
  epoch_first_visit: order_by
  fixed_non_receiver: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  name: order_by
  non_giver: order_by
  non_receiver: order_by
  pending_received_gifts_aggregate: pending_token_gifts_aggregate_order_by
  pending_sent_gifts_aggregate: pending_token_gifts_aggregate_order_by
  profile: profiles_order_by
  received_gifts_aggregate: token_gifts_aggregate_order_by
  role: order_by
  sent_gifts_aggregate: token_gifts_aggregate_order_by
  starting_tokens: order_by
  teammates_aggregate: teammates_aggregate_order_by
  updated_at: order_by
  user_private: user_private_order_by
  vouches_aggregate: vouches_aggregate_order_by
}

"""
primary key columns input for table: users
"""
input users_pk_columns_input {
  id: bigint!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  bio

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  entrance

  """
  column name
  """
  epoch_first_visit

  """
  column name
  """
  fixed_non_receiver

  """
  column name
  """
  fixed_payment_amount

  """
  column name
  """
  give_token_received

  """
  column name
  """
  give_token_remaining

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  non_giver

  """
  column name
  """
  non_receiver

  """
  column name
  """
  role

  """
  column name
  """
  starting_tokens

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  address: String
  bio: String
  circle_id: bigint
  created_at: timestamp
  deleted_at: timestamp
  entrance: String
  epoch_first_visit: Boolean
  fixed_non_receiver: Boolean
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  name: String
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
  updated_at: timestamp
}

"""
aggregate stddev on columns
"""
type users_stddev_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by stddev() on columns of table "users"
"""
input users_stddev_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
aggregate stddev_pop on columns
"""
type users_stddev_pop_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by stddev_pop() on columns of table "users"
"""
input users_stddev_pop_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
aggregate stddev_samp on columns
"""
type users_stddev_samp_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by stddev_samp() on columns of table "users"
"""
input users_stddev_samp_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
  address: String
  bio: String
  circle_id: bigint
  created_at: timestamp
  deleted_at: timestamp
  entrance: String
  epoch_first_visit: Boolean
  fixed_non_receiver: Boolean
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  name: String
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type users_sum_fields {
  circle_id: bigint
  fixed_payment_amount: numeric
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  role: Int
  starting_tokens: Int
}

"""
order by sum() on columns of table "users"
"""
input users_sum_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  address

  """
  column name
  """
  bio

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  entrance

  """
  column name
  """
  epoch_first_visit

  """
  column name
  """
  fixed_non_receiver

  """
  column name
  """
  fixed_payment_amount

  """
  column name
  """
  give_token_received

  """
  column name
  """
  give_token_remaining

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  non_giver

  """
  column name
  """
  non_receiver

  """
  column name
  """
  role

  """
  column name
  """
  starting_tokens

  """
  column name
  """
  updated_at
}

input users_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: users_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: users_set_input
  where: users_bool_exp!
}

"""
aggregate var_pop on columns
"""
type users_var_pop_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by var_pop() on columns of table "users"
"""
input users_var_pop_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
aggregate var_samp on columns
"""
type users_var_samp_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by var_samp() on columns of table "users"
"""
input users_var_samp_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
aggregate variance on columns
"""
type users_variance_fields {
  circle_id: Float
  fixed_payment_amount: Float
  give_token_received: Float
  give_token_remaining: Float
  id: Float
  role: Float
  starting_tokens: Float
}

"""
order by variance() on columns of table "users"
"""
input users_variance_order_by {
  circle_id: order_by
  fixed_payment_amount: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  role: order_by
  starting_tokens: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "vault_transactions"
"""
type vault_transactions {
  """
  An object relationship
  """
  circle: circles
  circle_id: bigint
  created_at: timestamp!
  created_by: bigint

  """
  An object relationship
  """
  distribution: distributions
  distribution_id: bigint
  id: bigint!

  """
  An object relationship
  """
  profile: profiles
  tx_hash: String!
  tx_type: vault_tx_types_enum!
  updated_at: timestamp!

  """
  An object relationship
  """
  vault: vaults!
  vault_id: bigint!

  """
  An object relationship
  """
  vault_tx_type: vault_tx_types!
}

"""
aggregated selection of "vault_transactions"
"""
type vault_transactions_aggregate {
  aggregate: vault_transactions_aggregate_fields
  nodes: [vault_transactions!]!
}

"""
aggregate fields of "vault_transactions"
"""
type vault_transactions_aggregate_fields {
  avg: vault_transactions_avg_fields
  count(columns: [vault_transactions_select_column!], distinct: Boolean): Int!
  max: vault_transactions_max_fields
  min: vault_transactions_min_fields
  stddev: vault_transactions_stddev_fields
  stddev_pop: vault_transactions_stddev_pop_fields
  stddev_samp: vault_transactions_stddev_samp_fields
  sum: vault_transactions_sum_fields
  var_pop: vault_transactions_var_pop_fields
  var_samp: vault_transactions_var_samp_fields
  variance: vault_transactions_variance_fields
}

"""
order by aggregate values of table "vault_transactions"
"""
input vault_transactions_aggregate_order_by {
  avg: vault_transactions_avg_order_by
  count: order_by
  max: vault_transactions_max_order_by
  min: vault_transactions_min_order_by
  stddev: vault_transactions_stddev_order_by
  stddev_pop: vault_transactions_stddev_pop_order_by
  stddev_samp: vault_transactions_stddev_samp_order_by
  sum: vault_transactions_sum_order_by
  var_pop: vault_transactions_var_pop_order_by
  var_samp: vault_transactions_var_samp_order_by
  variance: vault_transactions_variance_order_by
}

"""
input type for inserting array relation for remote table "vault_transactions"
"""
input vault_transactions_arr_rel_insert_input {
  data: [vault_transactions_insert_input!]!

  """
  upsert condition
  """
  on_conflict: vault_transactions_on_conflict
}

"""
aggregate avg on columns
"""
type vault_transactions_avg_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by avg() on columns of table "vault_transactions"
"""
input vault_transactions_avg_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
Boolean expression to filter rows from the table "vault_transactions". All fields are combined with a logical 'AND'.
"""
input vault_transactions_bool_exp {
  _and: [vault_transactions_bool_exp!]
  _not: vault_transactions_bool_exp
  _or: [vault_transactions_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  created_by: bigint_comparison_exp
  distribution: distributions_bool_exp
  distribution_id: bigint_comparison_exp
  id: bigint_comparison_exp
  profile: profiles_bool_exp
  tx_hash: String_comparison_exp
  tx_type: vault_tx_types_enum_comparison_exp
  updated_at: timestamp_comparison_exp
  vault: vaults_bool_exp
  vault_id: bigint_comparison_exp
  vault_tx_type: vault_tx_types_bool_exp
}

"""
unique or primary key constraints on table "vault_transactions"
"""
enum vault_transactions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  vault_transactions_pkey
}

"""
input type for incrementing numeric columns in table "vault_transactions"
"""
input vault_transactions_inc_input {
  circle_id: bigint
  created_by: bigint
  distribution_id: bigint
  id: bigint
  vault_id: bigint
}

"""
input type for inserting data into table "vault_transactions"
"""
input vault_transactions_insert_input {
  circle: circles_obj_rel_insert_input
  circle_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution: distributions_obj_rel_insert_input
  distribution_id: bigint
  id: bigint
  profile: profiles_obj_rel_insert_input
  tx_hash: String
  tx_type: vault_tx_types_enum
  updated_at: timestamp
  vault: vaults_obj_rel_insert_input
  vault_id: bigint
  vault_tx_type: vault_tx_types_obj_rel_insert_input
}

"""
aggregate max on columns
"""
type vault_transactions_max_fields {
  circle_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  id: bigint
  tx_hash: String
  updated_at: timestamp
  vault_id: bigint
}

"""
order by max() on columns of table "vault_transactions"
"""
input vault_transactions_max_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  tx_hash: order_by
  updated_at: order_by
  vault_id: order_by
}

"""
aggregate min on columns
"""
type vault_transactions_min_fields {
  circle_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  id: bigint
  tx_hash: String
  updated_at: timestamp
  vault_id: bigint
}

"""
order by min() on columns of table "vault_transactions"
"""
input vault_transactions_min_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  tx_hash: order_by
  updated_at: order_by
  vault_id: order_by
}

"""
response of any mutation on the table "vault_transactions"
"""
type vault_transactions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [vault_transactions!]!
}

"""
on_conflict condition type for table "vault_transactions"
"""
input vault_transactions_on_conflict {
  constraint: vault_transactions_constraint!
  update_columns: [vault_transactions_update_column!]! = []
  where: vault_transactions_bool_exp
}

"""
Ordering options when selecting data from "vault_transactions".
"""
input vault_transactions_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  distribution: distributions_order_by
  distribution_id: order_by
  id: order_by
  profile: profiles_order_by
  tx_hash: order_by
  tx_type: order_by
  updated_at: order_by
  vault: vaults_order_by
  vault_id: order_by
  vault_tx_type: vault_tx_types_order_by
}

"""
primary key columns input for table: vault_transactions
"""
input vault_transactions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "vault_transactions"
"""
enum vault_transactions_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_id

  """
  column name
  """
  id

  """
  column name
  """
  tx_hash

  """
  column name
  """
  tx_type

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_id
}

"""
input type for updating data in table "vault_transactions"
"""
input vault_transactions_set_input {
  circle_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
  updated_at: timestamp
  vault_id: bigint
}

"""
aggregate stddev on columns
"""
type vault_transactions_stddev_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by stddev() on columns of table "vault_transactions"
"""
input vault_transactions_stddev_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type vault_transactions_stddev_pop_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by stddev_pop() on columns of table "vault_transactions"
"""
input vault_transactions_stddev_pop_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type vault_transactions_stddev_samp_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by stddev_samp() on columns of table "vault_transactions"
"""
input vault_transactions_stddev_samp_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
Streaming cursor of the table "vault_transactions"
"""
input vault_transactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vault_transactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vault_transactions_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
  updated_at: timestamp
  vault_id: bigint
}

"""
aggregate sum on columns
"""
type vault_transactions_sum_fields {
  circle_id: bigint
  created_by: bigint
  distribution_id: bigint
  id: bigint
  vault_id: bigint
}

"""
order by sum() on columns of table "vault_transactions"
"""
input vault_transactions_sum_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
update columns of table "vault_transactions"
"""
enum vault_transactions_update_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_id

  """
  column name
  """
  id

  """
  column name
  """
  tx_hash

  """
  column name
  """
  tx_type

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_id
}

input vault_transactions_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: vault_transactions_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: vault_transactions_set_input
  where: vault_transactions_bool_exp!
}

"""
aggregate var_pop on columns
"""
type vault_transactions_var_pop_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by var_pop() on columns of table "vault_transactions"
"""
input vault_transactions_var_pop_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate var_samp on columns
"""
type vault_transactions_var_samp_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by var_samp() on columns of table "vault_transactions"
"""
input vault_transactions_var_samp_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate variance on columns
"""
type vault_transactions_variance_fields {
  circle_id: Float
  created_by: Float
  distribution_id: Float
  id: Float
  vault_id: Float
}

"""
order by variance() on columns of table "vault_transactions"
"""
input vault_transactions_variance_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
columns and relationships of "vault_tx_types"
"""
type vault_tx_types {
  comment: String
  value: String!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!
}

"""
aggregated selection of "vault_tx_types"
"""
type vault_tx_types_aggregate {
  aggregate: vault_tx_types_aggregate_fields
  nodes: [vault_tx_types!]!
}

"""
aggregate fields of "vault_tx_types"
"""
type vault_tx_types_aggregate_fields {
  count(columns: [vault_tx_types_select_column!], distinct: Boolean): Int!
  max: vault_tx_types_max_fields
  min: vault_tx_types_min_fields
}

"""
Boolean expression to filter rows from the table "vault_tx_types". All fields are combined with a logical 'AND'.
"""
input vault_tx_types_bool_exp {
  _and: [vault_tx_types_bool_exp!]
  _not: vault_tx_types_bool_exp
  _or: [vault_tx_types_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
  vault_transactions: vault_transactions_bool_exp
}

"""
unique or primary key constraints on table "vault_tx_types"
"""
enum vault_tx_types_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  vault_tx_types_pkey
}

enum vault_tx_types_enum {
  Claim
  Deposit
  Distribution

  """
  Deployment of new vault onchain
  """
  Vault_Deploy
  Withdraw
}

"""
Boolean expression to compare columns of type "vault_tx_types_enum". All fields are combined with logical 'AND'.
"""
input vault_tx_types_enum_comparison_exp {
  _eq: vault_tx_types_enum
  _in: [vault_tx_types_enum!]
  _is_null: Boolean
  _neq: vault_tx_types_enum
  _nin: [vault_tx_types_enum!]
}

"""
input type for inserting data into table "vault_tx_types"
"""
input vault_tx_types_insert_input {
  comment: String
  value: String
  vault_transactions: vault_transactions_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type vault_tx_types_max_fields {
  comment: String
  value: String
}

"""
aggregate min on columns
"""
type vault_tx_types_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "vault_tx_types"
"""
type vault_tx_types_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [vault_tx_types!]!
}

"""
input type for inserting object relation for remote table "vault_tx_types"
"""
input vault_tx_types_obj_rel_insert_input {
  data: vault_tx_types_insert_input!

  """
  upsert condition
  """
  on_conflict: vault_tx_types_on_conflict
}

"""
on_conflict condition type for table "vault_tx_types"
"""
input vault_tx_types_on_conflict {
  constraint: vault_tx_types_constraint!
  update_columns: [vault_tx_types_update_column!]! = []
  where: vault_tx_types_bool_exp
}

"""
Ordering options when selecting data from "vault_tx_types".
"""
input vault_tx_types_order_by {
  comment: order_by
  value: order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
}

"""
primary key columns input for table: vault_tx_types
"""
input vault_tx_types_pk_columns_input {
  value: String!
}

"""
select columns of table "vault_tx_types"
"""
enum vault_tx_types_select_column {
  """
  column name
  """
  comment

  """
  column name
  """
  value
}

"""
input type for updating data in table "vault_tx_types"
"""
input vault_tx_types_set_input {
  comment: String
  value: String
}

"""
Streaming cursor of the table "vault_tx_types"
"""
input vault_tx_types_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vault_tx_types_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vault_tx_types_stream_cursor_value_input {
  comment: String
  value: String
}

"""
update columns of table "vault_tx_types"
"""
enum vault_tx_types_update_column {
  """
  column name
  """
  comment

  """
  column name
  """
  value
}

input vault_tx_types_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: vault_tx_types_set_input
  where: vault_tx_types_bool_exp!
}

"""
columns and relationships of "vaults"
"""
type vaults {
  chain_id: Int!
  created_at: timestamptz!
  created_by: bigint!
  decimals: Int!
  deployment_block: bigint!

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!
  id: bigint!
  org_id: bigint!

  """
  An object relationship
  """
  organization: organizations!

  """
  An object relationship
  """
  profile: profiles!
  simple_token_address: String!
  symbol: String!
  token_address: String!
  updated_at: timestamptz!
  vault_address: String!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An aggregate relationship
  """
  vault_transactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): vault_transactions_aggregate!
}

"""
aggregated selection of "vaults"
"""
type vaults_aggregate {
  aggregate: vaults_aggregate_fields
  nodes: [vaults!]!
}

"""
aggregate fields of "vaults"
"""
type vaults_aggregate_fields {
  avg: vaults_avg_fields
  count(columns: [vaults_select_column!], distinct: Boolean): Int!
  max: vaults_max_fields
  min: vaults_min_fields
  stddev: vaults_stddev_fields
  stddev_pop: vaults_stddev_pop_fields
  stddev_samp: vaults_stddev_samp_fields
  sum: vaults_sum_fields
  var_pop: vaults_var_pop_fields
  var_samp: vaults_var_samp_fields
  variance: vaults_variance_fields
}

"""
order by aggregate values of table "vaults"
"""
input vaults_aggregate_order_by {
  avg: vaults_avg_order_by
  count: order_by
  max: vaults_max_order_by
  min: vaults_min_order_by
  stddev: vaults_stddev_order_by
  stddev_pop: vaults_stddev_pop_order_by
  stddev_samp: vaults_stddev_samp_order_by
  sum: vaults_sum_order_by
  var_pop: vaults_var_pop_order_by
  var_samp: vaults_var_samp_order_by
  variance: vaults_variance_order_by
}

"""
input type for inserting array relation for remote table "vaults"
"""
input vaults_arr_rel_insert_input {
  data: [vaults_insert_input!]!

  """
  upsert condition
  """
  on_conflict: vaults_on_conflict
}

"""
aggregate avg on columns
"""
type vaults_avg_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by avg() on columns of table "vaults"
"""
input vaults_avg_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
Boolean expression to filter rows from the table "vaults". All fields are combined with a logical 'AND'.
"""
input vaults_bool_exp {
  _and: [vaults_bool_exp!]
  _not: vaults_bool_exp
  _or: [vaults_bool_exp!]
  chain_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: bigint_comparison_exp
  decimals: Int_comparison_exp
  deployment_block: bigint_comparison_exp
  distributions: distributions_bool_exp
  id: bigint_comparison_exp
  org_id: bigint_comparison_exp
  organization: organizations_bool_exp
  profile: profiles_bool_exp
  simple_token_address: String_comparison_exp
  symbol: String_comparison_exp
  token_address: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  vault_address: String_comparison_exp
  vault_transactions: vault_transactions_bool_exp
}

"""
unique or primary key constraints on table "vaults"
"""
enum vaults_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  vaults_pkey

  """
  unique or primary key constraint on columns "vault_address"
  """
  vaults_vault_address_key
}

"""
input type for incrementing numeric columns in table "vaults"
"""
input vaults_inc_input {
  chain_id: Int
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  org_id: bigint
}

"""
input type for inserting data into table "vaults"
"""
input vaults_insert_input {
  chain_id: Int
  created_at: timestamptz
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  distributions: distributions_arr_rel_insert_input
  id: bigint
  org_id: bigint
  organization: organizations_obj_rel_insert_input
  profile: profiles_obj_rel_insert_input
  simple_token_address: String
  symbol: String
  token_address: String
  updated_at: timestamptz
  vault_address: String
  vault_transactions: vault_transactions_arr_rel_insert_input
}

"""
aggregate max on columns
"""
type vaults_max_fields {
  chain_id: Int
  created_at: timestamptz
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  org_id: bigint
  simple_token_address: String
  symbol: String
  token_address: String
  updated_at: timestamptz
  vault_address: String
}

"""
order by max() on columns of table "vaults"
"""
input vaults_max_order_by {
  chain_id: order_by
  created_at: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
  simple_token_address: order_by
  symbol: order_by
  token_address: order_by
  updated_at: order_by
  vault_address: order_by
}

"""
aggregate min on columns
"""
type vaults_min_fields {
  chain_id: Int
  created_at: timestamptz
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  org_id: bigint
  simple_token_address: String
  symbol: String
  token_address: String
  updated_at: timestamptz
  vault_address: String
}

"""
order by min() on columns of table "vaults"
"""
input vaults_min_order_by {
  chain_id: order_by
  created_at: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
  simple_token_address: order_by
  symbol: order_by
  token_address: order_by
  updated_at: order_by
  vault_address: order_by
}

"""
response of any mutation on the table "vaults"
"""
type vaults_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [vaults!]!
}

"""
input type for inserting object relation for remote table "vaults"
"""
input vaults_obj_rel_insert_input {
  data: vaults_insert_input!

  """
  upsert condition
  """
  on_conflict: vaults_on_conflict
}

"""
on_conflict condition type for table "vaults"
"""
input vaults_on_conflict {
  constraint: vaults_constraint!
  update_columns: [vaults_update_column!]! = []
  where: vaults_bool_exp
}

"""
Ordering options when selecting data from "vaults".
"""
input vaults_order_by {
  chain_id: order_by
  created_at: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  distributions_aggregate: distributions_aggregate_order_by
  id: order_by
  org_id: order_by
  organization: organizations_order_by
  profile: profiles_order_by
  simple_token_address: order_by
  symbol: order_by
  token_address: order_by
  updated_at: order_by
  vault_address: order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
}

"""
primary key columns input for table: vaults
"""
input vaults_pk_columns_input {
  id: bigint!
}

"""
select columns of table "vaults"
"""
enum vaults_select_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  decimals

  """
  column name
  """
  deployment_block

  """
  column name
  """
  id

  """
  column name
  """
  org_id

  """
  column name
  """
  simple_token_address

  """
  column name
  """
  symbol

  """
  column name
  """
  token_address

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_address
}

"""
input type for updating data in table "vaults"
"""
input vaults_set_input {
  chain_id: Int
  created_at: timestamptz
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  org_id: bigint
  simple_token_address: String
  symbol: String
  token_address: String
  updated_at: timestamptz
  vault_address: String
}

"""
aggregate stddev on columns
"""
type vaults_stddev_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by stddev() on columns of table "vaults"
"""
input vaults_stddev_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type vaults_stddev_pop_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by stddev_pop() on columns of table "vaults"
"""
input vaults_stddev_pop_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type vaults_stddev_samp_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by stddev_samp() on columns of table "vaults"
"""
input vaults_stddev_samp_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
Streaming cursor of the table "vaults"
"""
input vaults_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vaults_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vaults_stream_cursor_value_input {
  chain_id: Int
  created_at: timestamptz
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  org_id: bigint
  simple_token_address: String
  symbol: String
  token_address: String
  updated_at: timestamptz
  vault_address: String
}

"""
aggregate sum on columns
"""
type vaults_sum_fields {
  chain_id: Int
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  org_id: bigint
}

"""
order by sum() on columns of table "vaults"
"""
input vaults_sum_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
update columns of table "vaults"
"""
enum vaults_update_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  decimals

  """
  column name
  """
  deployment_block

  """
  column name
  """
  id

  """
  column name
  """
  org_id

  """
  column name
  """
  simple_token_address

  """
  column name
  """
  symbol

  """
  column name
  """
  token_address

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_address
}

input vaults_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: vaults_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: vaults_set_input
  where: vaults_bool_exp!
}

"""
aggregate var_pop on columns
"""
type vaults_var_pop_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by var_pop() on columns of table "vaults"
"""
input vaults_var_pop_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
aggregate var_samp on columns
"""
type vaults_var_samp_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by var_samp() on columns of table "vaults"
"""
input vaults_var_samp_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
aggregate variance on columns
"""
type vaults_variance_fields {
  chain_id: Float
  created_by: Float
  decimals: Float
  deployment_block: Float
  id: Float
  org_id: Float
}

"""
order by variance() on columns of table "vaults"
"""
input vaults_variance_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  org_id: order_by
}

"""
columns and relationships of "vouches"
"""
type vouches {
  created_at: timestamp!
  id: bigint!

  """
  An object relationship
  """
  nominee: nominees
  nominee_id: Int!
  updated_at: timestamp!

  """
  An object relationship
  """
  voucher: users
  voucher_id: Int!
}

"""
aggregated selection of "vouches"
"""
type vouches_aggregate {
  aggregate: vouches_aggregate_fields
  nodes: [vouches!]!
}

"""
aggregate fields of "vouches"
"""
type vouches_aggregate_fields {
  avg: vouches_avg_fields
  count(columns: [vouches_select_column!], distinct: Boolean): Int!
  max: vouches_max_fields
  min: vouches_min_fields
  stddev: vouches_stddev_fields
  stddev_pop: vouches_stddev_pop_fields
  stddev_samp: vouches_stddev_samp_fields
  sum: vouches_sum_fields
  var_pop: vouches_var_pop_fields
  var_samp: vouches_var_samp_fields
  variance: vouches_variance_fields
}

"""
order by aggregate values of table "vouches"
"""
input vouches_aggregate_order_by {
  avg: vouches_avg_order_by
  count: order_by
  max: vouches_max_order_by
  min: vouches_min_order_by
  stddev: vouches_stddev_order_by
  stddev_pop: vouches_stddev_pop_order_by
  stddev_samp: vouches_stddev_samp_order_by
  sum: vouches_sum_order_by
  var_pop: vouches_var_pop_order_by
  var_samp: vouches_var_samp_order_by
  variance: vouches_variance_order_by
}

"""
input type for inserting array relation for remote table "vouches"
"""
input vouches_arr_rel_insert_input {
  data: [vouches_insert_input!]!

  """
  upsert condition
  """
  on_conflict: vouches_on_conflict
}

"""
aggregate avg on columns
"""
type vouches_avg_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by avg() on columns of table "vouches"
"""
input vouches_avg_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
Boolean expression to filter rows from the table "vouches". All fields are combined with a logical 'AND'.
"""
input vouches_bool_exp {
  _and: [vouches_bool_exp!]
  _not: vouches_bool_exp
  _or: [vouches_bool_exp!]
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  nominee: nominees_bool_exp
  nominee_id: Int_comparison_exp
  updated_at: timestamp_comparison_exp
  voucher: users_bool_exp
  voucher_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "vouches"
"""
enum vouches_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  vouches_pkey
}

"""
input type for incrementing numeric columns in table "vouches"
"""
input vouches_inc_input {
  id: bigint
  nominee_id: Int
  voucher_id: Int
}

"""
input type for inserting data into table "vouches"
"""
input vouches_insert_input {
  created_at: timestamp
  id: bigint
  nominee: nominees_obj_rel_insert_input
  nominee_id: Int
  updated_at: timestamp
  voucher: users_obj_rel_insert_input
  voucher_id: Int
}

"""
aggregate max on columns
"""
type vouches_max_fields {
  created_at: timestamp
  id: bigint
  nominee_id: Int
  updated_at: timestamp
  voucher_id: Int
}

"""
order by max() on columns of table "vouches"
"""
input vouches_max_order_by {
  created_at: order_by
  id: order_by
  nominee_id: order_by
  updated_at: order_by
  voucher_id: order_by
}

"""
aggregate min on columns
"""
type vouches_min_fields {
  created_at: timestamp
  id: bigint
  nominee_id: Int
  updated_at: timestamp
  voucher_id: Int
}

"""
order by min() on columns of table "vouches"
"""
input vouches_min_order_by {
  created_at: order_by
  id: order_by
  nominee_id: order_by
  updated_at: order_by
  voucher_id: order_by
}

"""
response of any mutation on the table "vouches"
"""
type vouches_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [vouches!]!
}

"""
on_conflict condition type for table "vouches"
"""
input vouches_on_conflict {
  constraint: vouches_constraint!
  update_columns: [vouches_update_column!]! = []
  where: vouches_bool_exp
}

"""
Ordering options when selecting data from "vouches".
"""
input vouches_order_by {
  created_at: order_by
  id: order_by
  nominee: nominees_order_by
  nominee_id: order_by
  updated_at: order_by
  voucher: users_order_by
  voucher_id: order_by
}

"""
primary key columns input for table: vouches
"""
input vouches_pk_columns_input {
  id: bigint!
}

"""
select columns of table "vouches"
"""
enum vouches_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  nominee_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  voucher_id
}

"""
input type for updating data in table "vouches"
"""
input vouches_set_input {
  created_at: timestamp
  id: bigint
  nominee_id: Int
  updated_at: timestamp
  voucher_id: Int
}

"""
aggregate stddev on columns
"""
type vouches_stddev_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by stddev() on columns of table "vouches"
"""
input vouches_stddev_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type vouches_stddev_pop_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by stddev_pop() on columns of table "vouches"
"""
input vouches_stddev_pop_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type vouches_stddev_samp_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by stddev_samp() on columns of table "vouches"
"""
input vouches_stddev_samp_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
Streaming cursor of the table "vouches"
"""
input vouches_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vouches_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vouches_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  nominee_id: Int
  updated_at: timestamp
  voucher_id: Int
}

"""
aggregate sum on columns
"""
type vouches_sum_fields {
  id: bigint
  nominee_id: Int
  voucher_id: Int
}

"""
order by sum() on columns of table "vouches"
"""
input vouches_sum_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
update columns of table "vouches"
"""
enum vouches_update_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  nominee_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  voucher_id
}

input vouches_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: vouches_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: vouches_set_input
  where: vouches_bool_exp!
}

"""
aggregate var_pop on columns
"""
type vouches_var_pop_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by var_pop() on columns of table "vouches"
"""
input vouches_var_pop_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
aggregate var_samp on columns
"""
type vouches_var_samp_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by var_samp() on columns of table "vouches"
"""
input vouches_var_samp_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
aggregate variance on columns
"""
type vouches_variance_fields {
  id: Float
  nominee_id: Float
  voucher_id: Float
}

"""
order by variance() on columns of table "vouches"
"""
input vouches_variance_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}
