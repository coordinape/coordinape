schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

type AcceptTOSOutput {
  tos_agreed_at: String!
}

input AddEmailInput {
  co_links: Boolean!
  email: String!
}

input AdminUpdateUserInput {
  circle_id: Int!
  fixed_non_receiver: Boolean
  fixed_payment_amount: Float
  name: String
  non_giver: Boolean
  non_receiver: Boolean
  profile_id: Int!
  role: Int
  starting_tokens: Int
}

input Allocation {
  note: String!
  recipient_id: Int!
  tokens: Int!
}

input AllocationCsvInput {
  circle_id: Int!
  epoch: Int
  epoch_id: Int
  form_gift_amount: Float
  gift_token_symbol: String
  grant: Float
}

type AllocationCsvResponse {
  file: String!
}

input Allocations {
  allocations: [Allocation!]
  circle_id: Int!
  user_id: Int
}

type AllocationsResponse {
  user: users
  user_id: Int!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

type Cast {
  address: String!
  avatar_url: String!
  created_at: String!
  embeds: [CastEmbed!]!
  fid: bigint!
  fname: String!
  hash: String!
  id: bigint!
  like_count: Int!
  mentioned_addresses: [CastMention!]!
  recast_count: Int!
  replies_count: Int!
  text: String!
  text_with_mentions: String!
}

type CastEmbed {
  type: String!
  url: String!
}

type CastMention {
  address: String!
  fname: String!
}

type CheckEthDenverInviteeOutput {
  is_eth_denver_invitee: Boolean!
}

type ConfirmationResponse {
  success: Boolean!
}

type ConfirmationWithErrorResponse {
  error: String
  success: Boolean!
}

input CoordinapeInput {
  circle_id: Int!
}

input CreateCircleInput {
  circle_name: String!
  contact: String
  image_data_base64: String
  organization_id: Int
  organization_name: String
  user_name: String!
}

type CreateCircleResponse {
  circle: circles
  id: Int!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
}

input CreateCoLinksGiveInput {
  activity_id: Int
  address: String
  cast_hash: String
  skill: String
}

type CreateCoLinksGiveResponse {
  id: Int!
}

input CreateEpochInput {
  circle_id: Int!
  grant: Float
  params: EpochInputParams!
}

input CreateNomineeInput {
  address: String!
  circle_id: Int!
  description: String!
  name: String!
}

type CreateNomineeResponse {
  id: Int
  nominee: nominees
}

input CreateOrgMembersInput {
  org_id: Int!
  users: [UserObj]!
}

type CreateSampleCircleResponse {
  circle: circles
  id: Int!
}

input CreateUserWithTokenInput {
  token: String!
}

input CreateUsersInput {
  circle_id: Int!
  users: [UserObj]!
}

input CreateVaultInput {
  chain_id: Int!
  deployment_block: Int!
  org_id: Int!
  tx_hash: String!
  vault_address: String!
}

input DeleteCircleInput {
  circle_id: Int!
}

input DeleteCoLinksGiveInput {
  give_id: Int!
}

input DeleteContributionInput {
  contribution_id: Int!
}

input DeleteEmailInput {
  email: String!
}

input DeleteEpochInput {
  circle_id: Int!
  id: Int!
}

type DeleteEpochResponse {
  success: Boolean!
}

input DeleteUserInput {
  circle_id: Int!
  profile_id: Int!
}

input DeleteUsersInput {
  addresses: [String!]!
  circle_id: Int!
}

type DeleteUsersResponse {
  success: Boolean!
}

input EndEpochInput {
  circle_id: Int!
  id: Int!
}

input EpochInputParams {
  duration: Int
  duration_unit: String
  end_date: timestamptz!
  frequency: Int
  frequency_unit: String
  start_date: timestamptz!
  time_zone: String
  type: String!
  week: Int
  weekday: Int
}

type EpochResponse {
  epoch: epochs
  id: ID!
}

input GenerateApiKeyInput {
  circle_id: Int!
  create_contributions: Boolean
  create_vouches: Boolean
  manage_users: Boolean
  name: String!
  read_circle: Boolean
  read_contributions: Boolean
  read_discord: Boolean
  read_epochs: Boolean
  read_member_profiles: Boolean
  read_nominees: Boolean
  read_pending_token_gifts: Boolean
  update_circle: Boolean
  update_pending_token_gifts: Boolean
}

type GenerateApiKeyResponse {
  api_key: String!
  circleApiKey: circle_api_keys
  hash: String!
}

input GetCastsInput {
  cast_ids: [bigint!]
  fid: bigint
}

type GetCastsOutput {
  casts: [Cast!]!
}

input GiveCsvInput {
  circle_id: Int!
  epoch: Int
  epoch_id: Int
}

type GiveCsvResponse {
  file: String!
}

type GuildAdmin {
  address: String!
}

input GuildInfoInput {
  id: String!
}

type GuildInfoOutput {
  admins: [GuildAdmin]
  description: String!
  id: Int!
  image_url: String!
  member_count: Int!
  name: String!
  roles: [GuildRole]
  url_name: String!
}

type GuildRole {
  id: Int!
  image_url: String!
  member_count: Int!
  name: String!
}

type HeadlinesOutput {
  activity: activities
  activity_id: Int!
  description: String!
  headline: String!
}

input IdInput {
  id: Int!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

input LogVaultTxInput {
  amount: Float
  circle_id: Int
  distribution_id: Int
  org_id: Int
  symbol: String
  tx_hash: String!
  tx_type: String!
  vault_id: Int!
}

type LogVaultTxResponse {
  id: ID!
  vault_tx_return_object: vault_transactions
}

type LogoutResponse {
  id: Int
  profile: profiles
}

input MarkClaimedInput {
  claim_id: Int!
  tx_hash: String!
}

type MarkClaimedOutput {
  ids: [Int!]!
}

type OrgMemberResponse {
  OrgMemberResponse: org_members
  id: ID!
  new: Boolean!
}

input RedeemInviteCodeInput {
  code: String!
}

input RequestInviteCodeInput {
  email: String!
}

input SearchCosoulsInput {
  search_query: String!
}

type SearchCosoulsOutput {
  cosoul_ids: [Int!]!
}

input SearchProfilesInput {
  limit: Int
  search_query: String!
}

type SearchProfilesOutput {
  profile_id: Int!
  profile_public: profiles_public
  similarity: Float!
}

input SetPrimaryEmailInput {
  email: String!
}

input ShareInput {
  activity_id: Int!
}

type ShareOutput {
  token: String!
}

input SimilarProfileInput {
  address: String!
}

type SimilarProfileOutput {
  profile_id: Int!
  profile_public: profiles_public
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

type SuccessResponse {
  success: Boolean!
}

input SyncCoSoulInput {
  tx_hash: String!
}

type SyncCoSoulOutput {
  token_id: String
}

input UpdateCircleInput {
  alloc_text: String
  allow_distribute_evenly: Boolean
  auto_opt_out: Boolean
  circle_id: Int!
  cont_help_text: String
  default_opt_in: Boolean
  discord_webhook: String
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  guild_id: Int
  guild_role_id: Int
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  only_giver_vouch: Boolean
  show_pending_gives: Boolean
  team_selection: Boolean
  token_name: String
  update_webhook: Boolean
  vouching: Boolean
  vouching_text: String
}

type UpdateCircleOutput {
  circle: circles
  id: Int!
}

type UpdateCircleResponse {
  circle: circles
  id: Int!
}

input UpdateCircleStartingGiveInput {
  circle_id: Int!
  starting_tokens: Int!
}

input UpdateContributionInput {
  description: String!
  id: Int!
}

type UpdateContributionResponse {
  id: ID!
  updateContribution_Contribution: contributions
}

input UpdateEpochInput {
  circle_id: Int!
  description: String
  grant: Float
  id: Int!
  params: EpochInputParams
}

type UpdateOrgResponse {
  id: Int!
  org: organizations
}

input UpdateProfileInput {
  bio: String
  description: String
  discord_username: String
  github_username: String
  medium_username: String
  name: String!
  skills: String
  telegram_username: String
  twitter_username: String
  website: String
}

type UpdateProfileResponse {
  id: Int!
  profile: profiles
}

input UpdateTeammatesInput {
  circle_id: Int!
  teammates: [Int]!
}

type UpdateTeammatesResponse {
  user: users
  user_id: ID!
}

input UpdateUserInput {
  bio: String
  circle_id: Int!
  epoch_first_visit: Boolean
  non_receiver: Boolean
}

input UploadCircleImageInput {
  circle_id: Int!
  image_data_base64: String!
}

input UploadImageInput {
  url: String!
}

input UploadOrgImageInput {
  image_data_base64: String!
  org_id: Int!
}

type UploadUrlResponse {
  errors: [String]
  messages: [String]
  result: UploadUrlResult
  result_info: String
  success: Boolean
}

type UploadUrlResult {
  id: String
  upload_url: String
}

input UserObj {
  address: String!
  entrance: String
  fixed_non_receiver: Boolean
  name: String!
  non_giver: Boolean
  non_receiver: Boolean
  role: Int
  starting_tokens: Int
}

type UserResponse {
  UserResponse: users
  id: ID!
}

type VaultResponse {
  id: ID!
  vault: vaults
}

input VouchInput {
  nominee_id: Int!
}

type VouchOutput {
  id: Int!
  nominee: nominees
}

"""
Table containing activity on our platform
"""
type activities {
  action: String!

  """
  An object relationship
  """
  actor_profile: profiles
  actor_profile_id: bigint

  """
  An object relationship
  """
  actor_profile_public: profiles_public

  """
  An object relationship
  """
  big_question: big_questions
  big_question_id: bigint
  cast_id: bigint

  """
  An object relationship
  """
  circle: circles
  circle_id: bigint

  """
  An object relationship
  """
  contribution: contributions
  contribution_id: bigint
  created_at: timestamptz!

  """
  An object relationship
  """
  enriched_cast: enriched_casts

  """
  An object relationship
  """
  epoch: epochs
  epoch_id: bigint

  """
  An array relationship
  """
  gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!
  id: bigint!

  """
  An object relationship
  """
  organization: organizations
  organization_id: bigint
  private_stream: Boolean!

  """
  An array relationship
  """
  private_stream_visibility(
    """
    distinct select on columns
    """
    distinct_on: [private_stream_visibility_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [private_stream_visibility_order_by!]

    """
    filter the rows returned
    """
    where: private_stream_visibility_bool_exp
  ): [private_stream_visibility!]!
  reaction_count: Int!

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  An aggregate relationship
  """
  reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): reactions_aggregate!

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  An aggregate relationship
  """
  replies_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): replies_aggregate!
  reply_count: Int!

  """
  An object relationship
  """
  target_profile: profiles
  target_profile_id: bigint

  """
  An object relationship
  """
  target_profile_public: profiles_public
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users
}

"""
aggregated selection of "activities"
"""
type activities_aggregate {
  aggregate: activities_aggregate_fields
  nodes: [activities!]!
}

input activities_aggregate_bool_exp {
  bool_and: activities_aggregate_bool_exp_bool_and
  bool_or: activities_aggregate_bool_exp_bool_or
  count: activities_aggregate_bool_exp_count
}

input activities_aggregate_bool_exp_bool_and {
  arguments: activities_select_column_activities_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: activities_bool_exp
  predicate: Boolean_comparison_exp!
}

input activities_aggregate_bool_exp_bool_or {
  arguments: activities_select_column_activities_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: activities_bool_exp
  predicate: Boolean_comparison_exp!
}

input activities_aggregate_bool_exp_count {
  arguments: [activities_select_column!]
  distinct: Boolean
  filter: activities_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "activities"
"""
type activities_aggregate_fields {
  avg: activities_avg_fields
  count(columns: [activities_select_column!], distinct: Boolean): Int!
  max: activities_max_fields
  min: activities_min_fields
  stddev: activities_stddev_fields
  stddev_pop: activities_stddev_pop_fields
  stddev_samp: activities_stddev_samp_fields
  sum: activities_sum_fields
  var_pop: activities_var_pop_fields
  var_samp: activities_var_samp_fields
  variance: activities_variance_fields
}

"""
order by aggregate values of table "activities"
"""
input activities_aggregate_order_by {
  avg: activities_avg_order_by
  count: order_by
  max: activities_max_order_by
  min: activities_min_order_by
  stddev: activities_stddev_order_by
  stddev_pop: activities_stddev_pop_order_by
  stddev_samp: activities_stddev_samp_order_by
  sum: activities_sum_order_by
  var_pop: activities_var_pop_order_by
  var_samp: activities_var_samp_order_by
  variance: activities_variance_order_by
}

"""
aggregate avg on columns
"""
type activities_avg_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by avg() on columns of table "activities"
"""
input activities_avg_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
Boolean expression to filter rows from the table "activities". All fields are combined with a logical 'AND'.
"""
input activities_bool_exp {
  _and: [activities_bool_exp!]
  _not: activities_bool_exp
  _or: [activities_bool_exp!]
  action: String_comparison_exp
  actor_profile: profiles_bool_exp
  actor_profile_id: bigint_comparison_exp
  actor_profile_public: profiles_public_bool_exp
  big_question: big_questions_bool_exp
  big_question_id: bigint_comparison_exp
  cast_id: bigint_comparison_exp
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  contribution: contributions_bool_exp
  contribution_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  enriched_cast: enriched_casts_bool_exp
  epoch: epochs_bool_exp
  epoch_id: bigint_comparison_exp
  gives: colinks_gives_bool_exp
  gives_aggregate: colinks_gives_aggregate_bool_exp
  id: bigint_comparison_exp
  organization: organizations_bool_exp
  organization_id: bigint_comparison_exp
  private_stream: Boolean_comparison_exp
  private_stream_visibility: private_stream_visibility_bool_exp
  reaction_count: Int_comparison_exp
  reactions: reactions_bool_exp
  reactions_aggregate: reactions_aggregate_bool_exp
  replies: replies_bool_exp
  replies_aggregate: replies_aggregate_bool_exp
  reply_count: Int_comparison_exp
  target_profile: profiles_bool_exp
  target_profile_id: bigint_comparison_exp
  target_profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
}

"""
aggregate max on columns
"""
type activities_max_fields {
  action: String
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "activities"
"""
input activities_max_order_by {
  action: order_by
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type activities_min_fields {
  action: String
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "activities"
"""
input activities_min_order_by {
  action: order_by
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "activities".
"""
input activities_order_by {
  action: order_by
  actor_profile: profiles_order_by
  actor_profile_id: order_by
  actor_profile_public: profiles_public_order_by
  big_question: big_questions_order_by
  big_question_id: order_by
  cast_id: order_by
  circle: circles_order_by
  circle_id: order_by
  contribution: contributions_order_by
  contribution_id: order_by
  created_at: order_by
  enriched_cast: enriched_casts_order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gives_aggregate: colinks_gives_aggregate_order_by
  id: order_by
  organization: organizations_order_by
  organization_id: order_by
  private_stream: order_by
  private_stream_visibility_aggregate: private_stream_visibility_aggregate_order_by
  reaction_count: order_by
  reactions_aggregate: reactions_aggregate_order_by
  replies_aggregate: replies_aggregate_order_by
  reply_count: order_by
  target_profile: profiles_order_by
  target_profile_id: order_by
  target_profile_public: profiles_public_order_by
  updated_at: order_by
  user: users_order_by
}

"""
select columns of table "activities"
"""
enum activities_select_column {
  """
  column name
  """
  action

  """
  column name
  """
  actor_profile_id

  """
  column name
  """
  big_question_id

  """
  column name
  """
  cast_id

  """
  column name
  """
  circle_id

  """
  column name
  """
  contribution_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  organization_id

  """
  column name
  """
  private_stream

  """
  column name
  """
  reaction_count

  """
  column name
  """
  reply_count

  """
  column name
  """
  target_profile_id

  """
  column name
  """
  updated_at
}

"""
select "activities_aggregate_bool_exp_bool_and_arguments_columns" columns of table "activities"
"""
enum activities_select_column_activities_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  private_stream
}

"""
select "activities_aggregate_bool_exp_bool_or_arguments_columns" columns of table "activities"
"""
enum activities_select_column_activities_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  private_stream
}

"""
aggregate stddev on columns
"""
type activities_stddev_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by stddev() on columns of table "activities"
"""
input activities_stddev_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type activities_stddev_pop_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by stddev_pop() on columns of table "activities"
"""
input activities_stddev_pop_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type activities_stddev_samp_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by stddev_samp() on columns of table "activities"
"""
input activities_stddev_samp_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
Streaming cursor of the table "activities"
"""
input activities_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: activities_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input activities_stream_cursor_value_input {
  action: String
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  created_at: timestamptz
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  private_stream: Boolean
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type activities_sum_fields {
  actor_profile_id: bigint
  big_question_id: bigint
  cast_id: bigint
  circle_id: bigint
  contribution_id: bigint
  epoch_id: bigint
  id: bigint
  organization_id: bigint
  reaction_count: Int
  reply_count: Int
  target_profile_id: bigint
}

"""
order by sum() on columns of table "activities"
"""
input activities_sum_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
aggregate var_pop on columns
"""
type activities_var_pop_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by var_pop() on columns of table "activities"
"""
input activities_var_pop_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type activities_var_samp_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by var_samp() on columns of table "activities"
"""
input activities_var_samp_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
aggregate variance on columns
"""
type activities_variance_fields {
  actor_profile_id: Float
  big_question_id: Float
  cast_id: Float
  circle_id: Float
  contribution_id: Float
  epoch_id: Float
  id: Float
  organization_id: Float
  reaction_count: Float
  reply_count: Float
  target_profile_id: Float
}

"""
order by variance() on columns of table "activities"
"""
input activities_variance_order_by {
  actor_profile_id: order_by
  big_question_id: order_by
  cast_id: order_by
  circle_id: order_by
  contribution_id: order_by
  epoch_id: order_by
  id: order_by
  organization_id: order_by
  reaction_count: order_by
  reply_count: order_by
  target_profile_id: order_by
}

"""
columns and relationships of "big_questions"
"""
type big_questions {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!
  cover_image_url: String!
  created_at: timestamp!
  css_background_position: String
  description: String
  expire_at: timestamp
  id: bigint!
  prompt: String!
  publish_at: timestamp
  updated_at: timestamp!
}

"""
Boolean expression to filter rows from the table "big_questions". All fields are combined with a logical 'AND'.
"""
input big_questions_bool_exp {
  _and: [big_questions_bool_exp!]
  _not: big_questions_bool_exp
  _or: [big_questions_bool_exp!]
  activities: activities_bool_exp
  activities_aggregate: activities_aggregate_bool_exp
  cover_image_url: String_comparison_exp
  created_at: timestamp_comparison_exp
  css_background_position: String_comparison_exp
  description: String_comparison_exp
  expire_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  prompt: String_comparison_exp
  publish_at: timestamp_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
Ordering options when selecting data from "big_questions".
"""
input big_questions_order_by {
  activities_aggregate: activities_aggregate_order_by
  cover_image_url: order_by
  created_at: order_by
  css_background_position: order_by
  description: order_by
  expire_at: order_by
  id: order_by
  prompt: order_by
  publish_at: order_by
  updated_at: order_by
}

"""
select columns of table "big_questions"
"""
enum big_questions_select_column {
  """
  column name
  """
  cover_image_url

  """
  column name
  """
  created_at

  """
  column name
  """
  css_background_position

  """
  column name
  """
  description

  """
  column name
  """
  expire_at

  """
  column name
  """
  id

  """
  column name
  """
  prompt

  """
  column name
  """
  publish_at

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "big_questions"
"""
input big_questions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: big_questions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input big_questions_stream_cursor_value_input {
  cover_image_url: String
  created_at: timestamp
  css_background_position: String
  description: String
  expire_at: timestamp
  id: bigint
  prompt: String
  publish_at: timestamp
  updated_at: timestamp
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_array_comparison_exp {
  """
  is the array contained in the given array value
  """
  _contained_in: [bigint!]

  """
  does the array contain the given value
  """
  _contains: [bigint!]
  _eq: [bigint!]
  _gt: [bigint!]
  _gte: [bigint!]
  _in: [[bigint!]!]
  _is_null: Boolean
  _lt: [bigint!]
  _lte: [bigint!]
  _neq: [bigint!]
  _nin: [[bigint!]!]
}

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "burns"
"""
type burns {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: bigint!
  id: bigint!
  original_amount: Int!
  regift_percent: Int!
  tokens_burnt: Int!
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users!
  user_id: bigint!
}

"""
order by aggregate values of table "burns"
"""
input burns_aggregate_order_by {
  avg: burns_avg_order_by
  count: order_by
  max: burns_max_order_by
  min: burns_min_order_by
  stddev: burns_stddev_order_by
  stddev_pop: burns_stddev_pop_order_by
  stddev_samp: burns_stddev_samp_order_by
  sum: burns_sum_order_by
  var_pop: burns_var_pop_order_by
  var_samp: burns_var_samp_order_by
  variance: burns_variance_order_by
}

"""
order by avg() on columns of table "burns"
"""
input burns_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "burns". All fields are combined with a logical 'AND'.
"""
input burns_bool_exp {
  _and: [burns_bool_exp!]
  _not: burns_bool_exp
  _or: [burns_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: bigint_comparison_exp
  id: bigint_comparison_exp
  original_amount: Int_comparison_exp
  regift_percent: Int_comparison_exp
  tokens_burnt: Int_comparison_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
order by max() on columns of table "burns"
"""
input burns_max_order_by {
  circle_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  updated_at: order_by
  user_id: order_by
}

"""
order by min() on columns of table "burns"
"""
input burns_min_order_by {
  circle_id: order_by
  created_at: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  updated_at: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "burns".
"""
input burns_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "burns"
"""
enum burns_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  original_amount

  """
  column name
  """
  regift_percent

  """
  column name
  """
  tokens_burnt

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "burns"
"""
input burns_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "burns"
"""
input burns_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "burns"
"""
input burns_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "burns"
"""
input burns_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: burns_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input burns_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  epoch_id: bigint
  id: bigint
  original_amount: Int
  regift_percent: Int
  tokens_burnt: Int
  updated_at: timestamp
  user_id: bigint
}

"""
order by sum() on columns of table "burns"
"""
input burns_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "burns"
"""
input burns_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "burns"
"""
input burns_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "burns"
"""
input burns_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  original_amount: order_by
  regift_percent: order_by
  tokens_burnt: order_by
  user_id: order_by
}

scalar bytea

"""
Boolean expression to compare columns of type "bytea". All fields are combined with logical 'AND'.
"""
input bytea_comparison_exp {
  _eq: bytea
  _gt: bytea
  _gte: bytea
  _in: [bytea!]
  _is_null: Boolean
  _lt: bytea
  _lte: bytea
  _neq: bytea
  _nin: [bytea!]
}

"""
Circle-scoped API keys with user defined permissions to allow third parties to authenticate to Coordinape's GraphQL API.
"""
type circle_api_keys {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  create_contributions: Boolean!
  create_vouches: Boolean!

  """
  An object relationship
  """
  createdByUser: users!
  created_at: timestamptz!
  created_by: bigint!
  hash: String!
  manage_users: Boolean!
  name: String!
  read_circle: Boolean!
  read_contributions: Boolean!
  read_epochs: Boolean!
  read_member_profiles: Boolean!
  read_nominees: Boolean!
  read_pending_token_gifts: Boolean!
  update_circle: Boolean!
  update_pending_token_gifts: Boolean!
}

"""
order by aggregate values of table "circle_api_keys"
"""
input circle_api_keys_aggregate_order_by {
  avg: circle_api_keys_avg_order_by
  count: order_by
  max: circle_api_keys_max_order_by
  min: circle_api_keys_min_order_by
  stddev: circle_api_keys_stddev_order_by
  stddev_pop: circle_api_keys_stddev_pop_order_by
  stddev_samp: circle_api_keys_stddev_samp_order_by
  sum: circle_api_keys_sum_order_by
  var_pop: circle_api_keys_var_pop_order_by
  var_samp: circle_api_keys_var_samp_order_by
  variance: circle_api_keys_variance_order_by
}

"""
order by avg() on columns of table "circle_api_keys"
"""
input circle_api_keys_avg_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
Boolean expression to filter rows from the table "circle_api_keys". All fields are combined with a logical 'AND'.
"""
input circle_api_keys_bool_exp {
  _and: [circle_api_keys_bool_exp!]
  _not: circle_api_keys_bool_exp
  _or: [circle_api_keys_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  create_contributions: Boolean_comparison_exp
  create_vouches: Boolean_comparison_exp
  createdByUser: users_bool_exp
  created_at: timestamptz_comparison_exp
  created_by: bigint_comparison_exp
  hash: String_comparison_exp
  manage_users: Boolean_comparison_exp
  name: String_comparison_exp
  read_circle: Boolean_comparison_exp
  read_contributions: Boolean_comparison_exp
  read_epochs: Boolean_comparison_exp
  read_member_profiles: Boolean_comparison_exp
  read_nominees: Boolean_comparison_exp
  read_pending_token_gifts: Boolean_comparison_exp
  update_circle: Boolean_comparison_exp
  update_pending_token_gifts: Boolean_comparison_exp
}

"""
order by max() on columns of table "circle_api_keys"
"""
input circle_api_keys_max_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  hash: order_by
  name: order_by
}

"""
order by min() on columns of table "circle_api_keys"
"""
input circle_api_keys_min_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  hash: order_by
  name: order_by
}

"""
response of any mutation on the table "circle_api_keys"
"""
type circle_api_keys_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_api_keys!]!
}

"""
Ordering options when selecting data from "circle_api_keys".
"""
input circle_api_keys_order_by {
  circle: circles_order_by
  circle_id: order_by
  create_contributions: order_by
  create_vouches: order_by
  createdByUser: users_order_by
  created_at: order_by
  created_by: order_by
  hash: order_by
  manage_users: order_by
  name: order_by
  read_circle: order_by
  read_contributions: order_by
  read_epochs: order_by
  read_member_profiles: order_by
  read_nominees: order_by
  read_pending_token_gifts: order_by
  update_circle: order_by
  update_pending_token_gifts: order_by
}

"""
select columns of table "circle_api_keys"
"""
enum circle_api_keys_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  create_contributions

  """
  column name
  """
  create_vouches

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  hash

  """
  column name
  """
  manage_users

  """
  column name
  """
  name

  """
  column name
  """
  read_circle

  """
  column name
  """
  read_contributions

  """
  column name
  """
  read_epochs

  """
  column name
  """
  read_member_profiles

  """
  column name
  """
  read_nominees

  """
  column name
  """
  read_pending_token_gifts

  """
  column name
  """
  update_circle

  """
  column name
  """
  update_pending_token_gifts
}

"""
order by stddev() on columns of table "circle_api_keys"
"""
input circle_api_keys_stddev_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
order by stddev_pop() on columns of table "circle_api_keys"
"""
input circle_api_keys_stddev_pop_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
order by stddev_samp() on columns of table "circle_api_keys"
"""
input circle_api_keys_stddev_samp_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
Streaming cursor of the table "circle_api_keys"
"""
input circle_api_keys_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_api_keys_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_api_keys_stream_cursor_value_input {
  circle_id: bigint
  create_contributions: Boolean
  create_vouches: Boolean
  created_at: timestamptz
  created_by: bigint
  hash: String
  manage_users: Boolean
  name: String
  read_circle: Boolean
  read_contributions: Boolean
  read_epochs: Boolean
  read_member_profiles: Boolean
  read_nominees: Boolean
  read_pending_token_gifts: Boolean
  update_circle: Boolean
  update_pending_token_gifts: Boolean
}

"""
order by sum() on columns of table "circle_api_keys"
"""
input circle_api_keys_sum_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
order by var_pop() on columns of table "circle_api_keys"
"""
input circle_api_keys_var_pop_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
order by var_samp() on columns of table "circle_api_keys"
"""
input circle_api_keys_var_samp_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
order by variance() on columns of table "circle_api_keys"
"""
input circle_api_keys_variance_order_by {
  circle_id: order_by
  created_by: order_by
}

"""
columns and relationships of "circle_integrations"
"""
type circle_integrations {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  data(
    """
    JSON select path
    """
    path: String
  ): json!
  id: bigint!
  name: String!
  type: String!
}

"""
order by aggregate values of table "circle_integrations"
"""
input circle_integrations_aggregate_order_by {
  avg: circle_integrations_avg_order_by
  count: order_by
  max: circle_integrations_max_order_by
  min: circle_integrations_min_order_by
  stddev: circle_integrations_stddev_order_by
  stddev_pop: circle_integrations_stddev_pop_order_by
  stddev_samp: circle_integrations_stddev_samp_order_by
  sum: circle_integrations_sum_order_by
  var_pop: circle_integrations_var_pop_order_by
  var_samp: circle_integrations_var_samp_order_by
  variance: circle_integrations_variance_order_by
}

"""
order by avg() on columns of table "circle_integrations"
"""
input circle_integrations_avg_order_by {
  circle_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "circle_integrations". All fields are combined with a logical 'AND'.
"""
input circle_integrations_bool_exp {
  _and: [circle_integrations_bool_exp!]
  _not: circle_integrations_bool_exp
  _or: [circle_integrations_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  data: json_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "circle_integrations"
"""
enum circle_integrations_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  circle_integrations_pkey
}

"""
input type for inserting data into table "circle_integrations"
"""
input circle_integrations_insert_input {
  circle_id: bigint
  data: json
  name: String
  type: String
}

"""
order by max() on columns of table "circle_integrations"
"""
input circle_integrations_max_order_by {
  circle_id: order_by
  id: order_by
  name: order_by
  type: order_by
}

"""
order by min() on columns of table "circle_integrations"
"""
input circle_integrations_min_order_by {
  circle_id: order_by
  id: order_by
  name: order_by
  type: order_by
}

"""
response of any mutation on the table "circle_integrations"
"""
type circle_integrations_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_integrations!]!
}

"""
on_conflict condition type for table "circle_integrations"
"""
input circle_integrations_on_conflict {
  constraint: circle_integrations_constraint!
  update_columns: [circle_integrations_update_column!]! = []
  where: circle_integrations_bool_exp
}

"""
Ordering options when selecting data from "circle_integrations".
"""
input circle_integrations_order_by {
  circle: circles_order_by
  circle_id: order_by
  data: order_by
  id: order_by
  name: order_by
  type: order_by
}

"""
primary key columns input for table: circle_integrations
"""
input circle_integrations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "circle_integrations"
"""
enum circle_integrations_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  data

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  type
}

"""
input type for updating data in table "circle_integrations"
"""
input circle_integrations_set_input {
  data: json
}

"""
order by stddev() on columns of table "circle_integrations"
"""
input circle_integrations_stddev_order_by {
  circle_id: order_by
  id: order_by
}

"""
order by stddev_pop() on columns of table "circle_integrations"
"""
input circle_integrations_stddev_pop_order_by {
  circle_id: order_by
  id: order_by
}

"""
order by stddev_samp() on columns of table "circle_integrations"
"""
input circle_integrations_stddev_samp_order_by {
  circle_id: order_by
  id: order_by
}

"""
Streaming cursor of the table "circle_integrations"
"""
input circle_integrations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_integrations_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_integrations_stream_cursor_value_input {
  circle_id: bigint
  data: json
  id: bigint
  name: String
  type: String
}

"""
order by sum() on columns of table "circle_integrations"
"""
input circle_integrations_sum_order_by {
  circle_id: order_by
  id: order_by
}

"""
update columns of table "circle_integrations"
"""
enum circle_integrations_update_column {
  """
  column name
  """
  data
}

input circle_integrations_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: circle_integrations_set_input

  """
  filter the rows which have to be updated
  """
  where: circle_integrations_bool_exp!
}

"""
order by var_pop() on columns of table "circle_integrations"
"""
input circle_integrations_var_pop_order_by {
  circle_id: order_by
  id: order_by
}

"""
order by var_samp() on columns of table "circle_integrations"
"""
input circle_integrations_var_samp_order_by {
  circle_id: order_by
  id: order_by
}

"""
order by variance() on columns of table "circle_integrations"
"""
input circle_integrations_variance_order_by {
  circle_id: order_by
  id: order_by
}

"""
columns and relationships of "circle_private"
"""
type circle_private {
  """
  An object relationship
  """
  circle: circles
  circle_id: bigint
  discord_webhook: String
}

"""
Boolean expression to filter rows from the table "circle_private". All fields are combined with a logical 'AND'.
"""
input circle_private_bool_exp {
  _and: [circle_private_bool_exp!]
  _not: circle_private_bool_exp
  _or: [circle_private_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  discord_webhook: String_comparison_exp
}

"""
Ordering options when selecting data from "circle_private".
"""
input circle_private_order_by {
  circle: circles_order_by
  circle_id: order_by
  discord_webhook: order_by
}

"""
select columns of table "circle_private"
"""
enum circle_private_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  discord_webhook
}

"""
Streaming cursor of the table "circle_private"
"""
input circle_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_private_stream_cursor_value_input {
  circle_id: bigint
  discord_webhook: String
}

"""
columns and relationships of "circle_share_tokens"
"""
type circle_share_tokens {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamptz!
  type: Int!
  updated_at: timestamptz!
  uuid: uuid!
}

"""
Boolean expression to filter rows from the table "circle_share_tokens". All fields are combined with a logical 'AND'.
"""
input circle_share_tokens_bool_exp {
  _and: [circle_share_tokens_bool_exp!]
  _not: circle_share_tokens_bool_exp
  _or: [circle_share_tokens_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  type: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "circle_share_tokens"
"""
enum circle_share_tokens_constraint {
  """
  unique or primary key constraint on columns "circle_id", "type"
  """
  circle_share_token_pkey

  """
  unique or primary key constraint on columns "uuid"
  """
  circle_share_token_uuid_key
}

"""
input type for inserting data into table "circle_share_tokens"
"""
input circle_share_tokens_insert_input {
  circle_id: bigint
  type: Int
}

"""
response of any mutation on the table "circle_share_tokens"
"""
type circle_share_tokens_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [circle_share_tokens!]!
}

"""
on_conflict condition type for table "circle_share_tokens"
"""
input circle_share_tokens_on_conflict {
  constraint: circle_share_tokens_constraint!
  update_columns: [circle_share_tokens_update_column!]! = []
  where: circle_share_tokens_bool_exp
}

"""
Ordering options when selecting data from "circle_share_tokens".
"""
input circle_share_tokens_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  type: order_by
  updated_at: order_by
  uuid: order_by
}

"""
select columns of table "circle_share_tokens"
"""
enum circle_share_tokens_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  type

  """
  column name
  """
  updated_at

  """
  column name
  """
  uuid
}

"""
Streaming cursor of the table "circle_share_tokens"
"""
input circle_share_tokens_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circle_share_tokens_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circle_share_tokens_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamptz
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
placeholder for update columns of table "circle_share_tokens" (current role has no relevant permissions)
"""
enum circle_share_tokens_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
columns and relationships of "circles"
"""
type circles {
  alloc_text: String
  allow_distribute_evenly: Boolean!

  """
  An array relationship
  """
  api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!
  auto_opt_out: Boolean!

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An object relationship
  """
  circle_private: circle_private
  cont_help_text: String

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!
  created_at: timestamp!
  default_opt_in: Boolean!
  deleted_at: timestamp

  """
  An array relationship
  """
  epochs(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  guild_id: Int
  guild_role_id: Int
  id: bigint!

  """
  An array relationship
  """
  integrations(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!
  is_verified: Boolean!
  logo: String
  min_vouches: Int!
  name: String!
  nomination_days_limit: Int!

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!
  only_giver_vouch: Boolean!

  """
  An object relationship
  """
  organization: organizations!
  organization_id: Int!

  """
  An array relationship
  """
  pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!
  show_pending_gives: Boolean!
  starting_tokens: Int!
  team_selection: Boolean!

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  token_name: String!
  updated_at: timestamp!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!
  vouching: Boolean!
  vouching_text: String
}

"""
order by aggregate values of table "circles"
"""
input circles_aggregate_order_by {
  avg: circles_avg_order_by
  count: order_by
  max: circles_max_order_by
  min: circles_min_order_by
  stddev: circles_stddev_order_by
  stddev_pop: circles_stddev_pop_order_by
  stddev_samp: circles_stddev_samp_order_by
  sum: circles_sum_order_by
  var_pop: circles_var_pop_order_by
  var_samp: circles_var_samp_order_by
  variance: circles_variance_order_by
}

"""
order by avg() on columns of table "circles"
"""
input circles_avg_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
Boolean expression to filter rows from the table "circles". All fields are combined with a logical 'AND'.
"""
input circles_bool_exp {
  _and: [circles_bool_exp!]
  _not: circles_bool_exp
  _or: [circles_bool_exp!]
  alloc_text: String_comparison_exp
  allow_distribute_evenly: Boolean_comparison_exp
  api_keys: circle_api_keys_bool_exp
  auto_opt_out: Boolean_comparison_exp
  burns: burns_bool_exp
  circle_private: circle_private_bool_exp
  cont_help_text: String_comparison_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  created_at: timestamp_comparison_exp
  default_opt_in: Boolean_comparison_exp
  deleted_at: timestamp_comparison_exp
  epochs: epochs_bool_exp
  fixed_payment_token_type: String_comparison_exp
  fixed_payment_vault_id: Int_comparison_exp
  guild_id: Int_comparison_exp
  guild_role_id: Int_comparison_exp
  id: bigint_comparison_exp
  integrations: circle_integrations_bool_exp
  is_verified: Boolean_comparison_exp
  logo: String_comparison_exp
  min_vouches: Int_comparison_exp
  name: String_comparison_exp
  nomination_days_limit: Int_comparison_exp
  nominees: nominees_bool_exp
  nominees_aggregate: nominees_aggregate_bool_exp
  only_giver_vouch: Boolean_comparison_exp
  organization: organizations_bool_exp
  organization_id: Int_comparison_exp
  pending_token_gifts: pending_token_gifts_bool_exp
  show_pending_gives: Boolean_comparison_exp
  starting_tokens: Int_comparison_exp
  team_selection: Boolean_comparison_exp
  token_gifts: token_gifts_bool_exp
  token_gifts_aggregate: token_gifts_aggregate_bool_exp
  token_name: String_comparison_exp
  updated_at: timestamp_comparison_exp
  users: users_bool_exp
  vault_transactions: vault_transactions_bool_exp
  vouching: Boolean_comparison_exp
  vouching_text: String_comparison_exp
}

"""
order by max() on columns of table "circles"
"""
input circles_max_order_by {
  alloc_text: order_by
  cont_help_text: order_by
  created_at: order_by
  deleted_at: order_by
  fixed_payment_token_type: order_by
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  logo: order_by
  min_vouches: order_by
  name: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
  token_name: order_by
  updated_at: order_by
  vouching_text: order_by
}

"""
order by min() on columns of table "circles"
"""
input circles_min_order_by {
  alloc_text: order_by
  cont_help_text: order_by
  created_at: order_by
  deleted_at: order_by
  fixed_payment_token_type: order_by
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  logo: order_by
  min_vouches: order_by
  name: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
  token_name: order_by
  updated_at: order_by
  vouching_text: order_by
}

"""
Ordering options when selecting data from "circles".
"""
input circles_order_by {
  alloc_text: order_by
  allow_distribute_evenly: order_by
  api_keys_aggregate: circle_api_keys_aggregate_order_by
  auto_opt_out: order_by
  burns_aggregate: burns_aggregate_order_by
  circle_private: circle_private_order_by
  cont_help_text: order_by
  contributions_aggregate: contributions_aggregate_order_by
  created_at: order_by
  default_opt_in: order_by
  deleted_at: order_by
  epochs_aggregate: epochs_aggregate_order_by
  fixed_payment_token_type: order_by
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  integrations_aggregate: circle_integrations_aggregate_order_by
  is_verified: order_by
  logo: order_by
  min_vouches: order_by
  name: order_by
  nomination_days_limit: order_by
  nominees_aggregate: nominees_aggregate_order_by
  only_giver_vouch: order_by
  organization: organizations_order_by
  organization_id: order_by
  pending_token_gifts_aggregate: pending_token_gifts_aggregate_order_by
  show_pending_gives: order_by
  starting_tokens: order_by
  team_selection: order_by
  token_gifts_aggregate: token_gifts_aggregate_order_by
  token_name: order_by
  updated_at: order_by
  users_aggregate: users_aggregate_order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
  vouching: order_by
  vouching_text: order_by
}

"""
select columns of table "circles"
"""
enum circles_select_column {
  """
  column name
  """
  alloc_text

  """
  column name
  """
  allow_distribute_evenly

  """
  column name
  """
  auto_opt_out

  """
  column name
  """
  cont_help_text

  """
  column name
  """
  created_at

  """
  column name
  """
  default_opt_in

  """
  column name
  """
  deleted_at

  """
  column name
  """
  fixed_payment_token_type

  """
  column name
  """
  fixed_payment_vault_id

  """
  column name
  """
  guild_id

  """
  column name
  """
  guild_role_id

  """
  column name
  """
  id

  """
  column name
  """
  is_verified

  """
  column name
  """
  logo

  """
  column name
  """
  min_vouches

  """
  column name
  """
  name

  """
  column name
  """
  nomination_days_limit

  """
  column name
  """
  only_giver_vouch

  """
  column name
  """
  organization_id

  """
  column name
  """
  show_pending_gives

  """
  column name
  """
  starting_tokens

  """
  column name
  """
  team_selection

  """
  column name
  """
  token_name

  """
  column name
  """
  updated_at

  """
  column name
  """
  vouching

  """
  column name
  """
  vouching_text
}

"""
order by stddev() on columns of table "circles"
"""
input circles_stddev_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
order by stddev_pop() on columns of table "circles"
"""
input circles_stddev_pop_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
order by stddev_samp() on columns of table "circles"
"""
input circles_stddev_samp_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
Streaming cursor of the table "circles"
"""
input circles_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: circles_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input circles_stream_cursor_value_input {
  alloc_text: String
  allow_distribute_evenly: Boolean
  auto_opt_out: Boolean
  cont_help_text: String
  created_at: timestamp
  default_opt_in: Boolean
  deleted_at: timestamp
  fixed_payment_token_type: String
  fixed_payment_vault_id: Int
  guild_id: Int
  guild_role_id: Int
  id: bigint
  is_verified: Boolean
  logo: String
  min_vouches: Int
  name: String
  nomination_days_limit: Int
  only_giver_vouch: Boolean
  organization_id: Int
  show_pending_gives: Boolean
  starting_tokens: Int
  team_selection: Boolean
  token_name: String
  updated_at: timestamp
  vouching: Boolean
  vouching_text: String
}

"""
order by sum() on columns of table "circles"
"""
input circles_sum_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
order by var_pop() on columns of table "circles"
"""
input circles_var_pop_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
order by var_samp() on columns of table "circles"
"""
input circles_var_samp_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

"""
order by variance() on columns of table "circles"
"""
input circles_variance_order_by {
  fixed_payment_vault_id: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  min_vouches: order_by
  nomination_days_limit: order_by
  organization_id: order_by
  starting_tokens: order_by
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """
  does the column NOT match the given pattern
  """
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """
  does the column match the given SQL regular expression
  """
  _similar: citext
}

"""
columns and relationships of "claims"
"""
type claims {
  address: String!
  amount: numeric!
  created_at: timestamptz!

  """
  An object relationship
  """
  distribution: distributions!
  distribution_id: bigint!
  id: bigint!
  index: bigint!
  new_amount: numeric!

  """
  An object relationship
  """
  profile: profiles
  profile_id: bigint!
  proof: String!
  txHash: String
  updated_at: timestamptz!
}

"""
aggregated selection of "claims"
"""
type claims_aggregate {
  aggregate: claims_aggregate_fields
  nodes: [claims!]!
}

input claims_aggregate_bool_exp {
  count: claims_aggregate_bool_exp_count
}

input claims_aggregate_bool_exp_count {
  arguments: [claims_select_column!]
  distinct: Boolean
  filter: claims_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "claims"
"""
type claims_aggregate_fields {
  avg: claims_avg_fields
  count(columns: [claims_select_column!], distinct: Boolean): Int!
  max: claims_max_fields
  min: claims_min_fields
  stddev: claims_stddev_fields
  stddev_pop: claims_stddev_pop_fields
  stddev_samp: claims_stddev_samp_fields
  sum: claims_sum_fields
  var_pop: claims_var_pop_fields
  var_samp: claims_var_samp_fields
  variance: claims_variance_fields
}

"""
order by aggregate values of table "claims"
"""
input claims_aggregate_order_by {
  avg: claims_avg_order_by
  count: order_by
  max: claims_max_order_by
  min: claims_min_order_by
  stddev: claims_stddev_order_by
  stddev_pop: claims_stddev_pop_order_by
  stddev_samp: claims_stddev_samp_order_by
  sum: claims_sum_order_by
  var_pop: claims_var_pop_order_by
  var_samp: claims_var_samp_order_by
  variance: claims_variance_order_by
}

"""
input type for inserting array relation for remote table "claims"
"""
input claims_arr_rel_insert_input {
  data: [claims_insert_input!]!

  """
  upsert condition
  """
  on_conflict: claims_on_conflict
}

"""
aggregate avg on columns
"""
type claims_avg_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by avg() on columns of table "claims"
"""
input claims_avg_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "claims". All fields are combined with a logical 'AND'.
"""
input claims_bool_exp {
  _and: [claims_bool_exp!]
  _not: claims_bool_exp
  _or: [claims_bool_exp!]
  address: String_comparison_exp
  amount: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  distribution: distributions_bool_exp
  distribution_id: bigint_comparison_exp
  id: bigint_comparison_exp
  index: bigint_comparison_exp
  new_amount: numeric_comparison_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  proof: String_comparison_exp
  txHash: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "claims"
"""
enum claims_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  claims_pkey
}

"""
input type for inserting data into table "claims"
"""
input claims_insert_input {
  address: String
  amount: numeric
  distribution: distributions_obj_rel_insert_input
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
}

"""
aggregate max on columns
"""
type claims_max_fields {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "claims"
"""
input claims_max_order_by {
  address: order_by
  amount: order_by
  created_at: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
  proof: order_by
  txHash: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type claims_min_fields {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "claims"
"""
input claims_min_order_by {
  address: order_by
  amount: order_by
  created_at: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
  proof: order_by
  txHash: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "claims"
"""
type claims_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [claims!]!
}

"""
on_conflict condition type for table "claims"
"""
input claims_on_conflict {
  constraint: claims_constraint!
  update_columns: [claims_update_column!]! = []
  where: claims_bool_exp
}

"""
Ordering options when selecting data from "claims".
"""
input claims_order_by {
  address: order_by
  amount: order_by
  created_at: order_by
  distribution: distributions_order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile: profiles_order_by
  profile_id: order_by
  proof: order_by
  txHash: order_by
  updated_at: order_by
}

"""
primary key columns input for table: claims
"""
input claims_pk_columns_input {
  id: bigint!
}

"""
select columns of table "claims"
"""
enum claims_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  amount

  """
  column name
  """
  created_at

  """
  column name
  """
  distribution_id

  """
  column name
  """
  id

  """
  column name
  """
  index

  """
  column name
  """
  new_amount

  """
  column name
  """
  profile_id

  """
  column name
  """
  proof

  """
  column name
  """
  txHash

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "claims"
"""
input claims_set_input {
  txHash: String
}

"""
aggregate stddev on columns
"""
type claims_stddev_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by stddev() on columns of table "claims"
"""
input claims_stddev_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type claims_stddev_pop_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by stddev_pop() on columns of table "claims"
"""
input claims_stddev_pop_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type claims_stddev_samp_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by stddev_samp() on columns of table "claims"
"""
input claims_stddev_samp_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "claims"
"""
input claims_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: claims_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input claims_stream_cursor_value_input {
  address: String
  amount: numeric
  created_at: timestamptz
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
  proof: String
  txHash: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type claims_sum_fields {
  amount: numeric
  distribution_id: bigint
  id: bigint
  index: bigint
  new_amount: numeric
  profile_id: bigint
}

"""
order by sum() on columns of table "claims"
"""
input claims_sum_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
update columns of table "claims"
"""
enum claims_update_column {
  """
  column name
  """
  txHash
}

input claims_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: claims_set_input

  """
  filter the rows which have to be updated
  """
  where: claims_bool_exp!
}

"""
aggregate var_pop on columns
"""
type claims_var_pop_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by var_pop() on columns of table "claims"
"""
input claims_var_pop_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type claims_var_samp_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by var_samp() on columns of table "claims"
"""
input claims_var_samp_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
aggregate variance on columns
"""
type claims_variance_fields {
  amount: Float
  distribution_id: Float
  id: Float
  index: Float
  new_amount: Float
  profile_id: Float
}

"""
order by variance() on columns of table "claims"
"""
input claims_variance_order_by {
  amount: order_by
  distribution_id: order_by
  id: order_by
  index: order_by
  new_amount: order_by
  profile_id: order_by
}

"""
columns and relationships of "colinks_gives"
"""
type colinks_gives {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz!

  """
  An object relationship
  """
  give_skill: skills

  """
  An object relationship
  """
  giver_profile_public: profiles_public
  id: Int!
  profile_id: bigint!
  skill: citext
  target_profile_id: bigint!

  """
  An object relationship
  """
  target_profile_public: profiles_public
  updated_at: timestamptz!
  warpcast_url: String
}

"""
aggregated selection of "colinks_gives"
"""
type colinks_gives_aggregate {
  aggregate: colinks_gives_aggregate_fields
  nodes: [colinks_gives!]!
}

input colinks_gives_aggregate_bool_exp {
  count: colinks_gives_aggregate_bool_exp_count
}

input colinks_gives_aggregate_bool_exp_count {
  arguments: [colinks_gives_select_column!]
  distinct: Boolean
  filter: colinks_gives_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "colinks_gives"
"""
type colinks_gives_aggregate_fields {
  avg: colinks_gives_avg_fields
  count(columns: [colinks_gives_select_column!], distinct: Boolean): Int!
  max: colinks_gives_max_fields
  min: colinks_gives_min_fields
  stddev: colinks_gives_stddev_fields
  stddev_pop: colinks_gives_stddev_pop_fields
  stddev_samp: colinks_gives_stddev_samp_fields
  sum: colinks_gives_sum_fields
  var_pop: colinks_gives_var_pop_fields
  var_samp: colinks_gives_var_samp_fields
  variance: colinks_gives_variance_fields
}

"""
order by aggregate values of table "colinks_gives"
"""
input colinks_gives_aggregate_order_by {
  avg: colinks_gives_avg_order_by
  count: order_by
  max: colinks_gives_max_order_by
  min: colinks_gives_min_order_by
  stddev: colinks_gives_stddev_order_by
  stddev_pop: colinks_gives_stddev_pop_order_by
  stddev_samp: colinks_gives_stddev_samp_order_by
  sum: colinks_gives_sum_order_by
  var_pop: colinks_gives_var_pop_order_by
  var_samp: colinks_gives_var_samp_order_by
  variance: colinks_gives_variance_order_by
}

"""
aggregate avg on columns
"""
type colinks_gives_avg_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by avg() on columns of table "colinks_gives"
"""
input colinks_gives_avg_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
Boolean expression to filter rows from the table "colinks_gives". All fields are combined with a logical 'AND'.
"""
input colinks_gives_bool_exp {
  _and: [colinks_gives_bool_exp!]
  _not: colinks_gives_bool_exp
  _or: [colinks_gives_bool_exp!]
  activity_id: bigint_comparison_exp
  attestation_uid: String_comparison_exp
  cast_hash: String_comparison_exp
  created_at: timestamptz_comparison_exp
  give_skill: skills_bool_exp
  giver_profile_public: profiles_public_bool_exp
  id: Int_comparison_exp
  profile_id: bigint_comparison_exp
  skill: citext_comparison_exp
  target_profile_id: bigint_comparison_exp
  target_profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
  warpcast_url: String_comparison_exp
}

"""
aggregate max on columns
"""
type colinks_gives_max_fields {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
  warpcast_url: String
}

"""
order by max() on columns of table "colinks_gives"
"""
input colinks_gives_max_order_by {
  activity_id: order_by
  attestation_uid: order_by
  cast_hash: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  updated_at: order_by
  warpcast_url: order_by
}

"""
aggregate min on columns
"""
type colinks_gives_min_fields {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
  warpcast_url: String
}

"""
order by min() on columns of table "colinks_gives"
"""
input colinks_gives_min_order_by {
  activity_id: order_by
  attestation_uid: order_by
  cast_hash: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  updated_at: order_by
  warpcast_url: order_by
}

"""
response of any mutation on the table "colinks_gives"
"""
type colinks_gives_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [colinks_gives!]!
}

"""
Ordering options when selecting data from "colinks_gives".
"""
input colinks_gives_order_by {
  activity_id: order_by
  attestation_uid: order_by
  cast_hash: order_by
  created_at: order_by
  give_skill: skills_order_by
  giver_profile_public: profiles_public_order_by
  id: order_by
  profile_id: order_by
  skill: order_by
  target_profile_id: order_by
  target_profile_public: profiles_public_order_by
  updated_at: order_by
  warpcast_url: order_by
}

"""
primary key columns input for table: colinks_gives
"""
input colinks_gives_pk_columns_input {
  id: Int!
}

"""
select columns of table "colinks_gives"
"""
enum colinks_gives_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  attestation_uid

  """
  column name
  """
  cast_hash

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  skill

  """
  column name
  """
  target_profile_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  warpcast_url
}

"""
input type for updating data in table "colinks_gives"
"""
input colinks_gives_set_input {
  skill: citext
}

"""
aggregate stddev on columns
"""
type colinks_gives_stddev_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by stddev() on columns of table "colinks_gives"
"""
input colinks_gives_stddev_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type colinks_gives_stddev_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by stddev_pop() on columns of table "colinks_gives"
"""
input colinks_gives_stddev_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type colinks_gives_stddev_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by stddev_samp() on columns of table "colinks_gives"
"""
input colinks_gives_stddev_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
Streaming cursor of the table "colinks_gives"
"""
input colinks_gives_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: colinks_gives_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input colinks_gives_stream_cursor_value_input {
  activity_id: bigint
  attestation_uid: String
  cast_hash: String
  created_at: timestamptz
  id: Int
  profile_id: bigint
  skill: citext
  target_profile_id: bigint
  updated_at: timestamptz
  warpcast_url: String
}

"""
aggregate sum on columns
"""
type colinks_gives_sum_fields {
  activity_id: bigint
  id: Int
  profile_id: bigint
  target_profile_id: bigint
}

"""
order by sum() on columns of table "colinks_gives"
"""
input colinks_gives_sum_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

input colinks_gives_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: colinks_gives_set_input

  """
  filter the rows which have to be updated
  """
  where: colinks_gives_bool_exp!
}

"""
aggregate var_pop on columns
"""
type colinks_gives_var_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by var_pop() on columns of table "colinks_gives"
"""
input colinks_gives_var_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type colinks_gives_var_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by var_samp() on columns of table "colinks_gives"
"""
input colinks_gives_var_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
aggregate variance on columns
"""
type colinks_gives_variance_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  target_profile_id: Float
}

"""
order by variance() on columns of table "colinks_gives"
"""
input colinks_gives_variance_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
columns and relationships of "contribution_count"
"""
type contribution_count {
  contributions: bigint
  profile_id: bigint
}

"""
Boolean expression to filter rows from the table "contribution_count". All fields are combined with a logical 'AND'.
"""
input contribution_count_bool_exp {
  _and: [contribution_count_bool_exp!]
  _not: contribution_count_bool_exp
  _or: [contribution_count_bool_exp!]
  contributions: bigint_comparison_exp
  profile_id: bigint_comparison_exp
}

"""
Ordering options when selecting data from "contribution_count".
"""
input contribution_count_order_by {
  contributions: order_by
  profile_id: order_by
}

"""
select columns of table "contribution_count"
"""
enum contribution_count_select_column {
  """
  column name
  """
  contributions

  """
  column name
  """
  profile_id
}

"""
Streaming cursor of the table "contribution_count"
"""
input contribution_count_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: contribution_count_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input contribution_count_stream_cursor_value_input {
  contributions: bigint
  profile_id: bigint
}

"""
columns and relationships of "contributions"
"""
type contributions {
  """
  An object relationship
  """
  activity: activities

  """
  An object relationship
  """
  big_question: big_questions
  big_question_id: bigint

  """
  An object relationship
  """
  circle: circles
  circle_id: bigint
  created_at: timestamptz!

  """
  An object relationship
  """
  created_with_api_key: circle_api_keys
  created_with_api_key_hash: String
  description: String!
  id: bigint!
  private_stream: Boolean!

  """
  An array relationship
  """
  private_stream_visibility(
    """
    distinct select on columns
    """
    distinct_on: [private_stream_visibility_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [private_stream_visibility_order_by!]

    """
    filter the rows returned
    """
    where: private_stream_visibility_bool_exp
  ): [private_stream_visibility!]!

  """
  An object relationship
  """
  profile: profiles
  profile_id: bigint!

  """
  An object relationship
  """
  profile_public: profiles_public
  updated_at: timestamptz!

  """
  An object relationship
  """
  user: users
  user_id: bigint
}

"""
aggregated selection of "contributions"
"""
type contributions_aggregate {
  aggregate: contributions_aggregate_fields
  nodes: [contributions!]!
}

input contributions_aggregate_bool_exp {
  bool_and: contributions_aggregate_bool_exp_bool_and
  bool_or: contributions_aggregate_bool_exp_bool_or
  count: contributions_aggregate_bool_exp_count
}

input contributions_aggregate_bool_exp_bool_and {
  arguments: contributions_select_column_contributions_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: contributions_bool_exp
  predicate: Boolean_comparison_exp!
}

input contributions_aggregate_bool_exp_bool_or {
  arguments: contributions_select_column_contributions_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: contributions_bool_exp
  predicate: Boolean_comparison_exp!
}

input contributions_aggregate_bool_exp_count {
  arguments: [contributions_select_column!]
  distinct: Boolean
  filter: contributions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "contributions"
"""
type contributions_aggregate_fields {
  avg: contributions_avg_fields
  count(columns: [contributions_select_column!], distinct: Boolean): Int!
  max: contributions_max_fields
  min: contributions_min_fields
  stddev: contributions_stddev_fields
  stddev_pop: contributions_stddev_pop_fields
  stddev_samp: contributions_stddev_samp_fields
  sum: contributions_sum_fields
  var_pop: contributions_var_pop_fields
  var_samp: contributions_var_samp_fields
  variance: contributions_variance_fields
}

"""
order by aggregate values of table "contributions"
"""
input contributions_aggregate_order_by {
  avg: contributions_avg_order_by
  count: order_by
  max: contributions_max_order_by
  min: contributions_min_order_by
  stddev: contributions_stddev_order_by
  stddev_pop: contributions_stddev_pop_order_by
  stddev_samp: contributions_stddev_samp_order_by
  sum: contributions_sum_order_by
  var_pop: contributions_var_pop_order_by
  var_samp: contributions_var_samp_order_by
  variance: contributions_variance_order_by
}

"""
aggregate avg on columns
"""
type contributions_avg_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "contributions"
"""
input contributions_avg_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "contributions". All fields are combined with a logical 'AND'.
"""
input contributions_bool_exp {
  _and: [contributions_bool_exp!]
  _not: contributions_bool_exp
  _or: [contributions_bool_exp!]
  activity: activities_bool_exp
  big_question: big_questions_bool_exp
  big_question_id: bigint_comparison_exp
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  created_with_api_key: circle_api_keys_bool_exp
  created_with_api_key_hash: String_comparison_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  private_stream: Boolean_comparison_exp
  private_stream_visibility: private_stream_visibility_bool_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "contributions"
"""
enum contributions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  contributions_pkey
}

"""
input type for inserting data into table "contributions"
"""
input contributions_insert_input {
  big_question_id: bigint
  circle_id: bigint
  description: String
  private_stream: Boolean
  user_id: bigint
}

"""
aggregate max on columns
"""
type contributions_max_fields {
  big_question_id: bigint
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  description: String
  id: bigint
  profile_id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
order by max() on columns of table "contributions"
"""
input contributions_max_order_by {
  big_question_id: order_by
  circle_id: order_by
  created_at: order_by
  created_with_api_key_hash: order_by
  description: order_by
  id: order_by
  profile_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type contributions_min_fields {
  big_question_id: bigint
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  description: String
  id: bigint
  profile_id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
order by min() on columns of table "contributions"
"""
input contributions_min_order_by {
  big_question_id: order_by
  circle_id: order_by
  created_at: order_by
  created_with_api_key_hash: order_by
  description: order_by
  id: order_by
  profile_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
response of any mutation on the table "contributions"
"""
type contributions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [contributions!]!
}

"""
on_conflict condition type for table "contributions"
"""
input contributions_on_conflict {
  constraint: contributions_constraint!
  update_columns: [contributions_update_column!]! = []
  where: contributions_bool_exp
}

"""
Ordering options when selecting data from "contributions".
"""
input contributions_order_by {
  activity: activities_order_by
  big_question: big_questions_order_by
  big_question_id: order_by
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  created_with_api_key: circle_api_keys_order_by
  created_with_api_key_hash: order_by
  description: order_by
  id: order_by
  private_stream: order_by
  private_stream_visibility_aggregate: private_stream_visibility_aggregate_order_by
  profile: profiles_order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "contributions"
"""
enum contributions_select_column {
  """
  column name
  """
  big_question_id

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_with_api_key_hash

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  private_stream

  """
  column name
  """
  profile_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
select "contributions_aggregate_bool_exp_bool_and_arguments_columns" columns of table "contributions"
"""
enum contributions_select_column_contributions_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  private_stream
}

"""
select "contributions_aggregate_bool_exp_bool_or_arguments_columns" columns of table "contributions"
"""
enum contributions_select_column_contributions_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  private_stream
}

"""
aggregate stddev on columns
"""
type contributions_stddev_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "contributions"
"""
input contributions_stddev_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type contributions_stddev_pop_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "contributions"
"""
input contributions_stddev_pop_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type contributions_stddev_samp_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "contributions"
"""
input contributions_stddev_samp_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "contributions"
"""
input contributions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: contributions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input contributions_stream_cursor_value_input {
  big_question_id: bigint
  circle_id: bigint
  created_at: timestamptz
  created_with_api_key_hash: String
  description: String
  id: bigint
  private_stream: Boolean
  profile_id: bigint
  updated_at: timestamptz
  user_id: bigint
}

"""
aggregate sum on columns
"""
type contributions_sum_fields {
  big_question_id: bigint
  circle_id: bigint
  id: bigint
  profile_id: bigint
  user_id: bigint
}

"""
order by sum() on columns of table "contributions"
"""
input contributions_sum_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
placeholder for update columns of table "contributions" (current role has no relevant permissions)
"""
enum contributions_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
aggregate var_pop on columns
"""
type contributions_var_pop_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "contributions"
"""
input contributions_var_pop_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type contributions_var_samp_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "contributions"
"""
input contributions_var_samp_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type contributions_variance_fields {
  big_question_id: Float
  circle_id: Float
  id: Float
  profile_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "contributions"
"""
input contributions_variance_order_by {
  big_question_id: order_by
  circle_id: order_by
  id: order_by
  profile_id: order_by
  user_id: order_by
}

"""
local db copy of last synced on-chain cosoul data
"""
type cosouls {
  address: citext!
  created_at: timestamptz!
  created_tx_hash: String!

  """
  An array relationship
  """
  held_links(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  held_links_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  id: Int!

  """
  An array relationship
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  pgive: Int

  """
  An array relationship
  """
  poaps(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  An aggregate relationship
  """
  poaps_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  An object relationship
  """
  profile: profiles

  """
  An object relationship
  """
  profile_public: profiles_public
  synced_at: timestamptz
  token_id: Int!
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "cosouls". All fields are combined with a logical 'AND'.
"""
input cosouls_bool_exp {
  _and: [cosouls_bool_exp!]
  _not: cosouls_bool_exp
  _or: [cosouls_bool_exp!]
  address: citext_comparison_exp
  created_at: timestamptz_comparison_exp
  created_tx_hash: String_comparison_exp
  held_links: link_holders_bool_exp
  held_links_aggregate: link_holders_aggregate_bool_exp
  id: Int_comparison_exp
  link_holders: link_holders_bool_exp
  link_holders_aggregate: link_holders_aggregate_bool_exp
  pgive: Int_comparison_exp
  poaps: poap_holders_bool_exp
  poaps_aggregate: poap_holders_aggregate_bool_exp
  profile: profiles_bool_exp
  profile_public: profiles_public_bool_exp
  synced_at: timestamptz_comparison_exp
  token_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "cosouls".
"""
input cosouls_order_by {
  address: order_by
  created_at: order_by
  created_tx_hash: order_by
  held_links_aggregate: link_holders_aggregate_order_by
  id: order_by
  link_holders_aggregate: link_holders_aggregate_order_by
  pgive: order_by
  poaps_aggregate: poap_holders_aggregate_order_by
  profile: profiles_order_by
  profile_public: profiles_public_order_by
  synced_at: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "cosouls"
"""
enum cosouls_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  created_at

  """
  column name
  """
  created_tx_hash

  """
  column name
  """
  id

  """
  column name
  """
  pgive

  """
  column name
  """
  synced_at

  """
  column name
  """
  token_id

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "cosouls"
"""
input cosouls_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: cosouls_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input cosouls_stream_cursor_value_input {
  address: citext
  created_at: timestamptz
  created_tx_hash: String
  id: Int
  pgive: Int
  synced_at: timestamptz
  token_id: Int
  updated_at: timestamptz
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
Vault Distributions
"""
type distributions {
  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!
  created_at: timestamp!
  created_by: bigint!
  distribution_epoch_id: bigint
  distribution_json(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  distribution_type: Int!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: bigint!
  fixed_amount: numeric!
  gift_amount: numeric!
  id: bigint!
  merkle_root: String

  """
  An object relationship
  """
  profile: profiles!
  total_amount: String!
  tx_hash: String

  """
  An object relationship
  """
  vault: vaults!
  vault_id: bigint!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!
}

"""
aggregated selection of "distributions"
"""
type distributions_aggregate {
  aggregate: distributions_aggregate_fields
  nodes: [distributions!]!
}

input distributions_aggregate_bool_exp {
  count: distributions_aggregate_bool_exp_count
}

input distributions_aggregate_bool_exp_count {
  arguments: [distributions_select_column!]
  distinct: Boolean
  filter: distributions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "distributions"
"""
type distributions_aggregate_fields {
  avg: distributions_avg_fields
  count(columns: [distributions_select_column!], distinct: Boolean): Int!
  max: distributions_max_fields
  min: distributions_min_fields
  stddev: distributions_stddev_fields
  stddev_pop: distributions_stddev_pop_fields
  stddev_samp: distributions_stddev_samp_fields
  sum: distributions_sum_fields
  var_pop: distributions_var_pop_fields
  var_samp: distributions_var_samp_fields
  variance: distributions_variance_fields
}

"""
order by aggregate values of table "distributions"
"""
input distributions_aggregate_order_by {
  avg: distributions_avg_order_by
  count: order_by
  max: distributions_max_order_by
  min: distributions_min_order_by
  stddev: distributions_stddev_order_by
  stddev_pop: distributions_stddev_pop_order_by
  stddev_samp: distributions_stddev_samp_order_by
  sum: distributions_sum_order_by
  var_pop: distributions_var_pop_order_by
  var_samp: distributions_var_samp_order_by
  variance: distributions_variance_order_by
}

"""
aggregate avg on columns
"""
type distributions_avg_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by avg() on columns of table "distributions"
"""
input distributions_avg_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
Boolean expression to filter rows from the table "distributions". All fields are combined with a logical 'AND'.
"""
input distributions_bool_exp {
  _and: [distributions_bool_exp!]
  _not: distributions_bool_exp
  _or: [distributions_bool_exp!]
  claims: claims_bool_exp
  claims_aggregate: claims_aggregate_bool_exp
  created_at: timestamp_comparison_exp
  created_by: bigint_comparison_exp
  distribution_epoch_id: bigint_comparison_exp
  distribution_json: jsonb_comparison_exp
  distribution_type: Int_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: bigint_comparison_exp
  fixed_amount: numeric_comparison_exp
  gift_amount: numeric_comparison_exp
  id: bigint_comparison_exp
  merkle_root: String_comparison_exp
  profile: profiles_bool_exp
  total_amount: String_comparison_exp
  tx_hash: String_comparison_exp
  vault: vaults_bool_exp
  vault_id: bigint_comparison_exp
  vault_transactions: vault_transactions_bool_exp
}

"""
unique or primary key constraints on table "distributions"
"""
enum distributions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  distributions_pkey
}

"""
input type for incrementing numeric columns in table "distributions"
"""
input distributions_inc_input {
  distribution_epoch_id: bigint
}

"""
input type for inserting data into table "distributions"
"""
input distributions_insert_input {
  claims: claims_arr_rel_insert_input
  distribution_epoch_id: bigint
  distribution_json: jsonb
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  merkle_root: String
  total_amount: String
  vault_id: bigint
}

"""
aggregate max on columns
"""
type distributions_max_fields {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  vault_id: bigint
}

"""
order by max() on columns of table "distributions"
"""
input distributions_max_order_by {
  created_at: order_by
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  merkle_root: order_by
  total_amount: order_by
  tx_hash: order_by
  vault_id: order_by
}

"""
aggregate min on columns
"""
type distributions_min_fields {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  vault_id: bigint
}

"""
order by min() on columns of table "distributions"
"""
input distributions_min_order_by {
  created_at: order_by
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  merkle_root: order_by
  total_amount: order_by
  tx_hash: order_by
  vault_id: order_by
}

"""
response of any mutation on the table "distributions"
"""
type distributions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [distributions!]!
}

"""
input type for inserting object relation for remote table "distributions"
"""
input distributions_obj_rel_insert_input {
  data: distributions_insert_input!

  """
  upsert condition
  """
  on_conflict: distributions_on_conflict
}

"""
on_conflict condition type for table "distributions"
"""
input distributions_on_conflict {
  constraint: distributions_constraint!
  update_columns: [distributions_update_column!]! = []
  where: distributions_bool_exp
}

"""
Ordering options when selecting data from "distributions".
"""
input distributions_order_by {
  claims_aggregate: claims_aggregate_order_by
  created_at: order_by
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_json: order_by
  distribution_type: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  merkle_root: order_by
  profile: profiles_order_by
  total_amount: order_by
  tx_hash: order_by
  vault: vaults_order_by
  vault_id: order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
}

"""
primary key columns input for table: distributions
"""
input distributions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "distributions"
"""
enum distributions_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_epoch_id

  """
  column name
  """
  distribution_json

  """
  column name
  """
  distribution_type

  """
  column name
  """
  epoch_id

  """
  column name
  """
  fixed_amount

  """
  column name
  """
  gift_amount

  """
  column name
  """
  id

  """
  column name
  """
  merkle_root

  """
  column name
  """
  total_amount

  """
  column name
  """
  tx_hash

  """
  column name
  """
  vault_id
}

"""
input type for updating data in table "distributions"
"""
input distributions_set_input {
  distribution_epoch_id: bigint
  tx_hash: String
}

"""
aggregate stddev on columns
"""
type distributions_stddev_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by stddev() on columns of table "distributions"
"""
input distributions_stddev_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type distributions_stddev_pop_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by stddev_pop() on columns of table "distributions"
"""
input distributions_stddev_pop_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type distributions_stddev_samp_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by stddev_samp() on columns of table "distributions"
"""
input distributions_stddev_samp_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
Streaming cursor of the table "distributions"
"""
input distributions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: distributions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input distributions_stream_cursor_value_input {
  created_at: timestamp
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_json: jsonb
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  merkle_root: String
  total_amount: String
  tx_hash: String
  vault_id: bigint
}

"""
aggregate sum on columns
"""
type distributions_sum_fields {
  created_by: bigint
  distribution_epoch_id: bigint
  distribution_type: Int
  epoch_id: bigint
  fixed_amount: numeric
  gift_amount: numeric
  id: bigint
  vault_id: bigint
}

"""
order by sum() on columns of table "distributions"
"""
input distributions_sum_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
update columns of table "distributions"
"""
enum distributions_update_column {
  """
  column name
  """
  distribution_epoch_id

  """
  column name
  """
  tx_hash
}

input distributions_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: distributions_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: distributions_set_input

  """
  filter the rows which have to be updated
  """
  where: distributions_bool_exp!
}

"""
aggregate var_pop on columns
"""
type distributions_var_pop_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by var_pop() on columns of table "distributions"
"""
input distributions_var_pop_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate var_samp on columns
"""
type distributions_var_samp_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by var_samp() on columns of table "distributions"
"""
input distributions_var_samp_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
aggregate variance on columns
"""
type distributions_variance_fields {
  created_by: Float
  distribution_epoch_id: Float
  distribution_type: Float
  epoch_id: Float
  fixed_amount: Float
  gift_amount: Float
  id: Float
  vault_id: Float
}

"""
order by variance() on columns of table "distributions"
"""
input distributions_variance_order_by {
  created_by: order_by
  distribution_epoch_id: order_by
  distribution_type: order_by
  epoch_id: order_by
  fixed_amount: order_by
  gift_amount: order_by
  id: order_by
  vault_id: order_by
}

"""
columns and relationships of "emails"
"""
type emails {
  email: citext!
  primary: Boolean!

  """
  An object relationship
  """
  profile: profiles!
  verified_at: timestamp
}

"""
order by aggregate values of table "emails"
"""
input emails_aggregate_order_by {
  count: order_by
  max: emails_max_order_by
  min: emails_min_order_by
}

"""
Boolean expression to filter rows from the table "emails". All fields are combined with a logical 'AND'.
"""
input emails_bool_exp {
  _and: [emails_bool_exp!]
  _not: emails_bool_exp
  _or: [emails_bool_exp!]
  email: citext_comparison_exp
  primary: Boolean_comparison_exp
  profile: profiles_bool_exp
  verified_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "emails"
"""
input emails_max_order_by {
  email: order_by
  verified_at: order_by
}

"""
order by min() on columns of table "emails"
"""
input emails_min_order_by {
  email: order_by
  verified_at: order_by
}

"""
Ordering options when selecting data from "emails".
"""
input emails_order_by {
  email: order_by
  primary: order_by
  profile: profiles_order_by
  verified_at: order_by
}

"""
select columns of table "emails"
"""
enum emails_select_column {
  """
  column name
  """
  email

  """
  column name
  """
  primary

  """
  column name
  """
  verified_at
}

"""
Streaming cursor of the table "emails"
"""
input emails_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: emails_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input emails_stream_cursor_value_input {
  email: citext
  primary: Boolean
  verified_at: timestamp
}

"""
farcaster casts that we actually care about, with some materialized fields
"""
type enriched_casts {
  created_at: timestamp!
  deleted_at: timestamp
  embeds(
    """
    JSON select path
    """
    path: String
  ): jsonb!
  fid: bigint!
  hash: bytea!
  id: bigint!
  mentions: [bigint!]!
  mentions_positions: [smallint!]!
  parent_fid: bigint
  parent_hash: bytea
  parent_url: String
  profile_id: bigint

  """
  An object relationship
  """
  profile_public: profiles_public

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): [farcaster_reactions!]!

  """
  An aggregate relationship
  """
  reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): farcaster_reactions_aggregate!

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): [farcaster_casts!]!

  """
  An aggregate relationship
  """
  replies_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): farcaster_casts_aggregate!
  root_parent_hash: bytea
  root_parent_url: String
  text: String!
  timestamp: timestamp!
  updated_at: timestamp!
}

"""
Boolean expression to filter rows from the table "enriched_casts". All fields are combined with a logical 'AND'.
"""
input enriched_casts_bool_exp {
  _and: [enriched_casts_bool_exp!]
  _not: enriched_casts_bool_exp
  _or: [enriched_casts_bool_exp!]
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  embeds: jsonb_comparison_exp
  fid: bigint_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  mentions: bigint_array_comparison_exp
  mentions_positions: smallint_array_comparison_exp
  parent_fid: bigint_comparison_exp
  parent_hash: bytea_comparison_exp
  parent_url: String_comparison_exp
  profile_id: bigint_comparison_exp
  profile_public: profiles_public_bool_exp
  reactions: farcaster_reactions_bool_exp
  reactions_aggregate: farcaster_reactions_aggregate_bool_exp
  replies: farcaster_casts_bool_exp
  replies_aggregate: farcaster_casts_aggregate_bool_exp
  root_parent_hash: bytea_comparison_exp
  root_parent_url: String_comparison_exp
  text: String_comparison_exp
  timestamp: timestamp_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
Ordering options when selecting data from "enriched_casts".
"""
input enriched_casts_order_by {
  created_at: order_by
  deleted_at: order_by
  embeds: order_by
  fid: order_by
  hash: order_by
  id: order_by
  mentions: order_by
  mentions_positions: order_by
  parent_fid: order_by
  parent_hash: order_by
  parent_url: order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reactions_aggregate: farcaster_reactions_aggregate_order_by
  replies_aggregate: farcaster_casts_aggregate_order_by
  root_parent_hash: order_by
  root_parent_url: order_by
  text: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
select columns of table "enriched_casts"
"""
enum enriched_casts_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  embeds

  """
  column name
  """
  fid

  """
  column name
  """
  hash

  """
  column name
  """
  id

  """
  column name
  """
  mentions

  """
  column name
  """
  mentions_positions

  """
  column name
  """
  parent_fid

  """
  column name
  """
  parent_hash

  """
  column name
  """
  parent_url

  """
  column name
  """
  profile_id

  """
  column name
  """
  root_parent_hash

  """
  column name
  """
  root_parent_url

  """
  column name
  """
  text

  """
  column name
  """
  timestamp

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "enriched_casts"
"""
input enriched_casts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: enriched_casts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input enriched_casts_stream_cursor_value_input {
  created_at: timestamp
  deleted_at: timestamp
  embeds: jsonb
  fid: bigint
  hash: bytea
  id: bigint
  mentions: [bigint!]
  mentions_positions: [smallint!]
  parent_fid: bigint
  parent_hash: bytea
  parent_url: String
  profile_id: bigint
  root_parent_hash: bytea
  root_parent_url: String
  text: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
columns and relationships of "epoch_pgive_data"
"""
type epoch_pgive_data {
  active_months: Int!
  active_months_bonus: numeric!
  created_at: timestamptz!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: Int!
  gives_receiver_base: numeric!
  id: Int!
  notes_bonus: numeric!
  pgive: numeric!
}

"""
Boolean expression to filter rows from the table "epoch_pgive_data". All fields are combined with a logical 'AND'.
"""
input epoch_pgive_data_bool_exp {
  _and: [epoch_pgive_data_bool_exp!]
  _not: epoch_pgive_data_bool_exp
  _or: [epoch_pgive_data_bool_exp!]
  active_months: Int_comparison_exp
  active_months_bonus: numeric_comparison_exp
  created_at: timestamptz_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  gives_receiver_base: numeric_comparison_exp
  id: Int_comparison_exp
  notes_bonus: numeric_comparison_exp
  pgive: numeric_comparison_exp
}

"""
Ordering options when selecting data from "epoch_pgive_data".
"""
input epoch_pgive_data_order_by {
  active_months: order_by
  active_months_bonus: order_by
  created_at: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gives_receiver_base: order_by
  id: order_by
  notes_bonus: order_by
  pgive: order_by
}

"""
select columns of table "epoch_pgive_data"
"""
enum epoch_pgive_data_select_column {
  """
  column name
  """
  active_months

  """
  column name
  """
  active_months_bonus

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  gives_receiver_base

  """
  column name
  """
  id

  """
  column name
  """
  notes_bonus

  """
  column name
  """
  pgive
}

"""
Streaming cursor of the table "epoch_pgive_data"
"""
input epoch_pgive_data_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: epoch_pgive_data_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input epoch_pgive_data_stream_cursor_value_input {
  active_months: Int
  active_months_bonus: numeric
  created_at: timestamptz
  epoch_id: Int
  gives_receiver_base: numeric
  id: Int
  notes_bonus: numeric
  pgive: numeric
}

"""
columns and relationships of "epoches"
"""
type epochs {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An object relationship
  """
  circle: circles
  circle_id: Int!
  created_at: timestamp!
  days: Int
  description: String

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!
  end_date: timestamptz!
  ended: Boolean!

  """
  An array relationship
  """
  epoch_pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!
  grant: numeric!

  """
  An array relationship
  """
  histories(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!
  id: bigint!

  """
  An array relationship
  """
  member_epoch_pgives(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): [member_epoch_pgives!]!

  """
  An aggregate relationship
  """
  member_epoch_pgives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): member_epoch_pgives_aggregate!
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int

  """
  An object relationship
  """
  pgive_data: epoch_pgive_data
  repeat: Int!
  repeat_data(
    """
    JSON select path
    """
    path: String
  ): jsonb
  repeat_day_of_month: Int!
  start_date: timestamptz!

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  updated_at: timestamp!
}

"""
order by aggregate values of table "epoches"
"""
input epochs_aggregate_order_by {
  avg: epochs_avg_order_by
  count: order_by
  max: epochs_max_order_by
  min: epochs_min_order_by
  stddev: epochs_stddev_order_by
  stddev_pop: epochs_stddev_pop_order_by
  stddev_samp: epochs_stddev_samp_order_by
  sum: epochs_sum_order_by
  var_pop: epochs_var_pop_order_by
  var_samp: epochs_var_samp_order_by
  variance: epochs_variance_order_by
}

"""
order by avg() on columns of table "epoches"
"""
input epochs_avg_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
Boolean expression to filter rows from the table "epoches". All fields are combined with a logical 'AND'.
"""
input epochs_bool_exp {
  _and: [epochs_bool_exp!]
  _not: epochs_bool_exp
  _or: [epochs_bool_exp!]
  activities: activities_bool_exp
  activities_aggregate: activities_aggregate_bool_exp
  burns: burns_bool_exp
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  days: Int_comparison_exp
  description: String_comparison_exp
  distributions: distributions_bool_exp
  distributions_aggregate: distributions_aggregate_bool_exp
  end_date: timestamptz_comparison_exp
  ended: Boolean_comparison_exp
  epoch_pending_token_gifts: pending_token_gifts_bool_exp
  grant: numeric_comparison_exp
  histories: histories_bool_exp
  id: bigint_comparison_exp
  member_epoch_pgives: member_epoch_pgives_bool_exp
  member_epoch_pgives_aggregate: member_epoch_pgives_aggregate_bool_exp
  notified_before_end: timestamp_comparison_exp
  notified_end: timestamp_comparison_exp
  notified_start: timestamp_comparison_exp
  number: Int_comparison_exp
  pgive_data: epoch_pgive_data_bool_exp
  repeat: Int_comparison_exp
  repeat_data: jsonb_comparison_exp
  repeat_day_of_month: Int_comparison_exp
  start_date: timestamptz_comparison_exp
  token_gifts: token_gifts_bool_exp
  token_gifts_aggregate: token_gifts_aggregate_bool_exp
  updated_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "epoches"
"""
input epochs_max_order_by {
  circle_id: order_by
  created_at: order_by
  days: order_by
  description: order_by
  end_date: order_by
  grant: order_by
  id: order_by
  notified_before_end: order_by
  notified_end: order_by
  notified_start: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
  start_date: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "epoches"
"""
input epochs_min_order_by {
  circle_id: order_by
  created_at: order_by
  days: order_by
  description: order_by
  end_date: order_by
  grant: order_by
  id: order_by
  notified_before_end: order_by
  notified_end: order_by
  notified_start: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
  start_date: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "epoches"
"""
type epochs_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [epochs!]!
}

"""
Ordering options when selecting data from "epoches".
"""
input epochs_order_by {
  activities_aggregate: activities_aggregate_order_by
  burns_aggregate: burns_aggregate_order_by
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  days: order_by
  description: order_by
  distributions_aggregate: distributions_aggregate_order_by
  end_date: order_by
  ended: order_by
  epoch_pending_token_gifts_aggregate: pending_token_gifts_aggregate_order_by
  grant: order_by
  histories_aggregate: histories_aggregate_order_by
  id: order_by
  member_epoch_pgives_aggregate: member_epoch_pgives_aggregate_order_by
  notified_before_end: order_by
  notified_end: order_by
  notified_start: order_by
  number: order_by
  pgive_data: epoch_pgive_data_order_by
  repeat: order_by
  repeat_data: order_by
  repeat_day_of_month: order_by
  start_date: order_by
  token_gifts_aggregate: token_gifts_aggregate_order_by
  updated_at: order_by
}

"""
primary key columns input for table: epoches
"""
input epochs_pk_columns_input {
  id: bigint!
}

"""
select columns of table "epoches"
"""
enum epochs_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  days

  """
  column name
  """
  description

  """
  column name
  """
  end_date

  """
  column name
  """
  ended

  """
  column name
  """
  grant

  """
  column name
  """
  id

  """
  column name
  """
  notified_before_end

  """
  column name
  """
  notified_end

  """
  column name
  """
  notified_start

  """
  column name
  """
  number

  """
  column name
  """
  repeat

  """
  column name
  """
  repeat_data

  """
  column name
  """
  repeat_day_of_month

  """
  column name
  """
  start_date

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "epoches"
"""
input epochs_set_input {
  description: String
}

"""
order by stddev() on columns of table "epoches"
"""
input epochs_stddev_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
order by stddev_pop() on columns of table "epoches"
"""
input epochs_stddev_pop_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
order by stddev_samp() on columns of table "epoches"
"""
input epochs_stddev_samp_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
Streaming cursor of the table "epochs"
"""
input epochs_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: epochs_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input epochs_stream_cursor_value_input {
  circle_id: Int
  created_at: timestamp
  days: Int
  description: String
  end_date: timestamptz
  ended: Boolean
  grant: numeric
  id: bigint
  notified_before_end: timestamp
  notified_end: timestamp
  notified_start: timestamp
  number: Int
  repeat: Int
  repeat_data: jsonb
  repeat_day_of_month: Int
  start_date: timestamptz
  updated_at: timestamp
}

"""
order by sum() on columns of table "epoches"
"""
input epochs_sum_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

input epochs_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: epochs_set_input

  """
  filter the rows which have to be updated
  """
  where: epochs_bool_exp!
}

"""
order by var_pop() on columns of table "epoches"
"""
input epochs_var_pop_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
order by var_samp() on columns of table "epoches"
"""
input epochs_var_samp_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
order by variance() on columns of table "epoches"
"""
input epochs_variance_order_by {
  circle_id: order_by
  days: order_by
  grant: order_by
  id: order_by
  number: order_by
  repeat: order_by
  repeat_day_of_month: order_by
}

"""
columns and relationships of "farcaster_accounts"
"""
type farcaster_accounts {
  bio_text: String
  created_at: timestamptz!
  custody_address: String!
  fid: bigint!
  followers_count: Int!
  following_count: Int!
  name: String!
  pfp_url: String
  profile_id: bigint!

  """
  An object relationship
  """
  profile_public: profiles!
  updated_at: timestamptz!
  username: String!
}

"""
Boolean expression to filter rows from the table "farcaster_accounts". All fields are combined with a logical 'AND'.
"""
input farcaster_accounts_bool_exp {
  _and: [farcaster_accounts_bool_exp!]
  _not: farcaster_accounts_bool_exp
  _or: [farcaster_accounts_bool_exp!]
  bio_text: String_comparison_exp
  created_at: timestamptz_comparison_exp
  custody_address: String_comparison_exp
  fid: bigint_comparison_exp
  followers_count: Int_comparison_exp
  following_count: Int_comparison_exp
  name: String_comparison_exp
  pfp_url: String_comparison_exp
  profile_id: bigint_comparison_exp
  profile_public: profiles_bool_exp
  updated_at: timestamptz_comparison_exp
  username: String_comparison_exp
}

"""
response of any mutation on the table "farcaster_accounts"
"""
type farcaster_accounts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [farcaster_accounts!]!
}

"""
Ordering options when selecting data from "farcaster_accounts".
"""
input farcaster_accounts_order_by {
  bio_text: order_by
  created_at: order_by
  custody_address: order_by
  fid: order_by
  followers_count: order_by
  following_count: order_by
  name: order_by
  pfp_url: order_by
  profile_id: order_by
  profile_public: profiles_order_by
  updated_at: order_by
  username: order_by
}

"""
select columns of table "farcaster_accounts"
"""
enum farcaster_accounts_select_column {
  """
  column name
  """
  bio_text

  """
  column name
  """
  created_at

  """
  column name
  """
  custody_address

  """
  column name
  """
  fid

  """
  column name
  """
  followers_count

  """
  column name
  """
  following_count

  """
  column name
  """
  name

  """
  column name
  """
  pfp_url

  """
  column name
  """
  profile_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  username
}

"""
Streaming cursor of the table "farcaster_accounts"
"""
input farcaster_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: farcaster_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input farcaster_accounts_stream_cursor_value_input {
  bio_text: String
  created_at: timestamptz
  custody_address: String
  fid: bigint
  followers_count: Int
  following_count: Int
  name: String
  pfp_url: String
  profile_id: bigint
  updated_at: timestamptz
  username: String
}

"""
columns and relationships of "farcaster.casts"
"""
type farcaster_casts {
  created_at: timestamp!
  deleted_at: timestamp
  embeds(
    """
    JSON select path
    """
    path: String
  ): jsonb!

  """
  An object relationship
  """
  farcaster_account: farcaster_accounts
  fid: bigint!
  hash: bytea!
  id: bigint!
  mentions: [bigint!]!
  mentions_positions: [smallint!]!
  parent_fid: bigint
  parent_hash: bytea
  parent_url: String

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): [farcaster_reactions!]!

  """
  An aggregate relationship
  """
  reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): farcaster_reactions_aggregate!

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): [farcaster_casts!]!

  """
  An aggregate relationship
  """
  replies_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): farcaster_casts_aggregate!
  root_parent_hash: bytea
  root_parent_url: String
  text: String!
  timestamp: timestamp!
  updated_at: timestamp!
}

"""
aggregated selection of "farcaster.casts"
"""
type farcaster_casts_aggregate {
  aggregate: farcaster_casts_aggregate_fields
  nodes: [farcaster_casts!]!
}

input farcaster_casts_aggregate_bool_exp {
  count: farcaster_casts_aggregate_bool_exp_count
}

input farcaster_casts_aggregate_bool_exp_count {
  arguments: [farcaster_casts_select_column!]
  distinct: Boolean
  filter: farcaster_casts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "farcaster.casts"
"""
type farcaster_casts_aggregate_fields {
  avg: farcaster_casts_avg_fields
  count(columns: [farcaster_casts_select_column!], distinct: Boolean): Int!
  max: farcaster_casts_max_fields
  min: farcaster_casts_min_fields
  stddev: farcaster_casts_stddev_fields
  stddev_pop: farcaster_casts_stddev_pop_fields
  stddev_samp: farcaster_casts_stddev_samp_fields
  sum: farcaster_casts_sum_fields
  var_pop: farcaster_casts_var_pop_fields
  var_samp: farcaster_casts_var_samp_fields
  variance: farcaster_casts_variance_fields
}

"""
order by aggregate values of table "farcaster.casts"
"""
input farcaster_casts_aggregate_order_by {
  avg: farcaster_casts_avg_order_by
  count: order_by
  max: farcaster_casts_max_order_by
  min: farcaster_casts_min_order_by
  stddev: farcaster_casts_stddev_order_by
  stddev_pop: farcaster_casts_stddev_pop_order_by
  stddev_samp: farcaster_casts_stddev_samp_order_by
  sum: farcaster_casts_sum_order_by
  var_pop: farcaster_casts_var_pop_order_by
  var_samp: farcaster_casts_var_samp_order_by
  variance: farcaster_casts_variance_order_by
}

"""
aggregate avg on columns
"""
type farcaster_casts_avg_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by avg() on columns of table "farcaster.casts"
"""
input farcaster_casts_avg_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
Boolean expression to filter rows from the table "farcaster.casts". All fields are combined with a logical 'AND'.
"""
input farcaster_casts_bool_exp {
  _and: [farcaster_casts_bool_exp!]
  _not: farcaster_casts_bool_exp
  _or: [farcaster_casts_bool_exp!]
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  embeds: jsonb_comparison_exp
  farcaster_account: farcaster_accounts_bool_exp
  fid: bigint_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  mentions: bigint_array_comparison_exp
  mentions_positions: smallint_array_comparison_exp
  parent_fid: bigint_comparison_exp
  parent_hash: bytea_comparison_exp
  parent_url: String_comparison_exp
  reactions: farcaster_reactions_bool_exp
  reactions_aggregate: farcaster_reactions_aggregate_bool_exp
  replies: farcaster_casts_bool_exp
  replies_aggregate: farcaster_casts_aggregate_bool_exp
  root_parent_hash: bytea_comparison_exp
  root_parent_url: String_comparison_exp
  text: String_comparison_exp
  timestamp: timestamp_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
aggregate max on columns
"""
type farcaster_casts_max_fields {
  created_at: timestamp
  deleted_at: timestamp
  fid: bigint
  id: bigint
  mentions: [bigint!]
  mentions_positions: [smallint!]
  parent_fid: bigint
  parent_url: String
  root_parent_url: String
  text: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
order by max() on columns of table "farcaster.casts"
"""
input farcaster_casts_max_order_by {
  created_at: order_by
  deleted_at: order_by
  fid: order_by
  id: order_by
  mentions: order_by
  mentions_positions: order_by
  parent_fid: order_by
  parent_url: order_by
  root_parent_url: order_by
  text: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type farcaster_casts_min_fields {
  created_at: timestamp
  deleted_at: timestamp
  fid: bigint
  id: bigint
  mentions: [bigint!]
  mentions_positions: [smallint!]
  parent_fid: bigint
  parent_url: String
  root_parent_url: String
  text: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
order by min() on columns of table "farcaster.casts"
"""
input farcaster_casts_min_order_by {
  created_at: order_by
  deleted_at: order_by
  fid: order_by
  id: order_by
  mentions: order_by
  mentions_positions: order_by
  parent_fid: order_by
  parent_url: order_by
  root_parent_url: order_by
  text: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "farcaster.casts".
"""
input farcaster_casts_order_by {
  created_at: order_by
  deleted_at: order_by
  embeds: order_by
  farcaster_account: farcaster_accounts_order_by
  fid: order_by
  hash: order_by
  id: order_by
  mentions: order_by
  mentions_positions: order_by
  parent_fid: order_by
  parent_hash: order_by
  parent_url: order_by
  reactions_aggregate: farcaster_reactions_aggregate_order_by
  replies_aggregate: farcaster_casts_aggregate_order_by
  root_parent_hash: order_by
  root_parent_url: order_by
  text: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
select columns of table "farcaster.casts"
"""
enum farcaster_casts_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  embeds

  """
  column name
  """
  fid

  """
  column name
  """
  hash

  """
  column name
  """
  id

  """
  column name
  """
  mentions

  """
  column name
  """
  mentions_positions

  """
  column name
  """
  parent_fid

  """
  column name
  """
  parent_hash

  """
  column name
  """
  parent_url

  """
  column name
  """
  root_parent_hash

  """
  column name
  """
  root_parent_url

  """
  column name
  """
  text

  """
  column name
  """
  timestamp

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type farcaster_casts_stddev_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by stddev() on columns of table "farcaster.casts"
"""
input farcaster_casts_stddev_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
aggregate stddev_pop on columns
"""
type farcaster_casts_stddev_pop_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by stddev_pop() on columns of table "farcaster.casts"
"""
input farcaster_casts_stddev_pop_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
aggregate stddev_samp on columns
"""
type farcaster_casts_stddev_samp_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by stddev_samp() on columns of table "farcaster.casts"
"""
input farcaster_casts_stddev_samp_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
Streaming cursor of the table "farcaster_casts"
"""
input farcaster_casts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: farcaster_casts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input farcaster_casts_stream_cursor_value_input {
  created_at: timestamp
  deleted_at: timestamp
  embeds: jsonb
  fid: bigint
  hash: bytea
  id: bigint
  mentions: [bigint!]
  mentions_positions: [smallint!]
  parent_fid: bigint
  parent_hash: bytea
  parent_url: String
  root_parent_hash: bytea
  root_parent_url: String
  text: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type farcaster_casts_sum_fields {
  fid: bigint
  id: bigint
  parent_fid: bigint
}

"""
order by sum() on columns of table "farcaster.casts"
"""
input farcaster_casts_sum_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
aggregate var_pop on columns
"""
type farcaster_casts_var_pop_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by var_pop() on columns of table "farcaster.casts"
"""
input farcaster_casts_var_pop_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
aggregate var_samp on columns
"""
type farcaster_casts_var_samp_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by var_samp() on columns of table "farcaster.casts"
"""
input farcaster_casts_var_samp_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
aggregate variance on columns
"""
type farcaster_casts_variance_fields {
  fid: Float
  id: Float
  parent_fid: Float
}

"""
order by variance() on columns of table "farcaster.casts"
"""
input farcaster_casts_variance_order_by {
  fid: order_by
  id: order_by
  parent_fid: order_by
}

"""
columns and relationships of "farcaster.reactions"
"""
type farcaster_reactions {
  created_at: timestamp!
  deleted_at: timestamp
  fid: bigint!
  hash: bytea!
  id: bigint!
  reaction_type: smallint!
  target_fid: bigint
  target_hash: bytea
  target_url: String
  timestamp: timestamp!
  updated_at: timestamp!
}

"""
aggregated selection of "farcaster.reactions"
"""
type farcaster_reactions_aggregate {
  aggregate: farcaster_reactions_aggregate_fields
  nodes: [farcaster_reactions!]!
}

input farcaster_reactions_aggregate_bool_exp {
  count: farcaster_reactions_aggregate_bool_exp_count
}

input farcaster_reactions_aggregate_bool_exp_count {
  arguments: [farcaster_reactions_select_column!]
  distinct: Boolean
  filter: farcaster_reactions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "farcaster.reactions"
"""
type farcaster_reactions_aggregate_fields {
  avg: farcaster_reactions_avg_fields
  count(columns: [farcaster_reactions_select_column!], distinct: Boolean): Int!
  max: farcaster_reactions_max_fields
  min: farcaster_reactions_min_fields
  stddev: farcaster_reactions_stddev_fields
  stddev_pop: farcaster_reactions_stddev_pop_fields
  stddev_samp: farcaster_reactions_stddev_samp_fields
  sum: farcaster_reactions_sum_fields
  var_pop: farcaster_reactions_var_pop_fields
  var_samp: farcaster_reactions_var_samp_fields
  variance: farcaster_reactions_variance_fields
}

"""
order by aggregate values of table "farcaster.reactions"
"""
input farcaster_reactions_aggregate_order_by {
  avg: farcaster_reactions_avg_order_by
  count: order_by
  max: farcaster_reactions_max_order_by
  min: farcaster_reactions_min_order_by
  stddev: farcaster_reactions_stddev_order_by
  stddev_pop: farcaster_reactions_stddev_pop_order_by
  stddev_samp: farcaster_reactions_stddev_samp_order_by
  sum: farcaster_reactions_sum_order_by
  var_pop: farcaster_reactions_var_pop_order_by
  var_samp: farcaster_reactions_var_samp_order_by
  variance: farcaster_reactions_variance_order_by
}

"""
aggregate avg on columns
"""
type farcaster_reactions_avg_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by avg() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_avg_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
Boolean expression to filter rows from the table "farcaster.reactions". All fields are combined with a logical 'AND'.
"""
input farcaster_reactions_bool_exp {
  _and: [farcaster_reactions_bool_exp!]
  _not: farcaster_reactions_bool_exp
  _or: [farcaster_reactions_bool_exp!]
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  fid: bigint_comparison_exp
  hash: bytea_comparison_exp
  id: bigint_comparison_exp
  reaction_type: smallint_comparison_exp
  target_fid: bigint_comparison_exp
  target_hash: bytea_comparison_exp
  target_url: String_comparison_exp
  timestamp: timestamp_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
aggregate max on columns
"""
type farcaster_reactions_max_fields {
  created_at: timestamp
  deleted_at: timestamp
  fid: bigint
  id: bigint
  reaction_type: smallint
  target_fid: bigint
  target_url: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
order by max() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_max_order_by {
  created_at: order_by
  deleted_at: order_by
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
  target_url: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type farcaster_reactions_min_fields {
  created_at: timestamp
  deleted_at: timestamp
  fid: bigint
  id: bigint
  reaction_type: smallint
  target_fid: bigint
  target_url: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
order by min() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_min_order_by {
  created_at: order_by
  deleted_at: order_by
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
  target_url: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "farcaster.reactions".
"""
input farcaster_reactions_order_by {
  created_at: order_by
  deleted_at: order_by
  fid: order_by
  hash: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
  target_hash: order_by
  target_url: order_by
  timestamp: order_by
  updated_at: order_by
}

"""
select columns of table "farcaster.reactions"
"""
enum farcaster_reactions_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  fid

  """
  column name
  """
  hash

  """
  column name
  """
  id

  """
  column name
  """
  reaction_type

  """
  column name
  """
  target_fid

  """
  column name
  """
  target_hash

  """
  column name
  """
  target_url

  """
  column name
  """
  timestamp

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type farcaster_reactions_stddev_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by stddev() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_stddev_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
aggregate stddev_pop on columns
"""
type farcaster_reactions_stddev_pop_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by stddev_pop() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_stddev_pop_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
aggregate stddev_samp on columns
"""
type farcaster_reactions_stddev_samp_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by stddev_samp() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_stddev_samp_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
Streaming cursor of the table "farcaster_reactions"
"""
input farcaster_reactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: farcaster_reactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input farcaster_reactions_stream_cursor_value_input {
  created_at: timestamp
  deleted_at: timestamp
  fid: bigint
  hash: bytea
  id: bigint
  reaction_type: smallint
  target_fid: bigint
  target_hash: bytea
  target_url: String
  timestamp: timestamp
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type farcaster_reactions_sum_fields {
  fid: bigint
  id: bigint
  reaction_type: smallint
  target_fid: bigint
}

"""
order by sum() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_sum_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
aggregate var_pop on columns
"""
type farcaster_reactions_var_pop_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by var_pop() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_var_pop_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
aggregate var_samp on columns
"""
type farcaster_reactions_var_samp_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by var_samp() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_var_samp_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

"""
aggregate variance on columns
"""
type farcaster_reactions_variance_fields {
  fid: Float
  id: Float
  reaction_type: Float
  target_fid: Float
}

"""
order by variance() on columns of table "farcaster.reactions"
"""
input farcaster_reactions_variance_order_by {
  fid: order_by
  id: order_by
  reaction_type: order_by
  target_fid: order_by
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
columns and relationships of "gift_private"
"""
type gift_private {
  gift_id: bigint
  note: String

  """
  An object relationship
  """
  recipient: users
  recipient_id: bigint

  """
  An object relationship
  """
  sender: users
  sender_id: bigint
}

"""
Boolean expression to filter rows from the table "gift_private". All fields are combined with a logical 'AND'.
"""
input gift_private_bool_exp {
  _and: [gift_private_bool_exp!]
  _not: gift_private_bool_exp
  _or: [gift_private_bool_exp!]
  gift_id: bigint_comparison_exp
  note: String_comparison_exp
  recipient: users_bool_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_id: bigint_comparison_exp
}

"""
Ordering options when selecting data from "gift_private".
"""
input gift_private_order_by {
  gift_id: order_by
  note: order_by
  recipient: users_order_by
  recipient_id: order_by
  sender: users_order_by
  sender_id: order_by
}

"""
select columns of table "gift_private"
"""
enum gift_private_select_column {
  """
  column name
  """
  gift_id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_id
}

"""
Streaming cursor of the table "gift_private"
"""
input gift_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: gift_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input gift_private_stream_cursor_value_input {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
columns and relationships of "github_accounts"
"""
type github_accounts {
  avatar_url: String!
  github_id: bigint!

  """
  An object relationship
  """
  profile: profiles!
  profile_id: bigint!
  username: String!
}

"""
Boolean expression to filter rows from the table "github_accounts". All fields are combined with a logical 'AND'.
"""
input github_accounts_bool_exp {
  _and: [github_accounts_bool_exp!]
  _not: github_accounts_bool_exp
  _or: [github_accounts_bool_exp!]
  avatar_url: String_comparison_exp
  github_id: bigint_comparison_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  username: String_comparison_exp
}

"""
response of any mutation on the table "github_accounts"
"""
type github_accounts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [github_accounts!]!
}

"""
Ordering options when selecting data from "github_accounts".
"""
input github_accounts_order_by {
  avatar_url: order_by
  github_id: order_by
  profile: profiles_order_by
  profile_id: order_by
  username: order_by
}

"""
select columns of table "github_accounts"
"""
enum github_accounts_select_column {
  """
  column name
  """
  avatar_url

  """
  column name
  """
  github_id

  """
  column name
  """
  profile_id

  """
  column name
  """
  username
}

"""
Streaming cursor of the table "github_accounts"
"""
input github_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: github_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input github_accounts_stream_cursor_value_input {
  avatar_url: String
  github_id: bigint
  profile_id: bigint
  username: String
}

"""
columns and relationships of "histories"
"""
type histories {
  bio: String

  """
  An object relationship
  """
  circle: circles

  """
  An object relationship
  """
  epoch: epochs
  id: bigint!

  """
  An object relationship
  """
  user: users
}

"""
order by aggregate values of table "histories"
"""
input histories_aggregate_order_by {
  avg: histories_avg_order_by
  count: order_by
  max: histories_max_order_by
  min: histories_min_order_by
  stddev: histories_stddev_order_by
  stddev_pop: histories_stddev_pop_order_by
  stddev_samp: histories_stddev_samp_order_by
  sum: histories_sum_order_by
  var_pop: histories_var_pop_order_by
  var_samp: histories_var_samp_order_by
  variance: histories_variance_order_by
}

"""
order by avg() on columns of table "histories"
"""
input histories_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "histories". All fields are combined with a logical 'AND'.
"""
input histories_bool_exp {
  _and: [histories_bool_exp!]
  _not: histories_bool_exp
  _or: [histories_bool_exp!]
  bio: String_comparison_exp
  circle: circles_bool_exp
  epoch: epochs_bool_exp
  id: bigint_comparison_exp
  user: users_bool_exp
}

"""
order by max() on columns of table "histories"
"""
input histories_max_order_by {
  bio: order_by
  id: order_by
}

"""
order by min() on columns of table "histories"
"""
input histories_min_order_by {
  bio: order_by
  id: order_by
}

"""
Ordering options when selecting data from "histories".
"""
input histories_order_by {
  bio: order_by
  circle: circles_order_by
  epoch: epochs_order_by
  id: order_by
  user: users_order_by
}

"""
select columns of table "histories"
"""
enum histories_select_column {
  """
  column name
  """
  bio

  """
  column name
  """
  id
}

"""
order by stddev() on columns of table "histories"
"""
input histories_stddev_order_by {
  id: order_by
}

"""
order by stddev_pop() on columns of table "histories"
"""
input histories_stddev_pop_order_by {
  id: order_by
}

"""
order by stddev_samp() on columns of table "histories"
"""
input histories_stddev_samp_order_by {
  id: order_by
}

"""
Streaming cursor of the table "histories"
"""
input histories_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: histories_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input histories_stream_cursor_value_input {
  bio: String
  id: bigint
}

"""
order by sum() on columns of table "histories"
"""
input histories_sum_order_by {
  id: order_by
}

"""
order by var_pop() on columns of table "histories"
"""
input histories_var_pop_order_by {
  id: order_by
}

"""
order by var_samp() on columns of table "histories"
"""
input histories_var_samp_order_by {
  id: order_by
}

"""
order by variance() on columns of table "histories"
"""
input histories_variance_order_by {
  id: order_by
}

"""
Invite codes table for restricting access to app
"""
type invite_codes {
  code: citext!
  created_at: timestamptz!

  """
  An object relationship
  """
  invited: profiles_public
  invited_id: bigint

  """
  An object relationship
  """
  inviter: profiles_public
  inviter_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "invite_codes"
"""
type invite_codes_aggregate {
  aggregate: invite_codes_aggregate_fields
  nodes: [invite_codes!]!
}

input invite_codes_aggregate_bool_exp {
  count: invite_codes_aggregate_bool_exp_count
}

input invite_codes_aggregate_bool_exp_count {
  arguments: [invite_codes_select_column!]
  distinct: Boolean
  filter: invite_codes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "invite_codes"
"""
type invite_codes_aggregate_fields {
  avg: invite_codes_avg_fields
  count(columns: [invite_codes_select_column!], distinct: Boolean): Int!
  max: invite_codes_max_fields
  min: invite_codes_min_fields
  stddev: invite_codes_stddev_fields
  stddev_pop: invite_codes_stddev_pop_fields
  stddev_samp: invite_codes_stddev_samp_fields
  sum: invite_codes_sum_fields
  var_pop: invite_codes_var_pop_fields
  var_samp: invite_codes_var_samp_fields
  variance: invite_codes_variance_fields
}

"""
order by aggregate values of table "invite_codes"
"""
input invite_codes_aggregate_order_by {
  avg: invite_codes_avg_order_by
  count: order_by
  max: invite_codes_max_order_by
  min: invite_codes_min_order_by
  stddev: invite_codes_stddev_order_by
  stddev_pop: invite_codes_stddev_pop_order_by
  stddev_samp: invite_codes_stddev_samp_order_by
  sum: invite_codes_sum_order_by
  var_pop: invite_codes_var_pop_order_by
  var_samp: invite_codes_var_samp_order_by
  variance: invite_codes_variance_order_by
}

"""
aggregate avg on columns
"""
type invite_codes_avg_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by avg() on columns of table "invite_codes"
"""
input invite_codes_avg_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
Boolean expression to filter rows from the table "invite_codes". All fields are combined with a logical 'AND'.
"""
input invite_codes_bool_exp {
  _and: [invite_codes_bool_exp!]
  _not: invite_codes_bool_exp
  _or: [invite_codes_bool_exp!]
  code: citext_comparison_exp
  created_at: timestamptz_comparison_exp
  invited: profiles_public_bool_exp
  invited_id: bigint_comparison_exp
  inviter: profiles_public_bool_exp
  inviter_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type invite_codes_max_fields {
  code: citext
  created_at: timestamptz
  invited_id: bigint
  inviter_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "invite_codes"
"""
input invite_codes_max_order_by {
  code: order_by
  created_at: order_by
  invited_id: order_by
  inviter_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type invite_codes_min_fields {
  code: citext
  created_at: timestamptz
  invited_id: bigint
  inviter_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "invite_codes"
"""
input invite_codes_min_order_by {
  code: order_by
  created_at: order_by
  invited_id: order_by
  inviter_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "invite_codes".
"""
input invite_codes_order_by {
  code: order_by
  created_at: order_by
  invited: profiles_public_order_by
  invited_id: order_by
  inviter: profiles_public_order_by
  inviter_id: order_by
  updated_at: order_by
}

"""
select columns of table "invite_codes"
"""
enum invite_codes_select_column {
  """
  column name
  """
  code

  """
  column name
  """
  created_at

  """
  column name
  """
  invited_id

  """
  column name
  """
  inviter_id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type invite_codes_stddev_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by stddev() on columns of table "invite_codes"
"""
input invite_codes_stddev_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type invite_codes_stddev_pop_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by stddev_pop() on columns of table "invite_codes"
"""
input invite_codes_stddev_pop_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type invite_codes_stddev_samp_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by stddev_samp() on columns of table "invite_codes"
"""
input invite_codes_stddev_samp_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
Streaming cursor of the table "invite_codes"
"""
input invite_codes_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: invite_codes_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input invite_codes_stream_cursor_value_input {
  code: citext
  created_at: timestamptz
  invited_id: bigint
  inviter_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type invite_codes_sum_fields {
  invited_id: bigint
  inviter_id: bigint
}

"""
order by sum() on columns of table "invite_codes"
"""
input invite_codes_sum_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
aggregate var_pop on columns
"""
type invite_codes_var_pop_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by var_pop() on columns of table "invite_codes"
"""
input invite_codes_var_pop_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
aggregate var_samp on columns
"""
type invite_codes_var_samp_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by var_samp() on columns of table "invite_codes"
"""
input invite_codes_var_samp_order_by {
  invited_id: order_by
  inviter_id: order_by
}

"""
aggregate variance on columns
"""
type invite_codes_variance_fields {
  invited_id: Float
  inviter_id: Float
}

"""
order by variance() on columns of table "invite_codes"
"""
input invite_codes_variance_order_by {
  invited_id: order_by
  inviter_id: order_by
}

scalar json

"""
Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """
  is the column contained in the given json value
  """
  _contained_in: jsonb

  """
  does the column contain the given json value at the top level
  """
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """
  does the string exist as a top-level key in the column
  """
  _has_key: String

  """
  do all of these strings exist as top-level keys in the column
  """
  _has_keys_all: [String!]

  """
  do any of these strings exist as top-level keys in the column
  """
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
tracks the amount of keys an address holds in a given subject. updated with data from the key_tx table
"""
type link_holders {
  amount: Int!
  holder: citext!

  """
  An object relationship
  """
  holder_cosoul: cosouls

  """
  An object relationship
  """
  holder_profile_public: profiles_public
  target: citext!

  """
  An object relationship
  """
  target_cosoul: cosouls

  """
  An object relationship
  """
  target_profile_public: profiles_public
  updated_at: timestamptz!
}

"""
aggregated selection of "link_holders"
"""
type link_holders_aggregate {
  aggregate: link_holders_aggregate_fields
  nodes: [link_holders!]!
}

input link_holders_aggregate_bool_exp {
  count: link_holders_aggregate_bool_exp_count
}

input link_holders_aggregate_bool_exp_count {
  arguments: [link_holders_select_column!]
  distinct: Boolean
  filter: link_holders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "link_holders"
"""
type link_holders_aggregate_fields {
  avg: link_holders_avg_fields
  count(columns: [link_holders_select_column!], distinct: Boolean): Int!
  max: link_holders_max_fields
  min: link_holders_min_fields
  stddev: link_holders_stddev_fields
  stddev_pop: link_holders_stddev_pop_fields
  stddev_samp: link_holders_stddev_samp_fields
  sum: link_holders_sum_fields
  var_pop: link_holders_var_pop_fields
  var_samp: link_holders_var_samp_fields
  variance: link_holders_variance_fields
}

"""
order by aggregate values of table "link_holders"
"""
input link_holders_aggregate_order_by {
  avg: link_holders_avg_order_by
  count: order_by
  max: link_holders_max_order_by
  min: link_holders_min_order_by
  stddev: link_holders_stddev_order_by
  stddev_pop: link_holders_stddev_pop_order_by
  stddev_samp: link_holders_stddev_samp_order_by
  sum: link_holders_sum_order_by
  var_pop: link_holders_var_pop_order_by
  var_samp: link_holders_var_samp_order_by
  variance: link_holders_variance_order_by
}

"""
aggregate avg on columns
"""
type link_holders_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "link_holders"
"""
input link_holders_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "link_holders". All fields are combined with a logical 'AND'.
"""
input link_holders_bool_exp {
  _and: [link_holders_bool_exp!]
  _not: link_holders_bool_exp
  _or: [link_holders_bool_exp!]
  amount: Int_comparison_exp
  holder: citext_comparison_exp
  holder_cosoul: cosouls_bool_exp
  holder_profile_public: profiles_public_bool_exp
  target: citext_comparison_exp
  target_cosoul: cosouls_bool_exp
  target_profile_public: profiles_public_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type link_holders_max_fields {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
order by max() on columns of table "link_holders"
"""
input link_holders_max_order_by {
  amount: order_by
  holder: order_by
  target: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type link_holders_min_fields {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
order by min() on columns of table "link_holders"
"""
input link_holders_min_order_by {
  amount: order_by
  holder: order_by
  target: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "link_holders".
"""
input link_holders_order_by {
  amount: order_by
  holder: order_by
  holder_cosoul: cosouls_order_by
  holder_profile_public: profiles_public_order_by
  target: order_by
  target_cosoul: cosouls_order_by
  target_profile_public: profiles_public_order_by
  updated_at: order_by
}

"""
select columns of table "link_holders"
"""
enum link_holders_select_column {
  """
  column name
  """
  amount

  """
  column name
  """
  holder

  """
  column name
  """
  target

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type link_holders_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "link_holders"
"""
input link_holders_stddev_order_by {
  amount: order_by
}

"""
aggregate stddev_pop on columns
"""
type link_holders_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "link_holders"
"""
input link_holders_stddev_pop_order_by {
  amount: order_by
}

"""
aggregate stddev_samp on columns
"""
type link_holders_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "link_holders"
"""
input link_holders_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "link_holders"
"""
input link_holders_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: link_holders_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input link_holders_stream_cursor_value_input {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type link_holders_sum_fields {
  amount: Int
}

"""
order by sum() on columns of table "link_holders"
"""
input link_holders_sum_order_by {
  amount: order_by
}

"""
aggregate var_pop on columns
"""
type link_holders_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "link_holders"
"""
input link_holders_var_pop_order_by {
  amount: order_by
}

"""
aggregate var_samp on columns
"""
type link_holders_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "link_holders"
"""
input link_holders_var_samp_order_by {
  amount: order_by
}

"""
aggregate variance on columns
"""
type link_holders_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "link_holders"
"""
input link_holders_variance_order_by {
  amount: order_by
}

"""
columns and relationships of "link_tx"
"""
type link_tx {
  buy: Boolean!
  created_at: timestamptz!
  eth_amount: String!
  holder: citext!

  """
  An object relationship
  """
  holder_profile: profiles_public
  link_amount: String!
  protocol_fee_amount: String!
  supply: numeric!
  target: citext!
  target_fee_amount: String!

  """
  An object relationship
  """
  target_profile: profiles_public
  tx_hash: citext!
}

"""
Boolean expression to filter rows from the table "link_tx". All fields are combined with a logical 'AND'.
"""
input link_tx_bool_exp {
  _and: [link_tx_bool_exp!]
  _not: link_tx_bool_exp
  _or: [link_tx_bool_exp!]
  buy: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  eth_amount: String_comparison_exp
  holder: citext_comparison_exp
  holder_profile: profiles_public_bool_exp
  link_amount: String_comparison_exp
  protocol_fee_amount: String_comparison_exp
  supply: numeric_comparison_exp
  target: citext_comparison_exp
  target_fee_amount: String_comparison_exp
  target_profile: profiles_public_bool_exp
  tx_hash: citext_comparison_exp
}

"""
Ordering options when selecting data from "link_tx".
"""
input link_tx_order_by {
  buy: order_by
  created_at: order_by
  eth_amount: order_by
  holder: order_by
  holder_profile: profiles_public_order_by
  link_amount: order_by
  protocol_fee_amount: order_by
  supply: order_by
  target: order_by
  target_fee_amount: order_by
  target_profile: profiles_public_order_by
  tx_hash: order_by
}

"""
select columns of table "link_tx"
"""
enum link_tx_select_column {
  """
  column name
  """
  buy

  """
  column name
  """
  created_at

  """
  column name
  """
  eth_amount

  """
  column name
  """
  holder

  """
  column name
  """
  link_amount

  """
  column name
  """
  protocol_fee_amount

  """
  column name
  """
  supply

  """
  column name
  """
  target

  """
  column name
  """
  target_fee_amount

  """
  column name
  """
  tx_hash
}

"""
Streaming cursor of the table "link_tx"
"""
input link_tx_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: link_tx_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input link_tx_stream_cursor_value_input {
  buy: Boolean
  created_at: timestamptz
  eth_amount: String
  holder: citext
  link_amount: String
  protocol_fee_amount: String
  supply: numeric
  target: citext
  target_fee_amount: String
  tx_hash: citext
}

"""
columns and relationships of "linkedin_accounts"
"""
type linkedin_accounts {
  name: String!
  picture: String
  profile_id: bigint!
}

"""
Boolean expression to filter rows from the table "linkedin_accounts". All fields are combined with a logical 'AND'.
"""
input linkedin_accounts_bool_exp {
  _and: [linkedin_accounts_bool_exp!]
  _not: linkedin_accounts_bool_exp
  _or: [linkedin_accounts_bool_exp!]
  name: String_comparison_exp
  picture: String_comparison_exp
  profile_id: bigint_comparison_exp
}

"""
response of any mutation on the table "linkedin_accounts"
"""
type linkedin_accounts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [linkedin_accounts!]!
}

"""
Ordering options when selecting data from "linkedin_accounts".
"""
input linkedin_accounts_order_by {
  name: order_by
  picture: order_by
  profile_id: order_by
}

"""
select columns of table "linkedin_accounts"
"""
enum linkedin_accounts_select_column {
  """
  column name
  """
  name

  """
  column name
  """
  picture

  """
  column name
  """
  profile_id
}

"""
Streaming cursor of the table "linkedin_accounts"
"""
input linkedin_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: linkedin_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input linkedin_accounts_stream_cursor_value_input {
  name: String
  picture: String
  profile_id: bigint
}

"""
columns and relationships of "locked_token_distribution_gifts"
"""
type locked_token_distribution_gifts {
  earnings: numeric!
  id: bigint!

  """
  An object relationship
  """
  locked_token_distribution: locked_token_distributions!
  locked_token_distribution_id: bigint!

  """
  An object relationship
  """
  profile: profiles!
  profile_id: bigint!
}

"""
order by aggregate values of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_aggregate_order_by {
  avg: locked_token_distribution_gifts_avg_order_by
  count: order_by
  max: locked_token_distribution_gifts_max_order_by
  min: locked_token_distribution_gifts_min_order_by
  stddev: locked_token_distribution_gifts_stddev_order_by
  stddev_pop: locked_token_distribution_gifts_stddev_pop_order_by
  stddev_samp: locked_token_distribution_gifts_stddev_samp_order_by
  sum: locked_token_distribution_gifts_sum_order_by
  var_pop: locked_token_distribution_gifts_var_pop_order_by
  var_samp: locked_token_distribution_gifts_var_samp_order_by
  variance: locked_token_distribution_gifts_variance_order_by
}

"""
input type for inserting array relation for remote table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_arr_rel_insert_input {
  data: [locked_token_distribution_gifts_insert_input!]!

  """
  upsert condition
  """
  on_conflict: locked_token_distribution_gifts_on_conflict
}

"""
order by avg() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_avg_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "locked_token_distribution_gifts". All fields are combined with a logical 'AND'.
"""
input locked_token_distribution_gifts_bool_exp {
  _and: [locked_token_distribution_gifts_bool_exp!]
  _not: locked_token_distribution_gifts_bool_exp
  _or: [locked_token_distribution_gifts_bool_exp!]
  earnings: numeric_comparison_exp
  id: bigint_comparison_exp
  locked_token_distribution: locked_token_distributions_bool_exp
  locked_token_distribution_id: bigint_comparison_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "locked_token_distribution_gifts"
"""
enum locked_token_distribution_gifts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  locked_token_distribution_gifts_pkey
}

"""
input type for inserting data into table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_insert_input {
  earnings: numeric
  locked_token_distribution: locked_token_distributions_obj_rel_insert_input
  locked_token_distribution_id: bigint
  profile_id: bigint
}

"""
order by max() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_max_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
order by min() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_min_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
response of any mutation on the table "locked_token_distribution_gifts"
"""
type locked_token_distribution_gifts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [locked_token_distribution_gifts!]!
}

"""
on_conflict condition type for table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_on_conflict {
  constraint: locked_token_distribution_gifts_constraint!
  update_columns: [locked_token_distribution_gifts_update_column!]! = []
  where: locked_token_distribution_gifts_bool_exp
}

"""
Ordering options when selecting data from "locked_token_distribution_gifts".
"""
input locked_token_distribution_gifts_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution: locked_token_distributions_order_by
  locked_token_distribution_id: order_by
  profile: profiles_order_by
  profile_id: order_by
}

"""
select columns of table "locked_token_distribution_gifts"
"""
enum locked_token_distribution_gifts_select_column {
  """
  column name
  """
  earnings

  """
  column name
  """
  id

  """
  column name
  """
  locked_token_distribution_id

  """
  column name
  """
  profile_id
}

"""
order by stddev() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_stddev_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
order by stddev_pop() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_stddev_pop_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
order by stddev_samp() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_stddev_samp_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: locked_token_distribution_gifts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input locked_token_distribution_gifts_stream_cursor_value_input {
  earnings: numeric
  id: bigint
  locked_token_distribution_id: bigint
  profile_id: bigint
}

"""
order by sum() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_sum_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
placeholder for update columns of table "locked_token_distribution_gifts" (current role has no relevant permissions)
"""
enum locked_token_distribution_gifts_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
order by var_pop() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_var_pop_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
order by var_samp() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_var_samp_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
order by variance() on columns of table "locked_token_distribution_gifts"
"""
input locked_token_distribution_gifts_variance_order_by {
  earnings: order_by
  id: order_by
  locked_token_distribution_id: order_by
  profile_id: order_by
}

"""
columns and relationships of "locked_token_distributions"
"""
type locked_token_distributions {
  chain_id: Int!
  distributed_by: bigint!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: bigint!
  gift_amount: numeric!
  id: bigint!

  """
  An array relationship
  """
  locked_token_distribution_gifts(
    """
    distinct select on columns
    """
    distinct_on: [locked_token_distribution_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [locked_token_distribution_gifts_order_by!]

    """
    filter the rows returned
    """
    where: locked_token_distribution_gifts_bool_exp
  ): [locked_token_distribution_gifts!]!

  """
  An object relationship
  """
  profile: profiles!
  token_contract_address: String
  token_decimals: Int!
  token_symbol: String
  tx_hash: String
}

"""
Boolean expression to filter rows from the table "locked_token_distributions". All fields are combined with a logical 'AND'.
"""
input locked_token_distributions_bool_exp {
  _and: [locked_token_distributions_bool_exp!]
  _not: locked_token_distributions_bool_exp
  _or: [locked_token_distributions_bool_exp!]
  chain_id: Int_comparison_exp
  distributed_by: bigint_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: bigint_comparison_exp
  gift_amount: numeric_comparison_exp
  id: bigint_comparison_exp
  locked_token_distribution_gifts: locked_token_distribution_gifts_bool_exp
  profile: profiles_bool_exp
  token_contract_address: String_comparison_exp
  token_decimals: Int_comparison_exp
  token_symbol: String_comparison_exp
  tx_hash: String_comparison_exp
}

"""
unique or primary key constraints on table "locked_token_distributions"
"""
enum locked_token_distributions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  locked_token_distributions_pkey
}

"""
input type for inserting data into table "locked_token_distributions"
"""
input locked_token_distributions_insert_input {
  chain_id: Int
  epoch_id: bigint
  gift_amount: numeric
  locked_token_distribution_gifts: locked_token_distribution_gifts_arr_rel_insert_input
  token_contract_address: String
  token_decimals: Int
  token_symbol: String
  tx_hash: String
}

"""
response of any mutation on the table "locked_token_distributions"
"""
type locked_token_distributions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [locked_token_distributions!]!
}

"""
input type for inserting object relation for remote table "locked_token_distributions"
"""
input locked_token_distributions_obj_rel_insert_input {
  data: locked_token_distributions_insert_input!

  """
  upsert condition
  """
  on_conflict: locked_token_distributions_on_conflict
}

"""
on_conflict condition type for table "locked_token_distributions"
"""
input locked_token_distributions_on_conflict {
  constraint: locked_token_distributions_constraint!
  update_columns: [locked_token_distributions_update_column!]! = []
  where: locked_token_distributions_bool_exp
}

"""
Ordering options when selecting data from "locked_token_distributions".
"""
input locked_token_distributions_order_by {
  chain_id: order_by
  distributed_by: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gift_amount: order_by
  id: order_by
  locked_token_distribution_gifts_aggregate: locked_token_distribution_gifts_aggregate_order_by
  profile: profiles_order_by
  token_contract_address: order_by
  token_decimals: order_by
  token_symbol: order_by
  tx_hash: order_by
}

"""
primary key columns input for table: locked_token_distributions
"""
input locked_token_distributions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "locked_token_distributions"
"""
enum locked_token_distributions_select_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  distributed_by

  """
  column name
  """
  epoch_id

  """
  column name
  """
  gift_amount

  """
  column name
  """
  id

  """
  column name
  """
  token_contract_address

  """
  column name
  """
  token_decimals

  """
  column name
  """
  token_symbol

  """
  column name
  """
  tx_hash
}

"""
input type for updating data in table "locked_token_distributions"
"""
input locked_token_distributions_set_input {
  tx_hash: String
}

"""
Streaming cursor of the table "locked_token_distributions"
"""
input locked_token_distributions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: locked_token_distributions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input locked_token_distributions_stream_cursor_value_input {
  chain_id: Int
  distributed_by: bigint
  epoch_id: bigint
  gift_amount: numeric
  id: bigint
  token_contract_address: String
  token_decimals: Int
  token_symbol: String
  tx_hash: String
}

"""
update columns of table "locked_token_distributions"
"""
enum locked_token_distributions_update_column {
  """
  column name
  """
  tx_hash
}

input locked_token_distributions_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: locked_token_distributions_set_input

  """
  filter the rows which have to be updated
  """
  where: locked_token_distributions_bool_exp!
}

"""
columns and relationships of "member_circle_pgives"
"""
type member_circle_pgives {
  """
  An object relationship
  """
  circle: circles
  circle_id: Int
  epochs: bigint
  pgive: numeric

  """
  An object relationship
  """
  user: users
  user_id: Int
}

"""
Boolean expression to filter rows from the table "member_circle_pgives". All fields are combined with a logical 'AND'.
"""
input member_circle_pgives_bool_exp {
  _and: [member_circle_pgives_bool_exp!]
  _not: member_circle_pgives_bool_exp
  _or: [member_circle_pgives_bool_exp!]
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  epochs: bigint_comparison_exp
  pgive: numeric_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "member_circle_pgives".
"""
input member_circle_pgives_order_by {
  circle: circles_order_by
  circle_id: order_by
  epochs: order_by
  pgive: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "member_circle_pgives"
"""
enum member_circle_pgives_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  epochs

  """
  column name
  """
  pgive

  """
  column name
  """
  user_id
}

"""
Streaming cursor of the table "member_circle_pgives"
"""
input member_circle_pgives_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: member_circle_pgives_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input member_circle_pgives_stream_cursor_value_input {
  circle_id: Int
  epochs: bigint
  pgive: numeric
  user_id: Int
}

"""
member allocated pgives per epoch
"""
type member_epoch_pgives {
  """
  An object relationship
  """
  circle: circles
  circle_id: Int
  created_at: timestamptz!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: Int!
  gives_received: Int!
  id: Int!
  normalized_pgive: numeric!
  opt_out_bonus: numeric!

  """
  An object relationship
  """
  organization: organizations
  organization_id: Int
  pgive: numeric!

  """
  An object relationship
  """
  user: users!
  user_id: Int!
}

"""
aggregated selection of "member_epoch_pgives"
"""
type member_epoch_pgives_aggregate {
  aggregate: member_epoch_pgives_aggregate_fields
  nodes: [member_epoch_pgives!]!
}

input member_epoch_pgives_aggregate_bool_exp {
  count: member_epoch_pgives_aggregate_bool_exp_count
}

input member_epoch_pgives_aggregate_bool_exp_count {
  arguments: [member_epoch_pgives_select_column!]
  distinct: Boolean
  filter: member_epoch_pgives_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "member_epoch_pgives"
"""
type member_epoch_pgives_aggregate_fields {
  avg: member_epoch_pgives_avg_fields
  count(columns: [member_epoch_pgives_select_column!], distinct: Boolean): Int!
  max: member_epoch_pgives_max_fields
  min: member_epoch_pgives_min_fields
  stddev: member_epoch_pgives_stddev_fields
  stddev_pop: member_epoch_pgives_stddev_pop_fields
  stddev_samp: member_epoch_pgives_stddev_samp_fields
  sum: member_epoch_pgives_sum_fields
  var_pop: member_epoch_pgives_var_pop_fields
  var_samp: member_epoch_pgives_var_samp_fields
  variance: member_epoch_pgives_variance_fields
}

"""
order by aggregate values of table "member_epoch_pgives"
"""
input member_epoch_pgives_aggregate_order_by {
  avg: member_epoch_pgives_avg_order_by
  count: order_by
  max: member_epoch_pgives_max_order_by
  min: member_epoch_pgives_min_order_by
  stddev: member_epoch_pgives_stddev_order_by
  stddev_pop: member_epoch_pgives_stddev_pop_order_by
  stddev_samp: member_epoch_pgives_stddev_samp_order_by
  sum: member_epoch_pgives_sum_order_by
  var_pop: member_epoch_pgives_var_pop_order_by
  var_samp: member_epoch_pgives_var_samp_order_by
  variance: member_epoch_pgives_variance_order_by
}

"""
aggregate avg on columns
"""
type member_epoch_pgives_avg_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by avg() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "member_epoch_pgives". All fields are combined with a logical 'AND'.
"""
input member_epoch_pgives_bool_exp {
  _and: [member_epoch_pgives_bool_exp!]
  _not: member_epoch_pgives_bool_exp
  _or: [member_epoch_pgives_bool_exp!]
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  gives_received: Int_comparison_exp
  id: Int_comparison_exp
  normalized_pgive: numeric_comparison_exp
  opt_out_bonus: numeric_comparison_exp
  organization: organizations_bool_exp
  organization_id: Int_comparison_exp
  pgive: numeric_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
aggregate max on columns
"""
type member_epoch_pgives_max_fields {
  circle_id: Int
  created_at: timestamptz
  epoch_id: Int
  gives_received: Int
  id: Int
  normalized_pgive: numeric
  opt_out_bonus: numeric
  organization_id: Int
  pgive: numeric
  user_id: Int
}

"""
order by max() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_max_order_by {
  circle_id: order_by
  created_at: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
aggregate min on columns
"""
type member_epoch_pgives_min_fields {
  circle_id: Int
  created_at: timestamptz
  epoch_id: Int
  gives_received: Int
  id: Int
  normalized_pgive: numeric
  opt_out_bonus: numeric
  organization_id: Int
  pgive: numeric
  user_id: Int
}

"""
order by min() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_min_order_by {
  circle_id: order_by
  created_at: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "member_epoch_pgives".
"""
input member_epoch_pgives_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization: organizations_order_by
  organization_id: order_by
  pgive: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "member_epoch_pgives"
"""
enum member_epoch_pgives_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  epoch_id

  """
  column name
  """
  gives_received

  """
  column name
  """
  id

  """
  column name
  """
  normalized_pgive

  """
  column name
  """
  opt_out_bonus

  """
  column name
  """
  organization_id

  """
  column name
  """
  pgive

  """
  column name
  """
  user_id
}

"""
aggregate stddev on columns
"""
type member_epoch_pgives_stddev_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by stddev() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type member_epoch_pgives_stddev_pop_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type member_epoch_pgives_stddev_samp_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "member_epoch_pgives"
"""
input member_epoch_pgives_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: member_epoch_pgives_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input member_epoch_pgives_stream_cursor_value_input {
  circle_id: Int
  created_at: timestamptz
  epoch_id: Int
  gives_received: Int
  id: Int
  normalized_pgive: numeric
  opt_out_bonus: numeric
  organization_id: Int
  pgive: numeric
  user_id: Int
}

"""
aggregate sum on columns
"""
type member_epoch_pgives_sum_fields {
  circle_id: Int
  epoch_id: Int
  gives_received: Int
  id: Int
  normalized_pgive: numeric
  opt_out_bonus: numeric
  organization_id: Int
  pgive: numeric
  user_id: Int
}

"""
order by sum() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
aggregate var_pop on columns
"""
type member_epoch_pgives_var_pop_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
aggregate var_samp on columns
"""
type member_epoch_pgives_var_samp_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
aggregate variance on columns
"""
type member_epoch_pgives_variance_fields {
  circle_id: Float
  epoch_id: Float
  gives_received: Float
  id: Float
  normalized_pgive: Float
  opt_out_bonus: Float
  organization_id: Float
  pgive: Float
  user_id: Float
}

"""
order by variance() on columns of table "member_epoch_pgives"
"""
input member_epoch_pgives_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  gives_received: order_by
  id: order_by
  normalized_pgive: order_by
  opt_out_bonus: order_by
  organization_id: order_by
  pgive: order_by
  user_id: order_by
}

"""
mutation root
"""
type mutation_root {
  """
  Accept Terms of Service action
  """
  acceptTOS: AcceptTOSOutput

  """
  adds a new (unverified) email address to a users profile
  """
  addEmail(payload: AddEmailInput!): ConfirmationResponse

  """
  adds a farcaster account to a users profile
  """
  addFarcaster: ConfirmationWithErrorResponse
  adminUpdateUser(payload: AdminUpdateUserInput!): UserResponse
  allocationCsv(payload: AllocationCsvInput!): AllocationCsvResponse
  createCircle(payload: CreateCircleInput!): CreateCircleResponse
  createCoLinksGive(payload: CreateCoLinksGiveInput!): CreateCoLinksGiveResponse

  """
  create epoch using new, more flexible api
  """
  createEpoch(payload: CreateEpochInput!): EpochResponse
  createNominee(payload: CreateNomineeInput!): CreateNomineeResponse
  createOrgMembers(payload: CreateOrgMembersInput!): [OrgMemberResponse]
  createSampleCircle: CreateSampleCircleResponse
  createUserWithToken(payload: CreateUserWithTokenInput!): UserResponse
  createUsers(payload: CreateUsersInput!): [UserResponse]
  createVault(payload: CreateVaultInput!): VaultResponse

  """
  Log offchain information for vault transactions
  """
  createVaultTx(payload: LogVaultTxInput!): LogVaultTxResponse
  deleteCircle(payload: DeleteCircleInput!): ConfirmationResponse
  deleteCoLinksGive(payload: DeleteCoLinksGiveInput!): SuccessResponse
  deleteContribution(payload: DeleteContributionInput!): ConfirmationResponse

  """
  delete the specified email from the current users' profile
  """
  deleteEmail(payload: DeleteEmailInput!): ConfirmationResponse
  deleteEpoch(payload: DeleteEpochInput!): DeleteEpochResponse
  deleteOrgMember(payload: IdInput!): ConfirmationResponse
  deleteUser(payload: DeleteUserInput!): ConfirmationResponse
  deleteUsers(payload: DeleteUsersInput!): DeleteUsersResponse

  """
  delete data from the table: "circle_api_keys"
  """
  delete_circle_api_keys(
    """
    filter the rows which have to be deleted
    """
    where: circle_api_keys_bool_exp!
  ): circle_api_keys_mutation_response

  """
  delete single row from the table: "circle_api_keys"
  """
  delete_circle_api_keys_by_pk(hash: String!): circle_api_keys

  """
  delete data from the table: "circle_integrations"
  """
  delete_circle_integrations(
    """
    filter the rows which have to be deleted
    """
    where: circle_integrations_bool_exp!
  ): circle_integrations_mutation_response

  """
  delete single row from the table: "circle_integrations"
  """
  delete_circle_integrations_by_pk(id: bigint!): circle_integrations

  """
  delete data from the table: "circle_share_tokens"
  """
  delete_circle_share_tokens(
    """
    filter the rows which have to be deleted
    """
    where: circle_share_tokens_bool_exp!
  ): circle_share_tokens_mutation_response

  """
  delete single row from the table: "circle_share_tokens"
  """
  delete_circle_share_tokens_by_pk(
    circle_id: bigint!
    type: Int!
  ): circle_share_tokens

  """
  delete data from the table: "farcaster_accounts"
  """
  delete_farcaster_accounts(
    """
    filter the rows which have to be deleted
    """
    where: farcaster_accounts_bool_exp!
  ): farcaster_accounts_mutation_response

  """
  delete single row from the table: "farcaster_accounts"
  """
  delete_farcaster_accounts_by_pk(profile_id: bigint!): farcaster_accounts

  """
  delete data from the table: "github_accounts"
  """
  delete_github_accounts(
    """
    filter the rows which have to be deleted
    """
    where: github_accounts_bool_exp!
  ): github_accounts_mutation_response

  """
  delete single row from the table: "github_accounts"
  """
  delete_github_accounts_by_pk(profile_id: bigint!): github_accounts

  """
  delete data from the table: "linkedin_accounts"
  """
  delete_linkedin_accounts(
    """
    filter the rows which have to be deleted
    """
    where: linkedin_accounts_bool_exp!
  ): linkedin_accounts_mutation_response

  """
  delete single row from the table: "linkedin_accounts"
  """
  delete_linkedin_accounts_by_pk(profile_id: bigint!): linkedin_accounts

  """
  delete data from the table: "mutes"
  """
  delete_mutes(
    """
    filter the rows which have to be deleted
    """
    where: mutes_bool_exp!
  ): mutes_mutation_response

  """
  delete single row from the table: "mutes"
  """
  delete_mutes_by_pk(profile_id: bigint!, target_profile_id: bigint!): mutes

  """
  delete data from the table: "org_share_tokens"
  """
  delete_org_share_tokens(
    """
    filter the rows which have to be deleted
    """
    where: org_share_tokens_bool_exp!
  ): org_share_tokens_mutation_response

  """
  delete single row from the table: "org_share_tokens"
  """
  delete_org_share_tokens_by_pk(org_id: bigint!, type: Int!): org_share_tokens

  """
  delete data from the table: "pending_vault_transactions"
  """
  delete_pending_vault_transactions(
    """
    filter the rows which have to be deleted
    """
    where: pending_vault_transactions_bool_exp!
  ): pending_vault_transactions_mutation_response

  """
  delete single row from the table: "pending_vault_transactions"
  """
  delete_pending_vault_transactions_by_pk(
    tx_hash: String!
  ): pending_vault_transactions

  """
  delete data from the table: "profile_skills"
  """
  delete_profile_skills(
    """
    filter the rows which have to be deleted
    """
    where: profile_skills_bool_exp!
  ): profile_skills_mutation_response

  """
  delete single row from the table: "profile_skills"
  """
  delete_profile_skills_by_pk(
    profile_id: Int!
    skill_name: citext!
  ): profile_skills

  """
  delete data from the table: "reactions"
  """
  delete_reactions(
    """
    filter the rows which have to be deleted
    """
    where: reactions_bool_exp!
  ): reactions_mutation_response

  """
  delete single row from the table: "reactions"
  """
  delete_reactions_by_pk(id: bigint!): reactions

  """
  delete data from the table: "replies_reactions"
  """
  delete_replies_reactions(
    """
    filter the rows which have to be deleted
    """
    where: replies_reactions_bool_exp!
  ): replies_reactions_mutation_response

  """
  delete single row from the table: "replies_reactions"
  """
  delete_replies_reactions_by_pk(id: bigint!): replies_reactions

  """
  delete data from the table: "twitter_accounts"
  """
  delete_twitter_accounts(
    """
    filter the rows which have to be deleted
    """
    where: twitter_accounts_bool_exp!
  ): twitter_accounts_mutation_response

  """
  delete single row from the table: "twitter_accounts"
  """
  delete_twitter_accounts_by_pk(profile_id: Int!): twitter_accounts
  endEpoch(payload: EndEpochInput!): EpochResponse

  """
  Generates an API key for a circle
  """
  generateApiKey(payload: GenerateApiKeyInput!): GenerateApiKeyResponse
  generateOneTimeUpload: UploadUrlResponse

  """
  giveCsv
  """
  giveCsv(payload: GiveCsvInput!): GiveCsvResponse

  """
  insert data into the table: "circle_integrations"
  """
  insert_circle_integrations(
    """
    the rows to be inserted
    """
    objects: [circle_integrations_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circle_integrations_on_conflict
  ): circle_integrations_mutation_response

  """
  insert a single row into the table: "circle_integrations"
  """
  insert_circle_integrations_one(
    """
    the row to be inserted
    """
    object: circle_integrations_insert_input!

    """
    upsert condition
    """
    on_conflict: circle_integrations_on_conflict
  ): circle_integrations

  """
  insert data into the table: "circle_share_tokens"
  """
  insert_circle_share_tokens(
    """
    the rows to be inserted
    """
    objects: [circle_share_tokens_insert_input!]!

    """
    upsert condition
    """
    on_conflict: circle_share_tokens_on_conflict
  ): circle_share_tokens_mutation_response

  """
  insert a single row into the table: "circle_share_tokens"
  """
  insert_circle_share_tokens_one(
    """
    the row to be inserted
    """
    object: circle_share_tokens_insert_input!

    """
    upsert condition
    """
    on_conflict: circle_share_tokens_on_conflict
  ): circle_share_tokens

  """
  insert data into the table: "claims"
  """
  insert_claims(
    """
    the rows to be inserted
    """
    objects: [claims_insert_input!]!

    """
    upsert condition
    """
    on_conflict: claims_on_conflict
  ): claims_mutation_response

  """
  insert a single row into the table: "claims"
  """
  insert_claims_one(
    """
    the row to be inserted
    """
    object: claims_insert_input!

    """
    upsert condition
    """
    on_conflict: claims_on_conflict
  ): claims

  """
  insert data into the table: "contributions"
  """
  insert_contributions(
    """
    the rows to be inserted
    """
    objects: [contributions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: contributions_on_conflict
  ): contributions_mutation_response

  """
  insert a single row into the table: "contributions"
  """
  insert_contributions_one(
    """
    the row to be inserted
    """
    object: contributions_insert_input!

    """
    upsert condition
    """
    on_conflict: contributions_on_conflict
  ): contributions

  """
  insert data into the table: "distributions"
  """
  insert_distributions(
    """
    the rows to be inserted
    """
    objects: [distributions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: distributions_on_conflict
  ): distributions_mutation_response

  """
  insert a single row into the table: "distributions"
  """
  insert_distributions_one(
    """
    the row to be inserted
    """
    object: distributions_insert_input!

    """
    upsert condition
    """
    on_conflict: distributions_on_conflict
  ): distributions

  """
  insert data into the table: "locked_token_distribution_gifts"
  """
  insert_locked_token_distribution_gifts(
    """
    the rows to be inserted
    """
    objects: [locked_token_distribution_gifts_insert_input!]!

    """
    upsert condition
    """
    on_conflict: locked_token_distribution_gifts_on_conflict
  ): locked_token_distribution_gifts_mutation_response

  """
  insert a single row into the table: "locked_token_distribution_gifts"
  """
  insert_locked_token_distribution_gifts_one(
    """
    the row to be inserted
    """
    object: locked_token_distribution_gifts_insert_input!

    """
    upsert condition
    """
    on_conflict: locked_token_distribution_gifts_on_conflict
  ): locked_token_distribution_gifts

  """
  insert data into the table: "locked_token_distributions"
  """
  insert_locked_token_distributions(
    """
    the rows to be inserted
    """
    objects: [locked_token_distributions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: locked_token_distributions_on_conflict
  ): locked_token_distributions_mutation_response

  """
  insert a single row into the table: "locked_token_distributions"
  """
  insert_locked_token_distributions_one(
    """
    the row to be inserted
    """
    object: locked_token_distributions_insert_input!

    """
    upsert condition
    """
    on_conflict: locked_token_distributions_on_conflict
  ): locked_token_distributions

  """
  insert data into the table: "mutes"
  """
  insert_mutes(
    """
    the rows to be inserted
    """
    objects: [mutes_insert_input!]!

    """
    upsert condition
    """
    on_conflict: mutes_on_conflict
  ): mutes_mutation_response

  """
  insert a single row into the table: "mutes"
  """
  insert_mutes_one(
    """
    the row to be inserted
    """
    object: mutes_insert_input!

    """
    upsert condition
    """
    on_conflict: mutes_on_conflict
  ): mutes

  """
  insert data into the table: "org_share_tokens"
  """
  insert_org_share_tokens(
    """
    the rows to be inserted
    """
    objects: [org_share_tokens_insert_input!]!

    """
    upsert condition
    """
    on_conflict: org_share_tokens_on_conflict
  ): org_share_tokens_mutation_response

  """
  insert a single row into the table: "org_share_tokens"
  """
  insert_org_share_tokens_one(
    """
    the row to be inserted
    """
    object: org_share_tokens_insert_input!

    """
    upsert condition
    """
    on_conflict: org_share_tokens_on_conflict
  ): org_share_tokens

  """
  insert data into the table: "pending_vault_transactions"
  """
  insert_pending_vault_transactions(
    """
    the rows to be inserted
    """
    objects: [pending_vault_transactions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: pending_vault_transactions_on_conflict
  ): pending_vault_transactions_mutation_response

  """
  insert a single row into the table: "pending_vault_transactions"
  """
  insert_pending_vault_transactions_one(
    """
    the row to be inserted
    """
    object: pending_vault_transactions_insert_input!

    """
    upsert condition
    """
    on_conflict: pending_vault_transactions_on_conflict
  ): pending_vault_transactions

  """
  insert data into the table: "profile_skills"
  """
  insert_profile_skills(
    """
    the rows to be inserted
    """
    objects: [profile_skills_insert_input!]!

    """
    upsert condition
    """
    on_conflict: profile_skills_on_conflict
  ): profile_skills_mutation_response

  """
  insert a single row into the table: "profile_skills"
  """
  insert_profile_skills_one(
    """
    the row to be inserted
    """
    object: profile_skills_insert_input!

    """
    upsert condition
    """
    on_conflict: profile_skills_on_conflict
  ): profile_skills

  """
  insert data into the table: "reactions"
  """
  insert_reactions(
    """
    the rows to be inserted
    """
    objects: [reactions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: reactions_on_conflict
  ): reactions_mutation_response

  """
  insert a single row into the table: "reactions"
  """
  insert_reactions_one(
    """
    the row to be inserted
    """
    object: reactions_insert_input!

    """
    upsert condition
    """
    on_conflict: reactions_on_conflict
  ): reactions

  """
  insert data into the table: "replies"
  """
  insert_replies(
    """
    the rows to be inserted
    """
    objects: [replies_insert_input!]!

    """
    upsert condition
    """
    on_conflict: replies_on_conflict
  ): replies_mutation_response

  """
  insert a single row into the table: "replies"
  """
  insert_replies_one(
    """
    the row to be inserted
    """
    object: replies_insert_input!

    """
    upsert condition
    """
    on_conflict: replies_on_conflict
  ): replies

  """
  insert data into the table: "replies_reactions"
  """
  insert_replies_reactions(
    """
    the rows to be inserted
    """
    objects: [replies_reactions_insert_input!]!

    """
    upsert condition
    """
    on_conflict: replies_reactions_on_conflict
  ): replies_reactions_mutation_response

  """
  insert a single row into the table: "replies_reactions"
  """
  insert_replies_reactions_one(
    """
    the row to be inserted
    """
    object: replies_reactions_insert_input!

    """
    upsert condition
    """
    on_conflict: replies_reactions_on_conflict
  ): replies_reactions

  """
  insert data into the table: "skills"
  """
  insert_skills(
    """
    the rows to be inserted
    """
    objects: [skills_insert_input!]!

    """
    upsert condition
    """
    on_conflict: skills_on_conflict
  ): skills_mutation_response

  """
  insert a single row into the table: "skills"
  """
  insert_skills_one(
    """
    the row to be inserted
    """
    object: skills_insert_input!

    """
    upsert condition
    """
    on_conflict: skills_on_conflict
  ): skills
  logoutUser: LogoutResponse
  markClaimed(payload: MarkClaimedInput!): MarkClaimedOutput
  redeemInviteCode(
    payload: RedeemInviteCodeInput!
  ): ConfirmationWithErrorResponse!
  requestInviteCode(
    payload: RequestInviteCodeInput!
  ): ConfirmationWithErrorResponse!
  restoreCoordinape(payload: CoordinapeInput!): ConfirmationResponse

  """
  sets a given email as the primary email for user
  """
  setPrimaryEmail(payload: SetPrimaryEmailInput!): ConfirmationResponse

  """
  Generate share link for Colinks activity/post
  """
  share(payload: ShareInput!): ShareOutput
  syncCoSoul(payload: SyncCoSoulInput!): SyncCoSoulOutput

  """
  syncLinks
  """
  syncLinks: ConfirmationResponse
  updateAllocations(payload: Allocations!): AllocationsResponse
  updateCircle(payload: UpdateCircleInput!): UpdateCircleOutput

  """
  Update starting GIVE for all circle members
  """
  updateCircleStartingGive(
    payload: UpdateCircleStartingGiveInput!
  ): ConfirmationResponse

  """
  users can modify contributions and update their dates.
  """
  updateContribution(
    payload: UpdateContributionInput!
  ): UpdateContributionResponse
  updateEpoch(payload: UpdateEpochInput!): EpochResponse
  updateProfile(payload: UpdateProfileInput!): UpdateProfileResponse

  """
  updateRepScore
  """
  updateRepScore: ConfirmationResponse
  updateTeammates(payload: UpdateTeammatesInput!): UpdateTeammatesResponse

  """
  Update own user
  """
  updateUser(payload: UpdateUserInput!): UserResponse

  """
  update data of the table: "circle_integrations"
  """
  update_circle_integrations(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_integrations_set_input

    """
    filter the rows which have to be updated
    """
    where: circle_integrations_bool_exp!
  ): circle_integrations_mutation_response

  """
  update single row of the table: "circle_integrations"
  """
  update_circle_integrations_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: circle_integrations_set_input
    pk_columns: circle_integrations_pk_columns_input!
  ): circle_integrations

  """
  update multiples rows of table: "circle_integrations"
  """
  update_circle_integrations_many(
    """
    updates to execute, in order
    """
    updates: [circle_integrations_updates!]!
  ): [circle_integrations_mutation_response]

  """
  update data of the table: "claims"
  """
  update_claims(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: claims_set_input

    """
    filter the rows which have to be updated
    """
    where: claims_bool_exp!
  ): claims_mutation_response

  """
  update single row of the table: "claims"
  """
  update_claims_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: claims_set_input
    pk_columns: claims_pk_columns_input!
  ): claims

  """
  update multiples rows of table: "claims"
  """
  update_claims_many(
    """
    updates to execute, in order
    """
    updates: [claims_updates!]!
  ): [claims_mutation_response]

  """
  update data of the table: "colinks_gives"
  """
  update_colinks_gives(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: colinks_gives_set_input

    """
    filter the rows which have to be updated
    """
    where: colinks_gives_bool_exp!
  ): colinks_gives_mutation_response

  """
  update single row of the table: "colinks_gives"
  """
  update_colinks_gives_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: colinks_gives_set_input
    pk_columns: colinks_gives_pk_columns_input!
  ): colinks_gives

  """
  update multiples rows of table: "colinks_gives"
  """
  update_colinks_gives_many(
    """
    updates to execute, in order
    """
    updates: [colinks_gives_updates!]!
  ): [colinks_gives_mutation_response]

  """
  update data of the table: "distributions"
  """
  update_distributions(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: distributions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: distributions_set_input

    """
    filter the rows which have to be updated
    """
    where: distributions_bool_exp!
  ): distributions_mutation_response

  """
  update single row of the table: "distributions"
  """
  update_distributions_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: distributions_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: distributions_set_input
    pk_columns: distributions_pk_columns_input!
  ): distributions

  """
  update multiples rows of table: "distributions"
  """
  update_distributions_many(
    """
    updates to execute, in order
    """
    updates: [distributions_updates!]!
  ): [distributions_mutation_response]

  """
  update data of the table: "epoches"
  """
  update_epochs(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: epochs_set_input

    """
    filter the rows which have to be updated
    """
    where: epochs_bool_exp!
  ): epochs_mutation_response

  """
  update single row of the table: "epoches"
  """
  update_epochs_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: epochs_set_input
    pk_columns: epochs_pk_columns_input!
  ): epochs

  """
  update multiples rows of table: "epoches"
  """
  update_epochs_many(
    """
    updates to execute, in order
    """
    updates: [epochs_updates!]!
  ): [epochs_mutation_response]

  """
  update data of the table: "locked_token_distributions"
  """
  update_locked_token_distributions(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: locked_token_distributions_set_input

    """
    filter the rows which have to be updated
    """
    where: locked_token_distributions_bool_exp!
  ): locked_token_distributions_mutation_response

  """
  update single row of the table: "locked_token_distributions"
  """
  update_locked_token_distributions_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: locked_token_distributions_set_input
    pk_columns: locked_token_distributions_pk_columns_input!
  ): locked_token_distributions

  """
  update multiples rows of table: "locked_token_distributions"
  """
  update_locked_token_distributions_many(
    """
    updates to execute, in order
    """
    updates: [locked_token_distributions_updates!]!
  ): [locked_token_distributions_mutation_response]

  """
  update data of the table: "org_members"
  """
  update_org_members(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: org_members_set_input

    """
    filter the rows which have to be updated
    """
    where: org_members_bool_exp!
  ): org_members_mutation_response

  """
  update single row of the table: "org_members"
  """
  update_org_members_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: org_members_set_input
    pk_columns: org_members_pk_columns_input!
  ): org_members

  """
  update multiples rows of table: "org_members"
  """
  update_org_members_many(
    """
    updates to execute, in order
    """
    updates: [org_members_updates!]!
  ): [org_members_mutation_response]

  """
  update data of the table: "organizations"
  """
  update_organizations(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: organizations_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: organizations_set_input

    """
    filter the rows which have to be updated
    """
    where: organizations_bool_exp!
  ): organizations_mutation_response

  """
  update single row of the table: "organizations"
  """
  update_organizations_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: organizations_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: organizations_set_input
    pk_columns: organizations_pk_columns_input!
  ): organizations

  """
  update multiples rows of table: "organizations"
  """
  update_organizations_many(
    """
    updates to execute, in order
    """
    updates: [organizations_updates!]!
  ): [organizations_mutation_response]

  """
  update data of the table: "profiles"
  """
  update_profiles(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: profiles_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: profiles_set_input

    """
    filter the rows which have to be updated
    """
    where: profiles_bool_exp!
  ): profiles_mutation_response

  """
  update single row of the table: "profiles"
  """
  update_profiles_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: profiles_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: profiles_set_input
    pk_columns: profiles_pk_columns_input!
  ): profiles

  """
  update multiples rows of table: "profiles"
  """
  update_profiles_many(
    """
    updates to execute, in order
    """
    updates: [profiles_updates!]!
  ): [profiles_mutation_response]

  """
  update data of the table: "profiles_private"
  """
  update_profiles_private(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: profiles_private_set_input

    """
    filter the rows which have to be updated
    """
    where: profiles_private_bool_exp!
  ): profiles_private_mutation_response

  """
  update multiples rows of table: "profiles_private"
  """
  update_profiles_private_many(
    """
    updates to execute, in order
    """
    updates: [profiles_private_updates!]!
  ): [profiles_private_mutation_response]

  """
  update data of the table: "replies"
  """
  update_replies(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: replies_set_input

    """
    filter the rows which have to be updated
    """
    where: replies_bool_exp!
  ): replies_mutation_response

  """
  update single row of the table: "replies"
  """
  update_replies_by_pk(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: replies_set_input
    pk_columns: replies_pk_columns_input!
  ): replies

  """
  update multiples rows of table: "replies"
  """
  update_replies_many(
    """
    updates to execute, in order
    """
    updates: [replies_updates!]!
  ): [replies_mutation_response]
  uploadCircleLogo(payload: UploadCircleImageInput!): UpdateCircleResponse
  uploadOrgLogo(payload: UploadOrgImageInput!): UpdateOrgResponse
  uploadProfileAvatar(payload: UploadImageInput!): UpdateProfileResponse
  uploadProfileBackground(payload: UploadImageInput!): UpdateProfileResponse
  vouch(payload: VouchInput!): VouchOutput
}

"""
Table of one profile muting another profile
"""
type mutes {
  created_at: timestamptz!

  """
  An object relationship
  """
  profile: profiles_public
  profile_id: bigint!

  """
  An object relationship
  """
  target_profile: profiles_public
  target_profile_id: bigint!
}

"""
order by aggregate values of table "mutes"
"""
input mutes_aggregate_order_by {
  avg: mutes_avg_order_by
  count: order_by
  max: mutes_max_order_by
  min: mutes_min_order_by
  stddev: mutes_stddev_order_by
  stddev_pop: mutes_stddev_pop_order_by
  stddev_samp: mutes_stddev_samp_order_by
  sum: mutes_sum_order_by
  var_pop: mutes_var_pop_order_by
  var_samp: mutes_var_samp_order_by
  variance: mutes_variance_order_by
}

"""
order by avg() on columns of table "mutes"
"""
input mutes_avg_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
Boolean expression to filter rows from the table "mutes". All fields are combined with a logical 'AND'.
"""
input mutes_bool_exp {
  _and: [mutes_bool_exp!]
  _not: mutes_bool_exp
  _or: [mutes_bool_exp!]
  created_at: timestamptz_comparison_exp
  profile: profiles_public_bool_exp
  profile_id: bigint_comparison_exp
  target_profile: profiles_public_bool_exp
  target_profile_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "mutes"
"""
enum mutes_constraint {
  """
  unique or primary key constraint on columns "profile_id", "target_profile_id"
  """
  mutes_pkey
}

"""
input type for inserting data into table "mutes"
"""
input mutes_insert_input {
  profile_id: bigint
  target_profile_id: bigint
}

"""
order by max() on columns of table "mutes"
"""
input mutes_max_order_by {
  created_at: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
order by min() on columns of table "mutes"
"""
input mutes_min_order_by {
  created_at: order_by
  profile_id: order_by
  target_profile_id: order_by
}

"""
response of any mutation on the table "mutes"
"""
type mutes_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [mutes!]!
}

"""
on_conflict condition type for table "mutes"
"""
input mutes_on_conflict {
  constraint: mutes_constraint!
  update_columns: [mutes_update_column!]! = []
  where: mutes_bool_exp
}

"""
Ordering options when selecting data from "mutes".
"""
input mutes_order_by {
  created_at: order_by
  profile: profiles_public_order_by
  profile_id: order_by
  target_profile: profiles_public_order_by
  target_profile_id: order_by
}

"""
select columns of table "mutes"
"""
enum mutes_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  profile_id

  """
  column name
  """
  target_profile_id
}

"""
order by stddev() on columns of table "mutes"
"""
input mutes_stddev_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
order by stddev_pop() on columns of table "mutes"
"""
input mutes_stddev_pop_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
order by stddev_samp() on columns of table "mutes"
"""
input mutes_stddev_samp_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
Streaming cursor of the table "mutes"
"""
input mutes_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: mutes_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input mutes_stream_cursor_value_input {
  created_at: timestamptz
  profile_id: bigint
  target_profile_id: bigint
}

"""
order by sum() on columns of table "mutes"
"""
input mutes_sum_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
placeholder for update columns of table "mutes" (current role has no relevant permissions)
"""
enum mutes_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
order by var_pop() on columns of table "mutes"
"""
input mutes_var_pop_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
order by var_samp() on columns of table "mutes"
"""
input mutes_var_samp_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
order by variance() on columns of table "mutes"
"""
input mutes_variance_order_by {
  profile_id: order_by
  target_profile_id: order_by
}

"""
columns and relationships of "nft_collections"
"""
type nft_collections {
  address: citext!
  banner_image_url: String
  external_url: String
  name: String!
  slug: String
}

"""
Boolean expression to filter rows from the table "nft_collections". All fields are combined with a logical 'AND'.
"""
input nft_collections_bool_exp {
  _and: [nft_collections_bool_exp!]
  _not: nft_collections_bool_exp
  _or: [nft_collections_bool_exp!]
  address: citext_comparison_exp
  banner_image_url: String_comparison_exp
  external_url: String_comparison_exp
  name: String_comparison_exp
  slug: String_comparison_exp
}

"""
Ordering options when selecting data from "nft_collections".
"""
input nft_collections_order_by {
  address: order_by
  banner_image_url: order_by
  external_url: order_by
  name: order_by
  slug: order_by
}

"""
select columns of table "nft_collections"
"""
enum nft_collections_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  banner_image_url

  """
  column name
  """
  external_url

  """
  column name
  """
  name

  """
  column name
  """
  slug
}

"""
Streaming cursor of the table "nft_collections"
"""
input nft_collections_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: nft_collections_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input nft_collections_stream_cursor_value_input {
  address: citext
  banner_image_url: String
  external_url: String
  name: String
  slug: String
}

"""
columns and relationships of "nft_holdings"
"""
type nft_holdings {
  address: citext!

  """
  An object relationship
  """
  collection: nft_collections!
  contract: citext!
  image_url: String
  name: String

  """
  An object relationship
  """
  profile: profiles_public
  token_id: String!
}

"""
Boolean expression to filter rows from the table "nft_holdings". All fields are combined with a logical 'AND'.
"""
input nft_holdings_bool_exp {
  _and: [nft_holdings_bool_exp!]
  _not: nft_holdings_bool_exp
  _or: [nft_holdings_bool_exp!]
  address: citext_comparison_exp
  collection: nft_collections_bool_exp
  contract: citext_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
  profile: profiles_public_bool_exp
  token_id: String_comparison_exp
}

"""
Ordering options when selecting data from "nft_holdings".
"""
input nft_holdings_order_by {
  address: order_by
  collection: nft_collections_order_by
  contract: order_by
  image_url: order_by
  name: order_by
  profile: profiles_public_order_by
  token_id: order_by
}

"""
select columns of table "nft_holdings"
"""
enum nft_holdings_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  contract

  """
  column name
  """
  image_url

  """
  column name
  """
  name

  """
  column name
  """
  token_id
}

"""
Streaming cursor of the table "nft_holdings"
"""
input nft_holdings_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: nft_holdings_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input nft_holdings_stream_cursor_value_input {
  address: citext
  contract: citext
  image_url: String
  name: String
  token_id: String
}

"""
columns and relationships of "nominees"
"""
type nominees {
  address: String!

  """
  An object relationship
  """
  circle: circles
  circle_id: Int!
  created_at: timestamp!
  description: String!
  ended: Boolean!
  expiry_date: timestamp!
  id: bigint!
  nominated_by_user_id: Int!
  nominated_date: date!

  """
  An array relationship
  """
  nominations(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  An object relationship
  """
  nominator: users

  """
  An object relationship
  """
  profile: profiles
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int
  vouches_required: Int!
}

"""
aggregated selection of "nominees"
"""
type nominees_aggregate {
  aggregate: nominees_aggregate_fields
  nodes: [nominees!]!
}

input nominees_aggregate_bool_exp {
  bool_and: nominees_aggregate_bool_exp_bool_and
  bool_or: nominees_aggregate_bool_exp_bool_or
  count: nominees_aggregate_bool_exp_count
}

input nominees_aggregate_bool_exp_bool_and {
  arguments: nominees_select_column_nominees_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: nominees_bool_exp
  predicate: Boolean_comparison_exp!
}

input nominees_aggregate_bool_exp_bool_or {
  arguments: nominees_select_column_nominees_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: nominees_bool_exp
  predicate: Boolean_comparison_exp!
}

input nominees_aggregate_bool_exp_count {
  arguments: [nominees_select_column!]
  distinct: Boolean
  filter: nominees_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "nominees"
"""
type nominees_aggregate_fields {
  avg: nominees_avg_fields
  count(columns: [nominees_select_column!], distinct: Boolean): Int!
  max: nominees_max_fields
  min: nominees_min_fields
  stddev: nominees_stddev_fields
  stddev_pop: nominees_stddev_pop_fields
  stddev_samp: nominees_stddev_samp_fields
  sum: nominees_sum_fields
  var_pop: nominees_var_pop_fields
  var_samp: nominees_var_samp_fields
  variance: nominees_variance_fields
}

"""
order by aggregate values of table "nominees"
"""
input nominees_aggregate_order_by {
  avg: nominees_avg_order_by
  count: order_by
  max: nominees_max_order_by
  min: nominees_min_order_by
  stddev: nominees_stddev_order_by
  stddev_pop: nominees_stddev_pop_order_by
  stddev_samp: nominees_stddev_samp_order_by
  sum: nominees_sum_order_by
  var_pop: nominees_var_pop_order_by
  var_samp: nominees_var_samp_order_by
  variance: nominees_variance_order_by
}

"""
aggregate avg on columns
"""
type nominees_avg_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by avg() on columns of table "nominees"
"""
input nominees_avg_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
Boolean expression to filter rows from the table "nominees". All fields are combined with a logical 'AND'.
"""
input nominees_bool_exp {
  _and: [nominees_bool_exp!]
  _not: nominees_bool_exp
  _or: [nominees_bool_exp!]
  address: String_comparison_exp
  circle: circles_bool_exp
  circle_id: Int_comparison_exp
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  ended: Boolean_comparison_exp
  expiry_date: timestamp_comparison_exp
  id: bigint_comparison_exp
  nominated_by_user_id: Int_comparison_exp
  nominated_date: date_comparison_exp
  nominations: vouches_bool_exp
  nominator: users_bool_exp
  profile: profiles_bool_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
  vouches_required: Int_comparison_exp
}

"""
aggregate max on columns
"""
type nominees_max_fields {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  expiry_date: timestamp
  id: bigint
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
order by max() on columns of table "nominees"
"""
input nominees_max_order_by {
  address: order_by
  circle_id: order_by
  created_at: order_by
  description: order_by
  expiry_date: order_by
  id: order_by
  nominated_by_user_id: order_by
  nominated_date: order_by
  updated_at: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate min on columns
"""
type nominees_min_fields {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  expiry_date: timestamp
  id: bigint
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
order by min() on columns of table "nominees"
"""
input nominees_min_order_by {
  address: order_by
  circle_id: order_by
  created_at: order_by
  description: order_by
  expiry_date: order_by
  id: order_by
  nominated_by_user_id: order_by
  nominated_date: order_by
  updated_at: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
Ordering options when selecting data from "nominees".
"""
input nominees_order_by {
  address: order_by
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  description: order_by
  ended: order_by
  expiry_date: order_by
  id: order_by
  nominated_by_user_id: order_by
  nominated_date: order_by
  nominations_aggregate: vouches_aggregate_order_by
  nominator: users_order_by
  profile: profiles_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
  vouches_required: order_by
}

"""
select columns of table "nominees"
"""
enum nominees_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  ended

  """
  column name
  """
  expiry_date

  """
  column name
  """
  id

  """
  column name
  """
  nominated_by_user_id

  """
  column name
  """
  nominated_date

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id

  """
  column name
  """
  vouches_required
}

"""
select "nominees_aggregate_bool_exp_bool_and_arguments_columns" columns of table "nominees"
"""
enum nominees_select_column_nominees_aggregate_bool_exp_bool_and_arguments_columns {
  """
  column name
  """
  ended
}

"""
select "nominees_aggregate_bool_exp_bool_or_arguments_columns" columns of table "nominees"
"""
enum nominees_select_column_nominees_aggregate_bool_exp_bool_or_arguments_columns {
  """
  column name
  """
  ended
}

"""
aggregate stddev on columns
"""
type nominees_stddev_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by stddev() on columns of table "nominees"
"""
input nominees_stddev_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate stddev_pop on columns
"""
type nominees_stddev_pop_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by stddev_pop() on columns of table "nominees"
"""
input nominees_stddev_pop_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate stddev_samp on columns
"""
type nominees_stddev_samp_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by stddev_samp() on columns of table "nominees"
"""
input nominees_stddev_samp_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
Streaming cursor of the table "nominees"
"""
input nominees_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: nominees_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input nominees_stream_cursor_value_input {
  address: String
  circle_id: Int
  created_at: timestamp
  description: String
  ended: Boolean
  expiry_date: timestamp
  id: bigint
  nominated_by_user_id: Int
  nominated_date: date
  updated_at: timestamp
  user_id: Int
  vouches_required: Int
}

"""
aggregate sum on columns
"""
type nominees_sum_fields {
  circle_id: Int
  id: bigint
  nominated_by_user_id: Int
  user_id: Int
  vouches_required: Int
}

"""
order by sum() on columns of table "nominees"
"""
input nominees_sum_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate var_pop on columns
"""
type nominees_var_pop_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by var_pop() on columns of table "nominees"
"""
input nominees_var_pop_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate var_samp on columns
"""
type nominees_var_samp_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by var_samp() on columns of table "nominees"
"""
input nominees_var_samp_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
aggregate variance on columns
"""
type nominees_variance_fields {
  circle_id: Float
  id: Float
  nominated_by_user_id: Float
  user_id: Float
  vouches_required: Float
}

"""
order by variance() on columns of table "nominees"
"""
input nominees_variance_order_by {
  circle_id: order_by
  id: order_by
  nominated_by_user_id: order_by
  user_id: order_by
  vouches_required: order_by
}

"""
columns and relationships of "note_count"
"""
type note_count {
  notes: bigint
  profile_id: bigint
}

"""
Boolean expression to filter rows from the table "note_count". All fields are combined with a logical 'AND'.
"""
input note_count_bool_exp {
  _and: [note_count_bool_exp!]
  _not: note_count_bool_exp
  _or: [note_count_bool_exp!]
  notes: bigint_comparison_exp
  profile_id: bigint_comparison_exp
}

"""
Ordering options when selecting data from "note_count".
"""
input note_count_order_by {
  notes: order_by
  profile_id: order_by
}

"""
select columns of table "note_count"
"""
enum note_count_select_column {
  """
  column name
  """
  notes

  """
  column name
  """
  profile_id
}

"""
Streaming cursor of the table "note_count"
"""
input note_count_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: note_count_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input note_count_stream_cursor_value_input {
  notes: bigint
  profile_id: bigint
}

"""
columns and relationships of "notifications"
"""
type notifications {
  """
  An object relationship
  """
  actor_profile_public: profiles_public
  created_at: timestamptz!

  """
  An object relationship
  """
  give: colinks_gives
  id: Int!
  invite_joined_id: bigint

  """
  An object relationship
  """
  invited_profile_public: profiles_public

  """
  An object relationship
  """
  link_tx: link_tx
  link_tx_hash: citext

  """
  An object relationship
  """
  mention_post: contributions
  mention_post_id: Int

  """
  An object relationship
  """
  mention_reply: replies
  mention_reply_id: Int

  """
  An object relationship
  """
  profile: profiles!
  profile_id: bigint!

  """
  An object relationship
  """
  reaction: reactions
  reaction_id: bigint

  """
  An object relationship
  """
  reply: replies
  reply_id: Int

  """
  An object relationship
  """
  reply_reaction: replies_reactions
  reply_reaction_id: bigint
}

"""
aggregated selection of "notifications"
"""
type notifications_aggregate {
  aggregate: notifications_aggregate_fields
  nodes: [notifications!]!
}

"""
aggregate fields of "notifications"
"""
type notifications_aggregate_fields {
  avg: notifications_avg_fields
  count(columns: [notifications_select_column!], distinct: Boolean): Int!
  max: notifications_max_fields
  min: notifications_min_fields
  stddev: notifications_stddev_fields
  stddev_pop: notifications_stddev_pop_fields
  stddev_samp: notifications_stddev_samp_fields
  sum: notifications_sum_fields
  var_pop: notifications_var_pop_fields
  var_samp: notifications_var_samp_fields
  variance: notifications_variance_fields
}

"""
aggregate avg on columns
"""
type notifications_avg_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

"""
Boolean expression to filter rows from the table "notifications". All fields are combined with a logical 'AND'.
"""
input notifications_bool_exp {
  _and: [notifications_bool_exp!]
  _not: notifications_bool_exp
  _or: [notifications_bool_exp!]
  actor_profile_public: profiles_public_bool_exp
  created_at: timestamptz_comparison_exp
  give: colinks_gives_bool_exp
  id: Int_comparison_exp
  invite_joined_id: bigint_comparison_exp
  invited_profile_public: profiles_public_bool_exp
  link_tx: link_tx_bool_exp
  link_tx_hash: citext_comparison_exp
  mention_post: contributions_bool_exp
  mention_post_id: Int_comparison_exp
  mention_reply: replies_bool_exp
  mention_reply_id: Int_comparison_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  reaction: reactions_bool_exp
  reaction_id: bigint_comparison_exp
  reply: replies_bool_exp
  reply_id: Int_comparison_exp
  reply_reaction: replies_reactions_bool_exp
  reply_reaction_id: bigint_comparison_exp
}

"""
aggregate max on columns
"""
type notifications_max_fields {
  created_at: timestamptz
  id: Int
  invite_joined_id: bigint
  link_tx_hash: citext
  mention_post_id: Int
  mention_reply_id: Int
  profile_id: bigint
  reaction_id: bigint
  reply_id: Int
  reply_reaction_id: bigint
}

"""
aggregate min on columns
"""
type notifications_min_fields {
  created_at: timestamptz
  id: Int
  invite_joined_id: bigint
  link_tx_hash: citext
  mention_post_id: Int
  mention_reply_id: Int
  profile_id: bigint
  reaction_id: bigint
  reply_id: Int
  reply_reaction_id: bigint
}

"""
Ordering options when selecting data from "notifications".
"""
input notifications_order_by {
  actor_profile_public: profiles_public_order_by
  created_at: order_by
  give: colinks_gives_order_by
  id: order_by
  invite_joined_id: order_by
  invited_profile_public: profiles_public_order_by
  link_tx: link_tx_order_by
  link_tx_hash: order_by
  mention_post: contributions_order_by
  mention_post_id: order_by
  mention_reply: replies_order_by
  mention_reply_id: order_by
  profile: profiles_order_by
  profile_id: order_by
  reaction: reactions_order_by
  reaction_id: order_by
  reply: replies_order_by
  reply_id: order_by
  reply_reaction: replies_reactions_order_by
  reply_reaction_id: order_by
}

"""
select columns of table "notifications"
"""
enum notifications_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  invite_joined_id

  """
  column name
  """
  link_tx_hash

  """
  column name
  """
  mention_post_id

  """
  column name
  """
  mention_reply_id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reaction_id

  """
  column name
  """
  reply_id

  """
  column name
  """
  reply_reaction_id
}

"""
aggregate stddev on columns
"""
type notifications_stddev_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

"""
aggregate stddev_pop on columns
"""
type notifications_stddev_pop_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

"""
aggregate stddev_samp on columns
"""
type notifications_stddev_samp_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

"""
Streaming cursor of the table "notifications"
"""
input notifications_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: notifications_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input notifications_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  invite_joined_id: bigint
  link_tx_hash: citext
  mention_post_id: Int
  mention_reply_id: Int
  profile_id: bigint
  reaction_id: bigint
  reply_id: Int
  reply_reaction_id: bigint
}

"""
aggregate sum on columns
"""
type notifications_sum_fields {
  id: Int
  invite_joined_id: bigint
  mention_post_id: Int
  mention_reply_id: Int
  profile_id: bigint
  reaction_id: bigint
  reply_id: Int
  reply_reaction_id: bigint
}

"""
aggregate var_pop on columns
"""
type notifications_var_pop_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

"""
aggregate var_samp on columns
"""
type notifications_var_samp_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

"""
aggregate variance on columns
"""
type notifications_variance_fields {
  id: Float
  invite_joined_id: Float
  mention_post_id: Float
  mention_reply_id: Float
  profile_id: Float
  reaction_id: Float
  reply_id: Float
  reply_reaction_id: Float
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "org_members"
"""
type org_members {
  created_at: timestamp!
  deleted_at: timestamp
  hidden: Boolean!
  id: bigint!
  org_id: bigint!

  """
  An object relationship
  """
  organization: organizations!

  """
  An object relationship
  """
  profile: profiles!
  profile_id: bigint!
  role: Int!
  updated_at: timestamp
}

"""
order by aggregate values of table "org_members"
"""
input org_members_aggregate_order_by {
  avg: org_members_avg_order_by
  count: order_by
  max: org_members_max_order_by
  min: org_members_min_order_by
  stddev: org_members_stddev_order_by
  stddev_pop: org_members_stddev_pop_order_by
  stddev_samp: org_members_stddev_samp_order_by
  sum: org_members_sum_order_by
  var_pop: org_members_var_pop_order_by
  var_samp: org_members_var_samp_order_by
  variance: org_members_variance_order_by
}

"""
order by avg() on columns of table "org_members"
"""
input org_members_avg_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
Boolean expression to filter rows from the table "org_members". All fields are combined with a logical 'AND'.
"""
input org_members_bool_exp {
  _and: [org_members_bool_exp!]
  _not: org_members_bool_exp
  _or: [org_members_bool_exp!]
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  hidden: Boolean_comparison_exp
  id: bigint_comparison_exp
  org_id: bigint_comparison_exp
  organization: organizations_bool_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  role: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "org_members"
"""
input org_members_max_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "org_members"
"""
input org_members_min_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "org_members"
"""
type org_members_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [org_members!]!
}

"""
Ordering options when selecting data from "org_members".
"""
input org_members_order_by {
  created_at: order_by
  deleted_at: order_by
  hidden: order_by
  id: order_by
  org_id: order_by
  organization: organizations_order_by
  profile: profiles_order_by
  profile_id: order_by
  role: order_by
  updated_at: order_by
}

"""
primary key columns input for table: org_members
"""
input org_members_pk_columns_input {
  id: bigint!
}

"""
select columns of table "org_members"
"""
enum org_members_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  hidden

  """
  column name
  """
  id

  """
  column name
  """
  org_id

  """
  column name
  """
  profile_id

  """
  column name
  """
  role

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "org_members"
"""
input org_members_set_input {
  hidden: Boolean
}

"""
order by stddev() on columns of table "org_members"
"""
input org_members_stddev_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
order by stddev_pop() on columns of table "org_members"
"""
input org_members_stddev_pop_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
order by stddev_samp() on columns of table "org_members"
"""
input org_members_stddev_samp_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
Streaming cursor of the table "org_members"
"""
input org_members_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: org_members_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input org_members_stream_cursor_value_input {
  created_at: timestamp
  deleted_at: timestamp
  hidden: Boolean
  id: bigint
  org_id: bigint
  profile_id: bigint
  role: Int
  updated_at: timestamp
}

"""
order by sum() on columns of table "org_members"
"""
input org_members_sum_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

input org_members_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: org_members_set_input

  """
  filter the rows which have to be updated
  """
  where: org_members_bool_exp!
}

"""
order by var_pop() on columns of table "org_members"
"""
input org_members_var_pop_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
order by var_samp() on columns of table "org_members"
"""
input org_members_var_samp_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
order by variance() on columns of table "org_members"
"""
input org_members_variance_order_by {
  id: order_by
  org_id: order_by
  profile_id: order_by
  role: order_by
}

"""
columns and relationships of "org_share_tokens"
"""
type org_share_tokens {
  created_at: timestamptz!
  org_id: bigint!

  """
  An object relationship
  """
  organization: organizations!
  type: Int!
  updated_at: timestamptz!
  uuid: uuid!
}

"""
Boolean expression to filter rows from the table "org_share_tokens". All fields are combined with a logical 'AND'.
"""
input org_share_tokens_bool_exp {
  _and: [org_share_tokens_bool_exp!]
  _not: org_share_tokens_bool_exp
  _or: [org_share_tokens_bool_exp!]
  created_at: timestamptz_comparison_exp
  org_id: bigint_comparison_exp
  organization: organizations_bool_exp
  type: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "org_share_tokens"
"""
enum org_share_tokens_constraint {
  """
  unique or primary key constraint on columns "org_id", "type"
  """
  org_share_tokens_pkey

  """
  unique or primary key constraint on columns "uuid"
  """
  org_share_tokens_uuid_key
}

"""
input type for inserting data into table "org_share_tokens"
"""
input org_share_tokens_insert_input {
  org_id: bigint
  type: Int
}

"""
response of any mutation on the table "org_share_tokens"
"""
type org_share_tokens_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [org_share_tokens!]!
}

"""
on_conflict condition type for table "org_share_tokens"
"""
input org_share_tokens_on_conflict {
  constraint: org_share_tokens_constraint!
  update_columns: [org_share_tokens_update_column!]! = []
  where: org_share_tokens_bool_exp
}

"""
Ordering options when selecting data from "org_share_tokens".
"""
input org_share_tokens_order_by {
  created_at: order_by
  org_id: order_by
  organization: organizations_order_by
  type: order_by
  updated_at: order_by
  uuid: order_by
}

"""
select columns of table "org_share_tokens"
"""
enum org_share_tokens_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  org_id

  """
  column name
  """
  type

  """
  column name
  """
  updated_at

  """
  column name
  """
  uuid
}

"""
Streaming cursor of the table "org_share_tokens"
"""
input org_share_tokens_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: org_share_tokens_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input org_share_tokens_stream_cursor_value_input {
  created_at: timestamptz
  org_id: bigint
  type: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
placeholder for update columns of table "org_share_tokens" (current role has no relevant permissions)
"""
enum org_share_tokens_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
columns and relationships of "organizations"
"""
type organizations {
  """
  An array relationship
  """
  circles(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!
  created_at: timestamp!
  created_by: Int
  guild_id: Int
  guild_role_id: Int
  id: bigint!
  logo: String

  """
  An array relationship
  """
  members(
    """
    distinct select on columns
    """
    distinct_on: [org_members_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [org_members_order_by!]

    """
    filter the rows returned
    """
    where: org_members_bool_exp
  ): [org_members!]!
  name: String!

  """
  An object relationship
  """
  profile: profiles

  """
  Indicates a test/sample/sandbox org
  """
  sample: Boolean!
  telegram_id: String
  updated_at: timestamp!

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!
}

"""
Boolean expression to filter rows from the table "organizations". All fields are combined with a logical 'AND'.
"""
input organizations_bool_exp {
  _and: [organizations_bool_exp!]
  _not: organizations_bool_exp
  _or: [organizations_bool_exp!]
  circles: circles_bool_exp
  created_at: timestamp_comparison_exp
  created_by: Int_comparison_exp
  guild_id: Int_comparison_exp
  guild_role_id: Int_comparison_exp
  id: bigint_comparison_exp
  logo: String_comparison_exp
  members: org_members_bool_exp
  name: String_comparison_exp
  profile: profiles_bool_exp
  sample: Boolean_comparison_exp
  telegram_id: String_comparison_exp
  updated_at: timestamp_comparison_exp
  vaults: vaults_bool_exp
}

"""
input type for incrementing numeric columns in table "organizations"
"""
input organizations_inc_input {
  guild_id: Int
  guild_role_id: Int
}

"""
response of any mutation on the table "organizations"
"""
type organizations_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [organizations!]!
}

"""
Ordering options when selecting data from "organizations".
"""
input organizations_order_by {
  circles_aggregate: circles_aggregate_order_by
  created_at: order_by
  created_by: order_by
  guild_id: order_by
  guild_role_id: order_by
  id: order_by
  logo: order_by
  members_aggregate: org_members_aggregate_order_by
  name: order_by
  profile: profiles_order_by
  sample: order_by
  telegram_id: order_by
  updated_at: order_by
  vaults_aggregate: vaults_aggregate_order_by
}

"""
primary key columns input for table: organizations
"""
input organizations_pk_columns_input {
  id: bigint!
}

"""
select columns of table "organizations"
"""
enum organizations_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  guild_id

  """
  column name
  """
  guild_role_id

  """
  column name
  """
  id

  """
  column name
  """
  logo

  """
  column name
  """
  name

  """
  column name
  """
  sample

  """
  column name
  """
  telegram_id

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "organizations"
"""
input organizations_set_input {
  guild_id: Int
  guild_role_id: Int
  name: String
  telegram_id: String
}

"""
Streaming cursor of the table "organizations"
"""
input organizations_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: organizations_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input organizations_stream_cursor_value_input {
  created_at: timestamp
  created_by: Int
  guild_id: Int
  guild_role_id: Int
  id: bigint
  logo: String
  name: String

  """
  Indicates a test/sample/sandbox org
  """
  sample: Boolean
  telegram_id: String
  updated_at: timestamp
}

input organizations_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: organizations_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: organizations_set_input

  """
  filter the rows which have to be updated
  """
  where: organizations_bool_exp!
}

"""
columns and relationships of "pending_gift_private"
"""
type pending_gift_private {
  gift_id: bigint
  note: String

  """
  An object relationship
  """
  recipient: users
  recipient_id: bigint

  """
  An object relationship
  """
  sender: users
  sender_id: bigint
}

"""
Boolean expression to filter rows from the table "pending_gift_private". All fields are combined with a logical 'AND'.
"""
input pending_gift_private_bool_exp {
  _and: [pending_gift_private_bool_exp!]
  _not: pending_gift_private_bool_exp
  _or: [pending_gift_private_bool_exp!]
  gift_id: bigint_comparison_exp
  note: String_comparison_exp
  recipient: users_bool_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_id: bigint_comparison_exp
}

"""
Ordering options when selecting data from "pending_gift_private".
"""
input pending_gift_private_order_by {
  gift_id: order_by
  note: order_by
  recipient: users_order_by
  recipient_id: order_by
  sender: users_order_by
  sender_id: order_by
}

"""
select columns of table "pending_gift_private"
"""
enum pending_gift_private_select_column {
  """
  column name
  """
  gift_id

  """
  column name
  """
  note

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_id
}

"""
Streaming cursor of the table "pending_gift_private"
"""
input pending_gift_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: pending_gift_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input pending_gift_private_stream_cursor_value_input {
  gift_id: bigint
  note: String
  recipient_id: bigint
  sender_id: bigint
}

"""
GIVE allocations made by circle members for the currently running epoch
"""
type pending_token_gifts {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!
  dts_created: timestamp!

  """
  An object relationship
  """
  epoch: epochs
  epoch_id: Int!

  """
  An object relationship
  """
  gift_private: pending_gift_private
  id: bigint!

  """
  An object relationship
  """
  recipient: users!
  recipient_address: String!
  recipient_id: bigint!

  """
  An object relationship
  """
  sender: users!
  sender_address: String!
  sender_id: bigint!
  tokens: Int!
  updated_at: timestamp!
}

"""
order by aggregate values of table "pending_token_gifts"
"""
input pending_token_gifts_aggregate_order_by {
  avg: pending_token_gifts_avg_order_by
  count: order_by
  max: pending_token_gifts_max_order_by
  min: pending_token_gifts_min_order_by
  stddev: pending_token_gifts_stddev_order_by
  stddev_pop: pending_token_gifts_stddev_pop_order_by
  stddev_samp: pending_token_gifts_stddev_samp_order_by
  sum: pending_token_gifts_sum_order_by
  var_pop: pending_token_gifts_var_pop_order_by
  var_samp: pending_token_gifts_var_samp_order_by
  variance: pending_token_gifts_variance_order_by
}

"""
order by avg() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Boolean expression to filter rows from the table "pending_token_gifts". All fields are combined with a logical 'AND'.
"""
input pending_token_gifts_bool_exp {
  _and: [pending_token_gifts_bool_exp!]
  _not: pending_token_gifts_bool_exp
  _or: [pending_token_gifts_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  dts_created: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  gift_private: pending_gift_private_bool_exp
  id: bigint_comparison_exp
  recipient: users_bool_exp
  recipient_address: String_comparison_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_address: String_comparison_exp
  sender_id: bigint_comparison_exp
  tokens: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
order by max() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_max_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_min_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "pending_token_gifts".
"""
input pending_token_gifts_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gift_private: pending_gift_private_order_by
  id: order_by
  recipient: users_order_by
  recipient_address: order_by
  recipient_id: order_by
  sender: users_order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
select columns of table "pending_token_gifts"
"""
enum pending_token_gifts_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dts_created

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  recipient_address

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_address

  """
  column name
  """
  sender_id

  """
  column name
  """
  tokens

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
order by stddev_pop() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
order by stddev_samp() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Streaming cursor of the table "pending_token_gifts"
"""
input pending_token_gifts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: pending_token_gifts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input pending_token_gifts_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by sum() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
order by var_pop() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
order by var_samp() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
order by variance() on columns of table "pending_token_gifts"
"""
input pending_token_gifts_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
stores app-specific context to aid in the recovery of incomplete transactions
"""
type pending_vault_transactions {
  chain_id: Int!
  claim_id: bigint
  created_by: bigint!

  """
  An object relationship
  """
  distribution: distributions
  distribution_id: bigint
  org_id: bigint

  """
  An object relationship
  """
  organization: organizations

  """
  An object relationship
  """
  profile: profiles!
  tx_hash: String!
  tx_type: vault_tx_types_enum!

  """
  An object relationship
  """
  vault_tx_type: vault_tx_types!
}

"""
Boolean expression to filter rows from the table "pending_vault_transactions". All fields are combined with a logical 'AND'.
"""
input pending_vault_transactions_bool_exp {
  _and: [pending_vault_transactions_bool_exp!]
  _not: pending_vault_transactions_bool_exp
  _or: [pending_vault_transactions_bool_exp!]
  chain_id: Int_comparison_exp
  claim_id: bigint_comparison_exp
  created_by: bigint_comparison_exp
  distribution: distributions_bool_exp
  distribution_id: bigint_comparison_exp
  org_id: bigint_comparison_exp
  organization: organizations_bool_exp
  profile: profiles_bool_exp
  tx_hash: String_comparison_exp
  tx_type: vault_tx_types_enum_comparison_exp
  vault_tx_type: vault_tx_types_bool_exp
}

"""
unique or primary key constraints on table "pending_vault_transactions"
"""
enum pending_vault_transactions_constraint {
  """
  unique or primary key constraint on columns "tx_hash"
  """
  pending_vault_transactions_pkey
}

"""
input type for inserting data into table "pending_vault_transactions"
"""
input pending_vault_transactions_insert_input {
  chain_id: Int
  claim_id: bigint
  distribution: distributions_obj_rel_insert_input
  distribution_id: bigint
  org_id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
}

"""
response of any mutation on the table "pending_vault_transactions"
"""
type pending_vault_transactions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [pending_vault_transactions!]!
}

"""
on_conflict condition type for table "pending_vault_transactions"
"""
input pending_vault_transactions_on_conflict {
  constraint: pending_vault_transactions_constraint!
  update_columns: [pending_vault_transactions_update_column!]! = []
  where: pending_vault_transactions_bool_exp
}

"""
Ordering options when selecting data from "pending_vault_transactions".
"""
input pending_vault_transactions_order_by {
  chain_id: order_by
  claim_id: order_by
  created_by: order_by
  distribution: distributions_order_by
  distribution_id: order_by
  org_id: order_by
  organization: organizations_order_by
  profile: profiles_order_by
  tx_hash: order_by
  tx_type: order_by
  vault_tx_type: vault_tx_types_order_by
}

"""
select columns of table "pending_vault_transactions"
"""
enum pending_vault_transactions_select_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  claim_id

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_id

  """
  column name
  """
  org_id

  """
  column name
  """
  tx_hash

  """
  column name
  """
  tx_type
}

"""
Streaming cursor of the table "pending_vault_transactions"
"""
input pending_vault_transactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: pending_vault_transactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input pending_vault_transactions_stream_cursor_value_input {
  chain_id: Int
  claim_id: bigint
  created_by: bigint
  distribution_id: bigint
  org_id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
}

"""
placeholder for update columns of table "pending_vault_transactions" (current role has no relevant permissions)
"""
enum pending_vault_transactions_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
Poap event info
"""
type poap_events {
  city: String!
  country: String!
  created_at: timestamptz!
  description: String!
  embedding: vector
  end_date: date!
  event_url: String!
  expiry_date: date!
  fancy_id: String!
  id: bigint!
  image_url: String!
  name: String!
  poap_id: Int!
  similarity: float8
  start_date: date!
  supply: Int!
  updated_at: timestamptz!
  year: Int!
}

"""
aggregated selection of "poap_events"
"""
type poap_events_aggregate {
  aggregate: poap_events_aggregate_fields
  nodes: [poap_events!]!
}

"""
aggregate fields of "poap_events"
"""
type poap_events_aggregate_fields {
  avg: poap_events_avg_fields
  count(columns: [poap_events_select_column!], distinct: Boolean): Int!
  max: poap_events_max_fields
  min: poap_events_min_fields
  stddev: poap_events_stddev_fields
  stddev_pop: poap_events_stddev_pop_fields
  stddev_samp: poap_events_stddev_samp_fields
  sum: poap_events_sum_fields
  var_pop: poap_events_var_pop_fields
  var_samp: poap_events_var_samp_fields
  variance: poap_events_variance_fields
}

"""
aggregate avg on columns
"""
type poap_events_avg_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
Boolean expression to filter rows from the table "poap_events". All fields are combined with a logical 'AND'.
"""
input poap_events_bool_exp {
  _and: [poap_events_bool_exp!]
  _not: poap_events_bool_exp
  _or: [poap_events_bool_exp!]
  city: String_comparison_exp
  country: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  embedding: vector_comparison_exp
  end_date: date_comparison_exp
  event_url: String_comparison_exp
  expiry_date: date_comparison_exp
  fancy_id: String_comparison_exp
  id: bigint_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
  poap_id: Int_comparison_exp
  similarity: float8_comparison_exp
  start_date: date_comparison_exp
  supply: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  year: Int_comparison_exp
}

"""
aggregate max on columns
"""
type poap_events_max_fields {
  city: String
  country: String
  created_at: timestamptz
  description: String
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
aggregate min on columns
"""
type poap_events_min_fields {
  city: String
  country: String
  created_at: timestamptz
  description: String
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
Ordering options when selecting data from "poap_events".
"""
input poap_events_order_by {
  city: order_by
  country: order_by
  created_at: order_by
  description: order_by
  embedding: order_by
  end_date: order_by
  event_url: order_by
  expiry_date: order_by
  fancy_id: order_by
  id: order_by
  image_url: order_by
  name: order_by
  poap_id: order_by
  similarity: order_by
  start_date: order_by
  supply: order_by
  updated_at: order_by
  year: order_by
}

"""
select columns of table "poap_events"
"""
enum poap_events_select_column {
  """
  column name
  """
  city

  """
  column name
  """
  country

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  embedding

  """
  column name
  """
  end_date

  """
  column name
  """
  event_url

  """
  column name
  """
  expiry_date

  """
  column name
  """
  fancy_id

  """
  column name
  """
  id

  """
  column name
  """
  image_url

  """
  column name
  """
  name

  """
  column name
  """
  poap_id

  """
  column name
  """
  similarity

  """
  column name
  """
  start_date

  """
  column name
  """
  supply

  """
  column name
  """
  updated_at

  """
  column name
  """
  year
}

"""
aggregate stddev on columns
"""
type poap_events_stddev_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate stddev_pop on columns
"""
type poap_events_stddev_pop_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate stddev_samp on columns
"""
type poap_events_stddev_samp_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
Streaming cursor of the table "poap_events"
"""
input poap_events_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: poap_events_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input poap_events_stream_cursor_value_input {
  city: String
  country: String
  created_at: timestamptz
  description: String
  embedding: vector
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
aggregate sum on columns
"""
type poap_events_sum_fields {
  id: bigint
  poap_id: Int
  similarity: float8
  supply: Int
  year: Int
}

"""
aggregate var_pop on columns
"""
type poap_events_var_pop_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate var_samp on columns
"""
type poap_events_var_samp_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate variance on columns
"""
type poap_events_variance_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
columns and relationships of "poap_holders"
"""
type poap_holders {
  address: citext!
  chain: String!

  """
  An object relationship
  """
  cosoul: cosouls
  created_at: timestamptz!

  """
  An object relationship
  """
  event: poap_events!
  event_id: bigint!
  id: bigint!
  poap_created: timestamptz!
  token_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "poap_holders"
"""
type poap_holders_aggregate {
  aggregate: poap_holders_aggregate_fields
  nodes: [poap_holders!]!
}

input poap_holders_aggregate_bool_exp {
  count: poap_holders_aggregate_bool_exp_count
}

input poap_holders_aggregate_bool_exp_count {
  arguments: [poap_holders_select_column!]
  distinct: Boolean
  filter: poap_holders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "poap_holders"
"""
type poap_holders_aggregate_fields {
  avg: poap_holders_avg_fields
  count(columns: [poap_holders_select_column!], distinct: Boolean): Int!
  max: poap_holders_max_fields
  min: poap_holders_min_fields
  stddev: poap_holders_stddev_fields
  stddev_pop: poap_holders_stddev_pop_fields
  stddev_samp: poap_holders_stddev_samp_fields
  sum: poap_holders_sum_fields
  var_pop: poap_holders_var_pop_fields
  var_samp: poap_holders_var_samp_fields
  variance: poap_holders_variance_fields
}

"""
order by aggregate values of table "poap_holders"
"""
input poap_holders_aggregate_order_by {
  avg: poap_holders_avg_order_by
  count: order_by
  max: poap_holders_max_order_by
  min: poap_holders_min_order_by
  stddev: poap_holders_stddev_order_by
  stddev_pop: poap_holders_stddev_pop_order_by
  stddev_samp: poap_holders_stddev_samp_order_by
  sum: poap_holders_sum_order_by
  var_pop: poap_holders_var_pop_order_by
  var_samp: poap_holders_var_samp_order_by
  variance: poap_holders_variance_order_by
}

"""
aggregate avg on columns
"""
type poap_holders_avg_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by avg() on columns of table "poap_holders"
"""
input poap_holders_avg_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
Boolean expression to filter rows from the table "poap_holders". All fields are combined with a logical 'AND'.
"""
input poap_holders_bool_exp {
  _and: [poap_holders_bool_exp!]
  _not: poap_holders_bool_exp
  _or: [poap_holders_bool_exp!]
  address: citext_comparison_exp
  chain: String_comparison_exp
  cosoul: cosouls_bool_exp
  created_at: timestamptz_comparison_exp
  event: poap_events_bool_exp
  event_id: bigint_comparison_exp
  id: bigint_comparison_exp
  poap_created: timestamptz_comparison_exp
  token_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type poap_holders_max_fields {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "poap_holders"
"""
input poap_holders_max_order_by {
  address: order_by
  chain: order_by
  created_at: order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type poap_holders_min_fields {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "poap_holders"
"""
input poap_holders_min_order_by {
  address: order_by
  chain: order_by
  created_at: order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "poap_holders".
"""
input poap_holders_order_by {
  address: order_by
  chain: order_by
  cosoul: cosouls_order_by
  created_at: order_by
  event: poap_events_order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "poap_holders"
"""
enum poap_holders_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  chain

  """
  column name
  """
  created_at

  """
  column name
  """
  event_id

  """
  column name
  """
  id

  """
  column name
  """
  poap_created

  """
  column name
  """
  token_id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type poap_holders_stddev_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev() on columns of table "poap_holders"
"""
input poap_holders_stddev_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type poap_holders_stddev_pop_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev_pop() on columns of table "poap_holders"
"""
input poap_holders_stddev_pop_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type poap_holders_stddev_samp_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev_samp() on columns of table "poap_holders"
"""
input poap_holders_stddev_samp_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
Streaming cursor of the table "poap_holders"
"""
input poap_holders_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: poap_holders_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input poap_holders_stream_cursor_value_input {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type poap_holders_sum_fields {
  event_id: bigint
  id: bigint
  token_id: bigint
}

"""
order by sum() on columns of table "poap_holders"
"""
input poap_holders_sum_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate var_pop on columns
"""
type poap_holders_var_pop_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by var_pop() on columns of table "poap_holders"
"""
input poap_holders_var_pop_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate var_samp on columns
"""
type poap_holders_var_samp_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by var_samp() on columns of table "poap_holders"
"""
input poap_holders_var_samp_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate variance on columns
"""
type poap_holders_variance_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by variance() on columns of table "poap_holders"
"""
input poap_holders_variance_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
columns and relationships of "private_stream_visibility"
"""
type private_stream_visibility {
  created_at: timestamptz!
  profile_id: bigint!
  view_profile_id: bigint!
}

"""
order by aggregate values of table "private_stream_visibility"
"""
input private_stream_visibility_aggregate_order_by {
  avg: private_stream_visibility_avg_order_by
  count: order_by
  max: private_stream_visibility_max_order_by
  min: private_stream_visibility_min_order_by
  stddev: private_stream_visibility_stddev_order_by
  stddev_pop: private_stream_visibility_stddev_pop_order_by
  stddev_samp: private_stream_visibility_stddev_samp_order_by
  sum: private_stream_visibility_sum_order_by
  var_pop: private_stream_visibility_var_pop_order_by
  var_samp: private_stream_visibility_var_samp_order_by
  variance: private_stream_visibility_variance_order_by
}

"""
order by avg() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_avg_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
Boolean expression to filter rows from the table "private_stream_visibility". All fields are combined with a logical 'AND'.
"""
input private_stream_visibility_bool_exp {
  _and: [private_stream_visibility_bool_exp!]
  _not: private_stream_visibility_bool_exp
  _or: [private_stream_visibility_bool_exp!]
  created_at: timestamptz_comparison_exp
  profile_id: bigint_comparison_exp
  view_profile_id: bigint_comparison_exp
}

"""
order by max() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_max_order_by {
  created_at: order_by
  profile_id: order_by
  view_profile_id: order_by
}

"""
order by min() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_min_order_by {
  created_at: order_by
  profile_id: order_by
  view_profile_id: order_by
}

"""
Ordering options when selecting data from "private_stream_visibility".
"""
input private_stream_visibility_order_by {
  created_at: order_by
  profile_id: order_by
  view_profile_id: order_by
}

"""
select columns of table "private_stream_visibility"
"""
enum private_stream_visibility_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  profile_id

  """
  column name
  """
  view_profile_id
}

"""
order by stddev() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_stddev_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
order by stddev_pop() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_stddev_pop_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
order by stddev_samp() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_stddev_samp_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
Streaming cursor of the table "private_stream_visibility"
"""
input private_stream_visibility_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: private_stream_visibility_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input private_stream_visibility_stream_cursor_value_input {
  created_at: timestamptz
  profile_id: bigint
  view_profile_id: bigint
}

"""
order by sum() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_sum_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
order by var_pop() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_var_pop_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
order by var_samp() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_var_samp_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
order by variance() on columns of table "private_stream_visibility"
"""
input private_stream_visibility_variance_order_by {
  profile_id: order_by
  view_profile_id: order_by
}

"""
columns and relationships of "profile_skills"
"""
type profile_skills {
  created_at: timestamptz!

  """
  An object relationship
  """
  profile: profiles
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public

  """
  An object relationship
  """
  skill: skills
  skill_name: citext!
}

"""
order by aggregate values of table "profile_skills"
"""
input profile_skills_aggregate_order_by {
  avg: profile_skills_avg_order_by
  count: order_by
  max: profile_skills_max_order_by
  min: profile_skills_min_order_by
  stddev: profile_skills_stddev_order_by
  stddev_pop: profile_skills_stddev_pop_order_by
  stddev_samp: profile_skills_stddev_samp_order_by
  sum: profile_skills_sum_order_by
  var_pop: profile_skills_var_pop_order_by
  var_samp: profile_skills_var_samp_order_by
  variance: profile_skills_variance_order_by
}

"""
order by avg() on columns of table "profile_skills"
"""
input profile_skills_avg_order_by {
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "profile_skills". All fields are combined with a logical 'AND'.
"""
input profile_skills_bool_exp {
  _and: [profile_skills_bool_exp!]
  _not: profile_skills_bool_exp
  _or: [profile_skills_bool_exp!]
  created_at: timestamptz_comparison_exp
  profile: profiles_bool_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  skill: skills_bool_exp
  skill_name: citext_comparison_exp
}

"""
unique or primary key constraints on table "profile_skills"
"""
enum profile_skills_constraint {
  """
  unique or primary key constraint on columns "profile_id", "skill_name"
  """
  profile_skills_pkey
}

"""
input type for inserting data into table "profile_skills"
"""
input profile_skills_insert_input {
  profile_id: Int
  skill: skills_obj_rel_insert_input
  skill_name: citext
}

"""
order by max() on columns of table "profile_skills"
"""
input profile_skills_max_order_by {
  created_at: order_by
  profile_id: order_by
  skill_name: order_by
}

"""
order by min() on columns of table "profile_skills"
"""
input profile_skills_min_order_by {
  created_at: order_by
  profile_id: order_by
  skill_name: order_by
}

"""
response of any mutation on the table "profile_skills"
"""
type profile_skills_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [profile_skills!]!
}

"""
input type for inserting object relation for remote table "profile_skills"
"""
input profile_skills_obj_rel_insert_input {
  data: profile_skills_insert_input!

  """
  upsert condition
  """
  on_conflict: profile_skills_on_conflict
}

"""
on_conflict condition type for table "profile_skills"
"""
input profile_skills_on_conflict {
  constraint: profile_skills_constraint!
  update_columns: [profile_skills_update_column!]! = []
  where: profile_skills_bool_exp
}

"""
Ordering options when selecting data from "profile_skills".
"""
input profile_skills_order_by {
  created_at: order_by
  profile: profiles_order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  skill: skills_order_by
  skill_name: order_by
}

"""
select columns of table "profile_skills"
"""
enum profile_skills_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  profile_id

  """
  column name
  """
  skill_name
}

"""
order by stddev() on columns of table "profile_skills"
"""
input profile_skills_stddev_order_by {
  profile_id: order_by
}

"""
order by stddev_pop() on columns of table "profile_skills"
"""
input profile_skills_stddev_pop_order_by {
  profile_id: order_by
}

"""
order by stddev_samp() on columns of table "profile_skills"
"""
input profile_skills_stddev_samp_order_by {
  profile_id: order_by
}

"""
Streaming cursor of the table "profile_skills"
"""
input profile_skills_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profile_skills_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profile_skills_stream_cursor_value_input {
  created_at: timestamptz
  profile_id: Int
  skill_name: citext
}

"""
order by sum() on columns of table "profile_skills"
"""
input profile_skills_sum_order_by {
  profile_id: order_by
}

"""
placeholder for update columns of table "profile_skills" (current role has no relevant permissions)
"""
enum profile_skills_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
order by var_pop() on columns of table "profile_skills"
"""
input profile_skills_var_pop_order_by {
  profile_id: order_by
}

"""
order by var_samp() on columns of table "profile_skills"
"""
input profile_skills_var_samp_order_by {
  profile_id: order_by
}

"""
order by variance() on columns of table "profile_skills"
"""
input profile_skills_variance_order_by {
  profile_id: order_by
}

"""
Coordinape user accounts that can belong to one or many circles via the relationship to the users table
"""
type profiles {
  address: String!
  app_emails: Boolean!
  avatar: String
  background: String
  bio: String

  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!

  """
  An array relationship
  """
  colinks_gives_received(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_received_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  An array relationship
  """
  colinks_gives_sent(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_sent_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!
  colinks_notification_emails: Boolean!
  colinks_product_emails: Boolean!

  """
  An object relationship
  """
  cosoul: cosouls
  created_at: timestamp!
  description: String
  discord_username: String

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!

  """
  An array relationship
  """
  emails(
    """
    distinct select on columns
    """
    distinct_on: [emails_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [emails_order_by!]

    """
    filter the rows returned
    """
    where: emails_bool_exp
  ): [emails!]!

  """
  An object relationship
  """
  farcaster_account: farcaster_accounts
  github_username: String
  id: bigint!
  invite_code: uuid!
  invite_code_redeemed_at: timestamptz
  invite_code_requested_at: timestamptz
  invite_code_sent_at: timestamptz

  """
  An array relationship
  """
  invite_codes(
    """
    distinct select on columns
    """
    distinct_on: [invite_codes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [invite_codes_order_by!]

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): [invite_codes!]!

  """
  An aggregate relationship
  """
  invite_codes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [invite_codes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [invite_codes_order_by!]

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): invite_codes_aggregate!
  invited_by: bigint
  last_read_notification_id: Int
  links: Int!
  links_held: Int!
  medium_username: String
  name: citext!

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!

  """
  An array relationship
  """
  org_members(
    """
    distinct select on columns
    """
    distinct_on: [org_members_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [org_members_order_by!]

    """
    filter the rows returned
    """
    where: org_members_bool_exp
  ): [org_members!]!
  product_emails: Boolean!

  """
  An object relationship
  """
  profile_skills: profile_skills

  """
  An object relationship
  """
  reputation_score: reputation_scores
  skills: String
  telegram_username: String
  tos_agreed_at: timestamp
  twitter_username: String
  updated_at: timestamp!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!
  website: String
}

"""
Boolean expression to filter rows from the table "profiles". All fields are combined with a logical 'AND'.
"""
input profiles_bool_exp {
  _and: [profiles_bool_exp!]
  _not: profiles_bool_exp
  _or: [profiles_bool_exp!]
  address: String_comparison_exp
  app_emails: Boolean_comparison_exp
  avatar: String_comparison_exp
  background: String_comparison_exp
  bio: String_comparison_exp
  claims: claims_bool_exp
  claims_aggregate: claims_aggregate_bool_exp
  colinks_gives_received: colinks_gives_bool_exp
  colinks_gives_received_aggregate: colinks_gives_aggregate_bool_exp
  colinks_gives_sent: colinks_gives_bool_exp
  colinks_gives_sent_aggregate: colinks_gives_aggregate_bool_exp
  colinks_notification_emails: Boolean_comparison_exp
  colinks_product_emails: Boolean_comparison_exp
  cosoul: cosouls_bool_exp
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  discord_username: String_comparison_exp
  distributions: distributions_bool_exp
  distributions_aggregate: distributions_aggregate_bool_exp
  emails: emails_bool_exp
  farcaster_account: farcaster_accounts_bool_exp
  github_username: String_comparison_exp
  id: bigint_comparison_exp
  invite_code: uuid_comparison_exp
  invite_code_redeemed_at: timestamptz_comparison_exp
  invite_code_requested_at: timestamptz_comparison_exp
  invite_code_sent_at: timestamptz_comparison_exp
  invite_codes: invite_codes_bool_exp
  invite_codes_aggregate: invite_codes_aggregate_bool_exp
  invited_by: bigint_comparison_exp
  last_read_notification_id: Int_comparison_exp
  links: Int_comparison_exp
  links_held: Int_comparison_exp
  medium_username: String_comparison_exp
  name: citext_comparison_exp
  nominees: nominees_bool_exp
  nominees_aggregate: nominees_aggregate_bool_exp
  org_members: org_members_bool_exp
  product_emails: Boolean_comparison_exp
  profile_skills: profile_skills_bool_exp
  reputation_score: reputation_scores_bool_exp
  skills: String_comparison_exp
  telegram_username: String_comparison_exp
  tos_agreed_at: timestamp_comparison_exp
  twitter_username: String_comparison_exp
  updated_at: timestamp_comparison_exp
  users: users_bool_exp
  vault_transactions: vault_transactions_bool_exp
  vaults: vaults_bool_exp
  website: String_comparison_exp
}

"""
input type for incrementing numeric columns in table "profiles"
"""
input profiles_inc_input {
  last_read_notification_id: Int
}

"""
response of any mutation on the table "profiles"
"""
type profiles_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [profiles!]!
}

"""
Ordering options when selecting data from "profiles".
"""
input profiles_order_by {
  address: order_by
  app_emails: order_by
  avatar: order_by
  background: order_by
  bio: order_by
  claims_aggregate: claims_aggregate_order_by
  colinks_gives_received_aggregate: colinks_gives_aggregate_order_by
  colinks_gives_sent_aggregate: colinks_gives_aggregate_order_by
  colinks_notification_emails: order_by
  colinks_product_emails: order_by
  cosoul: cosouls_order_by
  created_at: order_by
  description: order_by
  discord_username: order_by
  distributions_aggregate: distributions_aggregate_order_by
  emails_aggregate: emails_aggregate_order_by
  farcaster_account: farcaster_accounts_order_by
  github_username: order_by
  id: order_by
  invite_code: order_by
  invite_code_redeemed_at: order_by
  invite_code_requested_at: order_by
  invite_code_sent_at: order_by
  invite_codes_aggregate: invite_codes_aggregate_order_by
  invited_by: order_by
  last_read_notification_id: order_by
  links: order_by
  links_held: order_by
  medium_username: order_by
  name: order_by
  nominees_aggregate: nominees_aggregate_order_by
  org_members_aggregate: org_members_aggregate_order_by
  product_emails: order_by
  profile_skills: profile_skills_order_by
  reputation_score: reputation_scores_order_by
  skills: order_by
  telegram_username: order_by
  tos_agreed_at: order_by
  twitter_username: order_by
  updated_at: order_by
  users_aggregate: users_aggregate_order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
  vaults_aggregate: vaults_aggregate_order_by
  website: order_by
}

"""
primary key columns input for table: profiles
"""
input profiles_pk_columns_input {
  id: bigint!
}

"""
columns and relationships of "profiles_private"
"""
type profiles_private {
  address: String
  device_login_token: uuid
  id: bigint
  points_balance: float8
  points_checkpointed_at: timestamptz
}

"""
Boolean expression to filter rows from the table "profiles_private". All fields are combined with a logical 'AND'.
"""
input profiles_private_bool_exp {
  _and: [profiles_private_bool_exp!]
  _not: profiles_private_bool_exp
  _or: [profiles_private_bool_exp!]
  address: String_comparison_exp
  device_login_token: uuid_comparison_exp
  id: bigint_comparison_exp
  points_balance: float8_comparison_exp
  points_checkpointed_at: timestamptz_comparison_exp
}

"""
response of any mutation on the table "profiles_private"
"""
type profiles_private_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [profiles_private!]!
}

"""
Ordering options when selecting data from "profiles_private".
"""
input profiles_private_order_by {
  address: order_by
  device_login_token: order_by
  id: order_by
  points_balance: order_by
  points_checkpointed_at: order_by
}

"""
select columns of table "profiles_private"
"""
enum profiles_private_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  device_login_token

  """
  column name
  """
  id

  """
  column name
  """
  points_balance

  """
  column name
  """
  points_checkpointed_at
}

"""
input type for updating data in table "profiles_private"
"""
input profiles_private_set_input {
  device_login_token: uuid
}

"""
Streaming cursor of the table "profiles_private"
"""
input profiles_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_private_stream_cursor_value_input {
  address: String
  device_login_token: uuid
  id: bigint
  points_balance: float8
  points_checkpointed_at: timestamptz
}

input profiles_private_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: profiles_private_set_input

  """
  filter the rows which have to be updated
  """
  where: profiles_private_bool_exp!
}

"""
columns and relationships of "profiles_public"
"""
type profiles_public {
  address: String
  avatar: String

  """
  An array relationship
  """
  colinks_given(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_given_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  An array relationship
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  An object relationship
  """
  cosoul: cosouls
  created_at: timestamp
  description: String

  """
  An object relationship
  """
  farcaster_account: farcaster_accounts
  id: bigint
  joined_colinks_at: timestamptz

  """
  An array relationship
  """
  link_holder(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holder_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  An array relationship
  """
  link_target(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_target_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  links: Int
  links_held: Int

  """
  An array relationship
  """
  mutes(
    """
    distinct select on columns
    """
    distinct_on: [mutes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [mutes_order_by!]

    """
    filter the rows returned
    """
    where: mutes_bool_exp
  ): [mutes!]!
  name: citext
  post_count: bigint
  post_count_last_30_days: bigint

  """
  An array relationship
  """
  profile_skills(
    """
    distinct select on columns
    """
    distinct_on: [profile_skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profile_skills_order_by!]

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  An object relationship
  """
  reputation_score: reputation_scores
  website: String
}

"""
Boolean expression to filter rows from the table "profiles_public". All fields are combined with a logical 'AND'.
"""
input profiles_public_bool_exp {
  _and: [profiles_public_bool_exp!]
  _not: profiles_public_bool_exp
  _or: [profiles_public_bool_exp!]
  address: String_comparison_exp
  avatar: String_comparison_exp
  colinks_given: colinks_gives_bool_exp
  colinks_given_aggregate: colinks_gives_aggregate_bool_exp
  colinks_gives: colinks_gives_bool_exp
  colinks_gives_aggregate: colinks_gives_aggregate_bool_exp
  cosoul: cosouls_bool_exp
  created_at: timestamp_comparison_exp
  description: String_comparison_exp
  farcaster_account: farcaster_accounts_bool_exp
  id: bigint_comparison_exp
  joined_colinks_at: timestamptz_comparison_exp
  link_holder: link_holders_bool_exp
  link_holder_aggregate: link_holders_aggregate_bool_exp
  link_target: link_holders_bool_exp
  link_target_aggregate: link_holders_aggregate_bool_exp
  links: Int_comparison_exp
  links_held: Int_comparison_exp
  mutes: mutes_bool_exp
  name: citext_comparison_exp
  post_count: bigint_comparison_exp
  post_count_last_30_days: bigint_comparison_exp
  profile_skills: profile_skills_bool_exp
  reputation_score: reputation_scores_bool_exp
  website: String_comparison_exp
}

"""
Ordering options when selecting data from "profiles_public".
"""
input profiles_public_order_by {
  address: order_by
  avatar: order_by
  colinks_given_aggregate: colinks_gives_aggregate_order_by
  colinks_gives_aggregate: colinks_gives_aggregate_order_by
  cosoul: cosouls_order_by
  created_at: order_by
  description: order_by
  farcaster_account: farcaster_accounts_order_by
  id: order_by
  joined_colinks_at: order_by
  link_holder_aggregate: link_holders_aggregate_order_by
  link_target_aggregate: link_holders_aggregate_order_by
  links: order_by
  links_held: order_by
  mutes_aggregate: mutes_aggregate_order_by
  name: order_by
  post_count: order_by
  post_count_last_30_days: order_by
  profile_skills_aggregate: profile_skills_aggregate_order_by
  reputation_score: reputation_scores_order_by
  website: order_by
}

"""
select columns of table "profiles_public"
"""
enum profiles_public_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  avatar

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  joined_colinks_at

  """
  column name
  """
  links

  """
  column name
  """
  links_held

  """
  column name
  """
  name

  """
  column name
  """
  post_count

  """
  column name
  """
  post_count_last_30_days

  """
  column name
  """
  website
}

"""
Streaming cursor of the table "profiles_public"
"""
input profiles_public_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_public_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_public_stream_cursor_value_input {
  address: String
  avatar: String
  created_at: timestamp
  description: String
  id: bigint
  joined_colinks_at: timestamptz
  links: Int
  links_held: Int
  name: citext
  post_count: bigint
  post_count_last_30_days: bigint
  website: String
}

"""
select columns of table "profiles"
"""
enum profiles_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  app_emails

  """
  column name
  """
  avatar

  """
  column name
  """
  background

  """
  column name
  """
  bio

  """
  column name
  """
  colinks_notification_emails

  """
  column name
  """
  colinks_product_emails

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  discord_username

  """
  column name
  """
  github_username

  """
  column name
  """
  id

  """
  column name
  """
  invite_code

  """
  column name
  """
  invite_code_redeemed_at

  """
  column name
  """
  invite_code_requested_at

  """
  column name
  """
  invite_code_sent_at

  """
  column name
  """
  invited_by

  """
  column name
  """
  last_read_notification_id

  """
  column name
  """
  links

  """
  column name
  """
  links_held

  """
  column name
  """
  medium_username

  """
  column name
  """
  name

  """
  column name
  """
  product_emails

  """
  column name
  """
  skills

  """
  column name
  """
  telegram_username

  """
  column name
  """
  tos_agreed_at

  """
  column name
  """
  twitter_username

  """
  column name
  """
  updated_at

  """
  column name
  """
  website
}

"""
input type for updating data in table "profiles"
"""
input profiles_set_input {
  app_emails: Boolean
  avatar: String
  background: String
  bio: String
  colinks_notification_emails: Boolean
  colinks_product_emails: Boolean
  description: String
  discord_username: String
  github_username: String
  invite_code_redeemed_at: timestamptz
  last_read_notification_id: Int
  medium_username: String
  product_emails: Boolean
  skills: String
  telegram_username: String
  twitter_username: String
  website: String
}

"""
Streaming cursor of the table "profiles"
"""
input profiles_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_stream_cursor_value_input {
  address: String
  app_emails: Boolean
  avatar: String
  background: String
  bio: String
  colinks_notification_emails: Boolean
  colinks_product_emails: Boolean
  created_at: timestamp
  description: String
  discord_username: String
  github_username: String
  id: bigint
  invite_code: uuid
  invite_code_redeemed_at: timestamptz
  invite_code_requested_at: timestamptz
  invite_code_sent_at: timestamptz
  invited_by: bigint
  last_read_notification_id: Int
  links: Int
  links_held: Int
  medium_username: String
  name: citext
  product_emails: Boolean
  skills: String
  telegram_username: String
  tos_agreed_at: timestamp
  twitter_username: String
  updated_at: timestamp
  website: String
}

input profiles_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: profiles_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: profiles_set_input

  """
  filter the rows which have to be updated
  """
  where: profiles_bool_exp!
}

type query_root {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!

  """
  fetch data from the table: "activities" using primary key columns
  """
  activities_by_pk(id: bigint!): activities

  """
  fetch data from the table: "big_questions"
  """
  big_questions(
    """
    distinct select on columns
    """
    distinct_on: [big_questions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [big_questions_order_by!]

    """
    filter the rows returned
    """
    where: big_questions_bool_exp
  ): [big_questions!]!

  """
  fetch data from the table: "big_questions" using primary key columns
  """
  big_questions_by_pk(id: bigint!): big_questions

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  fetch data from the table: "burns" using primary key columns
  """
  burns_by_pk(id: bigint!): burns

  """
  checkEthDenverInvitee
  """
  checkEthDenverInvitee: CheckEthDenverInviteeOutput

  """
  An array relationship
  """
  circle_api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  fetch data from the table: "circle_api_keys" using primary key columns
  """
  circle_api_keys_by_pk(hash: String!): circle_api_keys

  """
  fetch data from the table: "circle_integrations"
  """
  circle_integrations(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  fetch data from the table: "circle_integrations" using primary key columns
  """
  circle_integrations_by_pk(id: bigint!): circle_integrations

  """
  fetch data from the table: "circle_private"
  """
  circle_private(
    """
    distinct select on columns
    """
    distinct_on: [circle_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_private_order_by!]

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): [circle_private!]!

  """
  fetch data from the table: "circle_share_tokens"
  """
  circle_share_tokens(
    """
    distinct select on columns
    """
    distinct_on: [circle_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): [circle_share_tokens!]!

  """
  fetch data from the table: "circle_share_tokens" using primary key columns
  """
  circle_share_tokens_by_pk(circle_id: bigint!, type: Int!): circle_share_tokens

  """
  An array relationship
  """
  circles(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  fetch data from the table: "circles" using primary key columns
  """
  circles_by_pk(id: bigint!): circles

  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!

  """
  fetch data from the table: "claims" using primary key columns
  """
  claims_by_pk(id: bigint!): claims

  """
  An array relationship
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  fetch data from the table: "colinks_gives" using primary key columns
  """
  colinks_gives_by_pk(id: Int!): colinks_gives

  """
  fetch data from the table: "contribution_count"
  """
  contribution_count(
    """
    distinct select on columns
    """
    distinct_on: [contribution_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contribution_count_order_by!]

    """
    filter the rows returned
    """
    where: contribution_count_bool_exp
  ): [contribution_count!]!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  fetch data from the table: "contributions" using primary key columns
  """
  contributions_by_pk(id: bigint!): contributions

  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!

  """
  fetch data from the table: "distributions" using primary key columns
  """
  distributions_by_pk(id: bigint!): distributions

  """
  An array relationship
  """
  emails(
    """
    distinct select on columns
    """
    distinct_on: [emails_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [emails_order_by!]

    """
    filter the rows returned
    """
    where: emails_bool_exp
  ): [emails!]!

  """
  fetch data from the table: "enriched_casts"
  """
  enriched_casts(
    """
    distinct select on columns
    """
    distinct_on: [enriched_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [enriched_casts_order_by!]

    """
    filter the rows returned
    """
    where: enriched_casts_bool_exp
  ): [enriched_casts!]!

  """
  fetch data from the table: "enriched_casts" using primary key columns
  """
  enriched_casts_by_pk(id: bigint!): enriched_casts

  """
  fetch data from the table: "epoch_pgive_data"
  """
  epoch_pgive_data(
    """
    distinct select on columns
    """
    distinct_on: [epoch_pgive_data_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epoch_pgive_data_order_by!]

    """
    filter the rows returned
    """
    where: epoch_pgive_data_bool_exp
  ): [epoch_pgive_data!]!

  """
  fetch data from the table: "epoch_pgive_data" using primary key columns
  """
  epoch_pgive_data_by_pk(id: Int!): epoch_pgive_data

  """
  An array relationship
  """
  epochs(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  fetch data from the table: "epoches" using primary key columns
  """
  epochs_by_pk(id: bigint!): epochs

  """
  fetch data from the table: "farcaster_accounts"
  """
  farcaster_accounts(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_accounts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_accounts_bool_exp
  ): [farcaster_accounts!]!

  """
  fetch data from the table: "farcaster_accounts" using primary key columns
  """
  farcaster_accounts_by_pk(profile_id: bigint!): farcaster_accounts

  """
  fetch data from the table: "farcaster.casts"
  """
  farcaster_casts(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): [farcaster_casts!]!

  """
  fetch aggregated fields from the table: "farcaster.casts"
  """
  farcaster_casts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): farcaster_casts_aggregate!

  """
  fetch data from the table: "farcaster.casts" using primary key columns
  """
  farcaster_casts_by_pk(id: bigint!): farcaster_casts

  """
  fetch data from the table: "farcaster.reactions"
  """
  farcaster_reactions(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): [farcaster_reactions!]!

  """
  fetch aggregated fields from the table: "farcaster.reactions"
  """
  farcaster_reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): farcaster_reactions_aggregate!

  """
  fetch data from the table: "farcaster.reactions" using primary key columns
  """
  farcaster_reactions_by_pk(id: bigint!): farcaster_reactions

  """
  getCasts
  """
  getCasts(payload: GetCastsInput!): GetCastsOutput!
  getGuildInfo(payload: GuildInfoInput!): GuildInfoOutput
  getHeadlines: [HeadlinesOutput!]!
  getSimilarProfiles(payload: SimilarProfileInput!): [SimilarProfileOutput!]!

  """
  fetch data from the table: "gift_private"
  """
  gift_private(
    """
    distinct select on columns
    """
    distinct_on: [gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [gift_private_order_by!]

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): [gift_private!]!

  """
  fetch data from the table: "github_accounts"
  """
  github_accounts(
    """
    distinct select on columns
    """
    distinct_on: [github_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [github_accounts_order_by!]

    """
    filter the rows returned
    """
    where: github_accounts_bool_exp
  ): [github_accounts!]!

  """
  fetch data from the table: "github_accounts" using primary key columns
  """
  github_accounts_by_pk(profile_id: bigint!): github_accounts

  """
  An array relationship
  """
  histories(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!

  """
  fetch data from the table: "histories" using primary key columns
  """
  histories_by_pk(id: bigint!): histories

  """
  An array relationship
  """
  invite_codes(
    """
    distinct select on columns
    """
    distinct_on: [invite_codes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [invite_codes_order_by!]

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): [invite_codes!]!

  """
  An aggregate relationship
  """
  invite_codes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [invite_codes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [invite_codes_order_by!]

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): invite_codes_aggregate!

  """
  fetch data from the table: "invite_codes" using primary key columns
  """
  invite_codes_by_pk(code: citext!): invite_codes

  """
  An array relationship
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  fetch data from the table: "link_holders" using primary key columns
  """
  link_holders_by_pk(holder: citext!, target: citext!): link_holders

  """
  fetch data from the table: "link_tx"
  """
  link_tx(
    """
    distinct select on columns
    """
    distinct_on: [link_tx_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_tx_order_by!]

    """
    filter the rows returned
    """
    where: link_tx_bool_exp
  ): [link_tx!]!

  """
  fetch data from the table: "link_tx" using primary key columns
  """
  link_tx_by_pk(tx_hash: citext!): link_tx

  """
  fetch data from the table: "linkedin_accounts"
  """
  linkedin_accounts(
    """
    distinct select on columns
    """
    distinct_on: [linkedin_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [linkedin_accounts_order_by!]

    """
    filter the rows returned
    """
    where: linkedin_accounts_bool_exp
  ): [linkedin_accounts!]!

  """
  fetch data from the table: "linkedin_accounts" using primary key columns
  """
  linkedin_accounts_by_pk(profile_id: bigint!): linkedin_accounts

  """
  An array relationship
  """
  locked_token_distribution_gifts(
    """
    distinct select on columns
    """
    distinct_on: [locked_token_distribution_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [locked_token_distribution_gifts_order_by!]

    """
    filter the rows returned
    """
    where: locked_token_distribution_gifts_bool_exp
  ): [locked_token_distribution_gifts!]!

  """
  fetch data from the table: "locked_token_distribution_gifts" using primary key columns
  """
  locked_token_distribution_gifts_by_pk(
    id: bigint!
  ): locked_token_distribution_gifts

  """
  fetch data from the table: "locked_token_distributions"
  """
  locked_token_distributions(
    """
    distinct select on columns
    """
    distinct_on: [locked_token_distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [locked_token_distributions_order_by!]

    """
    filter the rows returned
    """
    where: locked_token_distributions_bool_exp
  ): [locked_token_distributions!]!

  """
  fetch data from the table: "locked_token_distributions" using primary key columns
  """
  locked_token_distributions_by_pk(id: bigint!): locked_token_distributions

  """
  fetch data from the table: "member_circle_pgives"
  """
  member_circle_pgives(
    """
    distinct select on columns
    """
    distinct_on: [member_circle_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_circle_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_circle_pgives_bool_exp
  ): [member_circle_pgives!]!

  """
  An array relationship
  """
  member_epoch_pgives(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): [member_epoch_pgives!]!

  """
  An aggregate relationship
  """
  member_epoch_pgives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): member_epoch_pgives_aggregate!

  """
  fetch data from the table: "member_epoch_pgives" using primary key columns
  """
  member_epoch_pgives_by_pk(id: Int!): member_epoch_pgives

  """
  An array relationship
  """
  mutes(
    """
    distinct select on columns
    """
    distinct_on: [mutes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [mutes_order_by!]

    """
    filter the rows returned
    """
    where: mutes_bool_exp
  ): [mutes!]!

  """
  fetch data from the table: "mutes" using primary key columns
  """
  mutes_by_pk(profile_id: bigint!, target_profile_id: bigint!): mutes

  """
  fetch data from the table: "nft_collections"
  """
  nft_collections(
    """
    distinct select on columns
    """
    distinct_on: [nft_collections_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nft_collections_order_by!]

    """
    filter the rows returned
    """
    where: nft_collections_bool_exp
  ): [nft_collections!]!

  """
  fetch data from the table: "nft_holdings"
  """
  nft_holdings(
    """
    distinct select on columns
    """
    distinct_on: [nft_holdings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nft_holdings_order_by!]

    """
    filter the rows returned
    """
    where: nft_holdings_bool_exp
  ): [nft_holdings!]!

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!

  """
  fetch data from the table: "nominees" using primary key columns
  """
  nominees_by_pk(id: bigint!): nominees

  """
  fetch data from the table: "note_count"
  """
  note_count(
    """
    distinct select on columns
    """
    distinct_on: [note_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [note_count_order_by!]

    """
    filter the rows returned
    """
    where: note_count_bool_exp
  ): [note_count!]!

  """
  fetch data from the table: "notifications"
  """
  notifications(
    """
    distinct select on columns
    """
    distinct_on: [notifications_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notifications_order_by!]

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): [notifications!]!

  """
  fetch aggregated fields from the table: "notifications"
  """
  notifications_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [notifications_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notifications_order_by!]

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): notifications_aggregate!

  """
  fetch data from the table: "notifications" using primary key columns
  """
  notifications_by_pk(id: Int!): notifications

  """
  An array relationship
  """
  org_members(
    """
    distinct select on columns
    """
    distinct_on: [org_members_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [org_members_order_by!]

    """
    filter the rows returned
    """
    where: org_members_bool_exp
  ): [org_members!]!

  """
  fetch data from the table: "org_members" using primary key columns
  """
  org_members_by_pk(id: bigint!): org_members

  """
  fetch data from the table: "org_share_tokens"
  """
  org_share_tokens(
    """
    distinct select on columns
    """
    distinct_on: [org_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [org_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: org_share_tokens_bool_exp
  ): [org_share_tokens!]!

  """
  fetch data from the table: "org_share_tokens" using primary key columns
  """
  org_share_tokens_by_pk(org_id: bigint!, type: Int!): org_share_tokens

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch data from the table: "organizations" using primary key columns
  """
  organizations_by_pk(id: bigint!): organizations

  """
  fetch data from the table: "pending_gift_private"
  """
  pending_gift_private(
    """
    distinct select on columns
    """
    distinct_on: [pending_gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_gift_private_order_by!]

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): [pending_gift_private!]!

  """
  An array relationship
  """
  pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  fetch data from the table: "pending_token_gifts" using primary key columns
  """
  pending_token_gifts_by_pk(id: bigint!): pending_token_gifts

  """
  fetch data from the table: "pending_vault_transactions"
  """
  pending_vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [pending_vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): [pending_vault_transactions!]!

  """
  fetch data from the table: "pending_vault_transactions" using primary key columns
  """
  pending_vault_transactions_by_pk(tx_hash: String!): pending_vault_transactions

  """
  fetch data from the table: "poap_events"
  """
  poap_events(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch aggregated fields from the table: "poap_events"
  """
  poap_events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  fetch data from the table: "poap_events" using primary key columns
  """
  poap_events_by_pk(id: bigint!): poap_events

  """
  fetch data from the table: "poap_holders"
  """
  poap_holders(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch aggregated fields from the table: "poap_holders"
  """
  poap_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  fetch data from the table: "poap_holders" using primary key columns
  """
  poap_holders_by_pk(id: bigint!): poap_holders

  """
  An array relationship
  """
  private_stream_visibility(
    """
    distinct select on columns
    """
    distinct_on: [private_stream_visibility_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [private_stream_visibility_order_by!]

    """
    filter the rows returned
    """
    where: private_stream_visibility_bool_exp
  ): [private_stream_visibility!]!

  """
  fetch data from the table: "private_stream_visibility" using primary key columns
  """
  private_stream_visibility_by_pk(
    profile_id: bigint!
    view_profile_id: bigint!
  ): private_stream_visibility

  """
  An array relationship
  """
  profile_skills(
    """
    distinct select on columns
    """
    distinct_on: [profile_skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profile_skills_order_by!]

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  fetch data from the table: "profile_skills" using primary key columns
  """
  profile_skills_by_pk(profile_id: Int!, skill_name: citext!): profile_skills

  """
  fetch data from the table: "profiles"
  """
  profiles(
    """
    distinct select on columns
    """
    distinct_on: [profiles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_order_by!]

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): [profiles!]!

  """
  fetch data from the table: "profiles" using primary key columns
  """
  profiles_by_pk(id: bigint!): profiles

  """
  fetch data from the table: "profiles_private"
  """
  profiles_private(
    """
    distinct select on columns
    """
    distinct_on: [profiles_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_private_order_by!]

    """
    filter the rows returned
    """
    where: profiles_private_bool_exp
  ): [profiles_private!]!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  An aggregate relationship
  """
  reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): reactions_aggregate!

  """
  fetch data from the table: "reactions" using primary key columns
  """
  reactions_by_pk(id: bigint!): reactions

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  An aggregate relationship
  """
  replies_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): replies_aggregate!

  """
  fetch data from the table: "replies" using primary key columns
  """
  replies_by_pk(id: bigint!): replies

  """
  fetch data from the table: "replies_reactions"
  """
  replies_reactions(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  fetch aggregated fields from the table: "replies_reactions"
  """
  replies_reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): replies_reactions_aggregate!

  """
  fetch data from the table: "replies_reactions" using primary key columns
  """
  replies_reactions_by_pk(id: bigint!): replies_reactions

  """
  fetch data from the table: "reputation_scores"
  """
  reputation_scores(
    """
    distinct select on columns
    """
    distinct_on: [reputation_scores_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reputation_scores_order_by!]

    """
    filter the rows returned
    """
    where: reputation_scores_bool_exp
  ): [reputation_scores!]!

  """
  fetch data from the table: "reputation_scores" using primary key columns
  """
  reputation_scores_by_pk(profile_id: bigint!): reputation_scores

  """
  searchCosouls
  """
  searchCosouls(payload: SearchCosoulsInput!): SearchCosoulsOutput

  """
  searchProfiles
  """
  searchProfiles(payload: SearchProfilesInput!): [SearchProfilesOutput!]!

  """
  execute function "search_contributions" which returns "contributions"
  """
  search_contributions(
    """
    input parameters for function "search_contributions"
    """
    args: search_contributions_args!

    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  execute function "search_contributions" and query aggregates on result of table type "contributions"
  """
  search_contributions_aggregate(
    """
    input parameters for function "search_contributions_aggregate"
    """
    args: search_contributions_args!

    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  execute function "search_replies" which returns "replies"
  """
  search_replies(
    """
    input parameters for function "search_replies"
    """
    args: search_replies_args!

    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  execute function "search_replies" and query aggregates on result of table type "replies"
  """
  search_replies_aggregate(
    """
    input parameters for function "search_replies_aggregate"
    """
    args: search_replies_args!

    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): replies_aggregate!

  """
  fetch data from the table: "skills"
  """
  skills(
    """
    distinct select on columns
    """
    distinct_on: [skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [skills_order_by!]

    """
    filter the rows returned
    """
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch data from the table: "skills" using primary key columns
  """
  skills_by_pk(name: citext!): skills

  """
  An array relationship
  """
  teammates(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  fetch data from the table: "teammates" using primary key columns
  """
  teammates_by_pk(id: bigint!): teammates

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!

  """
  fetch data from the table: "token_gifts" using primary key columns
  """
  token_gifts_by_pk(id: bigint!): token_gifts

  """
  fetch data from the table: "twitter_accounts"
  """
  twitter_accounts(
    """
    distinct select on columns
    """
    distinct_on: [twitter_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [twitter_accounts_order_by!]

    """
    filter the rows returned
    """
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch data from the table: "twitter_accounts" using primary key columns
  """
  twitter_accounts_by_pk(profile_id: Int!): twitter_accounts

  """
  fetch data from the table: "user_private"
  """
  user_private(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): [user_private!]!

  """
  fetch aggregated fields from the table: "user_private"
  """
  user_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): user_private_aggregate!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: bigint!): users

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  fetch data from the table: "vault_transactions" using primary key columns
  """
  vault_transactions_by_pk(id: bigint!): vault_transactions

  """
  fetch data from the table: "vault_tx_types"
  """
  vault_tx_types(
    """
    distinct select on columns
    """
    distinct_on: [vault_tx_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_tx_types_order_by!]

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): [vault_tx_types!]!

  """
  fetch data from the table: "vault_tx_types" using primary key columns
  """
  vault_tx_types_by_pk(value: String!): vault_tx_types

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  fetch data from the table: "vaults" using primary key columns
  """
  vaults_by_pk(id: bigint!): vaults

  """
  execute function "vector_search_poap_events" which returns "poap_events"
  """
  vector_search_poap_events(
    """
    input parameters for function "vector_search_poap_events"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  execute function "vector_search_poap_events" and query aggregates on result of table type "poap_events"
  """
  vector_search_poap_events_aggregate(
    """
    input parameters for function "vector_search_poap_events_aggregate"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  execute function "vector_search_poap_holders" which returns "poap_holders"
  """
  vector_search_poap_holders(
    """
    input parameters for function "vector_search_poap_holders"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  execute function "vector_search_poap_holders" and query aggregates on result of table type "poap_holders"
  """
  vector_search_poap_holders_aggregate(
    """
    input parameters for function "vector_search_poap_holders_aggregate"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  An array relationship
  """
  vouches(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  fetch data from the table: "vouches" using primary key columns
  """
  vouches_by_pk(id: bigint!): vouches
}

"""
columns and relationships of "reactions"
"""
type reactions {
  """
  An object relationship
  """
  activity: activities
  activity_id: Int!
  created_at: timestamptz!
  id: bigint!

  """
  An object relationship
  """
  profile: profiles
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public
  reaction: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "reactions"
"""
type reactions_aggregate {
  aggregate: reactions_aggregate_fields
  nodes: [reactions!]!
}

input reactions_aggregate_bool_exp {
  count: reactions_aggregate_bool_exp_count
}

input reactions_aggregate_bool_exp_count {
  arguments: [reactions_select_column!]
  distinct: Boolean
  filter: reactions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "reactions"
"""
type reactions_aggregate_fields {
  avg: reactions_avg_fields
  count(columns: [reactions_select_column!], distinct: Boolean): Int!
  max: reactions_max_fields
  min: reactions_min_fields
  stddev: reactions_stddev_fields
  stddev_pop: reactions_stddev_pop_fields
  stddev_samp: reactions_stddev_samp_fields
  sum: reactions_sum_fields
  var_pop: reactions_var_pop_fields
  var_samp: reactions_var_samp_fields
  variance: reactions_variance_fields
}

"""
order by aggregate values of table "reactions"
"""
input reactions_aggregate_order_by {
  avg: reactions_avg_order_by
  count: order_by
  max: reactions_max_order_by
  min: reactions_min_order_by
  stddev: reactions_stddev_order_by
  stddev_pop: reactions_stddev_pop_order_by
  stddev_samp: reactions_stddev_samp_order_by
  sum: reactions_sum_order_by
  var_pop: reactions_var_pop_order_by
  var_samp: reactions_var_samp_order_by
  variance: reactions_variance_order_by
}

"""
aggregate avg on columns
"""
type reactions_avg_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by avg() on columns of table "reactions"
"""
input reactions_avg_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "reactions". All fields are combined with a logical 'AND'.
"""
input reactions_bool_exp {
  _and: [reactions_bool_exp!]
  _not: reactions_bool_exp
  _or: [reactions_bool_exp!]
  activity: activities_bool_exp
  activity_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  profile: profiles_bool_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  reaction: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "reactions"
"""
enum reactions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  reactions_pkey

  """
  unique or primary key constraint on columns "profile_id", "activity_id", "reaction"
  """
  reactions_profile_id_activity_id_reaction_key
}

"""
input type for inserting data into table "reactions"
"""
input reactions_insert_input {
  activity_id: Int
  reaction: String
}

"""
aggregate max on columns
"""
type reactions_max_fields {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "reactions"
"""
input reactions_max_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type reactions_min_fields {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "reactions"
"""
input reactions_min_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "reactions"
"""
type reactions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [reactions!]!
}

"""
on_conflict condition type for table "reactions"
"""
input reactions_on_conflict {
  constraint: reactions_constraint!
  update_columns: [reactions_update_column!]! = []
  where: reactions_bool_exp
}

"""
Ordering options when selecting data from "reactions".
"""
input reactions_order_by {
  activity: activities_order_by
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile: profiles_order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reaction: order_by
  updated_at: order_by
}

"""
select columns of table "reactions"
"""
enum reactions_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reaction

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type reactions_stddev_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by stddev() on columns of table "reactions"
"""
input reactions_stddev_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type reactions_stddev_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by stddev_pop() on columns of table "reactions"
"""
input reactions_stddev_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type reactions_stddev_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by stddev_samp() on columns of table "reactions"
"""
input reactions_stddev_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "reactions"
"""
input reactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reactions_stream_cursor_value_input {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type reactions_sum_fields {
  activity_id: Int
  id: bigint
  profile_id: Int
}

"""
order by sum() on columns of table "reactions"
"""
input reactions_sum_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
placeholder for update columns of table "reactions" (current role has no relevant permissions)
"""
enum reactions_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
aggregate var_pop on columns
"""
type reactions_var_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by var_pop() on columns of table "reactions"
"""
input reactions_var_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type reactions_var_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by var_samp() on columns of table "reactions"
"""
input reactions_var_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate variance on columns
"""
type reactions_variance_fields {
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by variance() on columns of table "reactions"
"""
input reactions_variance_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Replies to activity items
"""
type replies {
  """
  An object relationship
  """
  activity: activities!
  activity_actor_id: Int!
  activity_id: Int!
  created_at: timestamptz!
  deleted_at: timestamptz
  id: bigint!

  """
  An object relationship
  """
  private_stream_visibility: private_stream_visibility

  """
  An object relationship
  """
  profile: profiles!
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  An aggregate relationship
  """
  reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): replies_reactions_aggregate!
  reply: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "replies"
"""
type replies_aggregate {
  aggregate: replies_aggregate_fields
  nodes: [replies!]!
}

input replies_aggregate_bool_exp {
  count: replies_aggregate_bool_exp_count
}

input replies_aggregate_bool_exp_count {
  arguments: [replies_select_column!]
  distinct: Boolean
  filter: replies_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "replies"
"""
type replies_aggregate_fields {
  avg: replies_avg_fields
  count(columns: [replies_select_column!], distinct: Boolean): Int!
  max: replies_max_fields
  min: replies_min_fields
  stddev: replies_stddev_fields
  stddev_pop: replies_stddev_pop_fields
  stddev_samp: replies_stddev_samp_fields
  sum: replies_sum_fields
  var_pop: replies_var_pop_fields
  var_samp: replies_var_samp_fields
  variance: replies_variance_fields
}

"""
order by aggregate values of table "replies"
"""
input replies_aggregate_order_by {
  avg: replies_avg_order_by
  count: order_by
  max: replies_max_order_by
  min: replies_min_order_by
  stddev: replies_stddev_order_by
  stddev_pop: replies_stddev_pop_order_by
  stddev_samp: replies_stddev_samp_order_by
  sum: replies_sum_order_by
  var_pop: replies_var_pop_order_by
  var_samp: replies_var_samp_order_by
  variance: replies_variance_order_by
}

"""
aggregate avg on columns
"""
type replies_avg_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by avg() on columns of table "replies"
"""
input replies_avg_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Boolean expression to filter rows from the table "replies". All fields are combined with a logical 'AND'.
"""
input replies_bool_exp {
  _and: [replies_bool_exp!]
  _not: replies_bool_exp
  _or: [replies_bool_exp!]
  activity: activities_bool_exp
  activity_actor_id: Int_comparison_exp
  activity_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  private_stream_visibility: private_stream_visibility_bool_exp
  profile: profiles_bool_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  reactions: replies_reactions_bool_exp
  reactions_aggregate: replies_reactions_aggregate_bool_exp
  reply: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "replies"
"""
enum replies_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  replies_pkey
}

"""
input type for inserting data into table "replies"
"""
input replies_insert_input {
  activity_actor_id: Int
  activity_id: Int
  reactions: replies_reactions_arr_rel_insert_input
  reply: String
}

"""
aggregate max on columns
"""
type replies_max_fields {
  activity_actor_id: Int
  activity_id: Int
  created_at: timestamptz
  deleted_at: timestamptz
  id: bigint
  profile_id: Int
  reply: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "replies"
"""
input replies_max_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  profile_id: order_by
  reply: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type replies_min_fields {
  activity_actor_id: Int
  activity_id: Int
  created_at: timestamptz
  deleted_at: timestamptz
  id: bigint
  profile_id: Int
  reply: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "replies"
"""
input replies_min_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  profile_id: order_by
  reply: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "replies"
"""
type replies_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [replies!]!
}

"""
input type for inserting object relation for remote table "replies"
"""
input replies_obj_rel_insert_input {
  data: replies_insert_input!

  """
  upsert condition
  """
  on_conflict: replies_on_conflict
}

"""
on_conflict condition type for table "replies"
"""
input replies_on_conflict {
  constraint: replies_constraint!
  update_columns: [replies_update_column!]! = []
  where: replies_bool_exp
}

"""
Ordering options when selecting data from "replies".
"""
input replies_order_by {
  activity: activities_order_by
  activity_actor_id: order_by
  activity_id: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  private_stream_visibility: private_stream_visibility_order_by
  profile: profiles_order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reactions_aggregate: replies_reactions_aggregate_order_by
  reply: order_by
  updated_at: order_by
}

"""
primary key columns input for table: replies
"""
input replies_pk_columns_input {
  id: bigint!
}

"""
columns and relationships of "replies_reactions"
"""
type replies_reactions {
  """
  An object relationship
  """
  activity: activities
  activity_id: Int!
  created_at: timestamptz!
  id: bigint!

  """
  An object relationship
  """
  profile: profiles
  profile_id: Int!

  """
  An object relationship
  """
  profile_public: profiles_public
  reaction: String!

  """
  An object relationship
  """
  reply: replies
  reply_id: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "replies_reactions"
"""
type replies_reactions_aggregate {
  aggregate: replies_reactions_aggregate_fields
  nodes: [replies_reactions!]!
}

input replies_reactions_aggregate_bool_exp {
  count: replies_reactions_aggregate_bool_exp_count
}

input replies_reactions_aggregate_bool_exp_count {
  arguments: [replies_reactions_select_column!]
  distinct: Boolean
  filter: replies_reactions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "replies_reactions"
"""
type replies_reactions_aggregate_fields {
  avg: replies_reactions_avg_fields
  count(columns: [replies_reactions_select_column!], distinct: Boolean): Int!
  max: replies_reactions_max_fields
  min: replies_reactions_min_fields
  stddev: replies_reactions_stddev_fields
  stddev_pop: replies_reactions_stddev_pop_fields
  stddev_samp: replies_reactions_stddev_samp_fields
  sum: replies_reactions_sum_fields
  var_pop: replies_reactions_var_pop_fields
  var_samp: replies_reactions_var_samp_fields
  variance: replies_reactions_variance_fields
}

"""
order by aggregate values of table "replies_reactions"
"""
input replies_reactions_aggregate_order_by {
  avg: replies_reactions_avg_order_by
  count: order_by
  max: replies_reactions_max_order_by
  min: replies_reactions_min_order_by
  stddev: replies_reactions_stddev_order_by
  stddev_pop: replies_reactions_stddev_pop_order_by
  stddev_samp: replies_reactions_stddev_samp_order_by
  sum: replies_reactions_sum_order_by
  var_pop: replies_reactions_var_pop_order_by
  var_samp: replies_reactions_var_samp_order_by
  variance: replies_reactions_variance_order_by
}

"""
input type for inserting array relation for remote table "replies_reactions"
"""
input replies_reactions_arr_rel_insert_input {
  data: [replies_reactions_insert_input!]!

  """
  upsert condition
  """
  on_conflict: replies_reactions_on_conflict
}

"""
aggregate avg on columns
"""
type replies_reactions_avg_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by avg() on columns of table "replies_reactions"
"""
input replies_reactions_avg_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
Boolean expression to filter rows from the table "replies_reactions". All fields are combined with a logical 'AND'.
"""
input replies_reactions_bool_exp {
  _and: [replies_reactions_bool_exp!]
  _not: replies_reactions_bool_exp
  _or: [replies_reactions_bool_exp!]
  activity: activities_bool_exp
  activity_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  profile: profiles_bool_exp
  profile_id: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  reaction: String_comparison_exp
  reply: replies_bool_exp
  reply_id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "replies_reactions"
"""
enum replies_reactions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  replies_reactions_pkey

  """
  unique or primary key constraint on columns "reply_id", "profile_id", "reaction"
  """
  replies_reactions_profile_id_reply_id_reaction_key
}

"""
input type for inserting data into table "replies_reactions"
"""
input replies_reactions_insert_input {
  activity_id: Int
  reaction: String
  reply: replies_obj_rel_insert_input
  reply_id: Int
}

"""
aggregate max on columns
"""
type replies_reactions_max_fields {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  reply_id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "replies_reactions"
"""
input replies_reactions_max_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  reply_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type replies_reactions_min_fields {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  reply_id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "replies_reactions"
"""
input replies_reactions_min_order_by {
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile_id: order_by
  reaction: order_by
  reply_id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "replies_reactions"
"""
type replies_reactions_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [replies_reactions!]!
}

"""
on_conflict condition type for table "replies_reactions"
"""
input replies_reactions_on_conflict {
  constraint: replies_reactions_constraint!
  update_columns: [replies_reactions_update_column!]! = []
  where: replies_reactions_bool_exp
}

"""
Ordering options when selecting data from "replies_reactions".
"""
input replies_reactions_order_by {
  activity: activities_order_by
  activity_id: order_by
  created_at: order_by
  id: order_by
  profile: profiles_order_by
  profile_id: order_by
  profile_public: profiles_public_order_by
  reaction: order_by
  reply: replies_order_by
  reply_id: order_by
  updated_at: order_by
}

"""
select columns of table "replies_reactions"
"""
enum replies_reactions_select_column {
  """
  column name
  """
  activity_id

  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reaction

  """
  column name
  """
  reply_id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type replies_reactions_stddev_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by stddev() on columns of table "replies_reactions"
"""
input replies_reactions_stddev_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type replies_reactions_stddev_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by stddev_pop() on columns of table "replies_reactions"
"""
input replies_reactions_stddev_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type replies_reactions_stddev_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by stddev_samp() on columns of table "replies_reactions"
"""
input replies_reactions_stddev_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
Streaming cursor of the table "replies_reactions"
"""
input replies_reactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: replies_reactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input replies_reactions_stream_cursor_value_input {
  activity_id: Int
  created_at: timestamptz
  id: bigint
  profile_id: Int
  reaction: String
  reply_id: Int
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type replies_reactions_sum_fields {
  activity_id: Int
  id: bigint
  profile_id: Int
  reply_id: Int
}

"""
order by sum() on columns of table "replies_reactions"
"""
input replies_reactions_sum_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
placeholder for update columns of table "replies_reactions" (current role has no relevant permissions)
"""
enum replies_reactions_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

"""
aggregate var_pop on columns
"""
type replies_reactions_var_pop_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by var_pop() on columns of table "replies_reactions"
"""
input replies_reactions_var_pop_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
aggregate var_samp on columns
"""
type replies_reactions_var_samp_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by var_samp() on columns of table "replies_reactions"
"""
input replies_reactions_var_samp_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
aggregate variance on columns
"""
type replies_reactions_variance_fields {
  activity_id: Float
  id: Float
  profile_id: Float
  reply_id: Float
}

"""
order by variance() on columns of table "replies_reactions"
"""
input replies_reactions_variance_order_by {
  activity_id: order_by
  id: order_by
  profile_id: order_by
  reply_id: order_by
}

"""
select columns of table "replies"
"""
enum replies_select_column {
  """
  column name
  """
  activity_actor_id

  """
  column name
  """
  activity_id

  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  id

  """
  column name
  """
  profile_id

  """
  column name
  """
  reply

  """
  column name
  """
  updated_at
}

"""
input type for updating data in table "replies"
"""
input replies_set_input {
  deleted_at: timestamptz
}

"""
aggregate stddev on columns
"""
type replies_stddev_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by stddev() on columns of table "replies"
"""
input replies_stddev_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type replies_stddev_pop_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by stddev_pop() on columns of table "replies"
"""
input replies_stddev_pop_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type replies_stddev_samp_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by stddev_samp() on columns of table "replies"
"""
input replies_stddev_samp_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
Streaming cursor of the table "replies"
"""
input replies_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: replies_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input replies_stream_cursor_value_input {
  activity_actor_id: Int
  activity_id: Int
  created_at: timestamptz
  deleted_at: timestamptz
  id: bigint
  profile_id: Int
  reply: String
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type replies_sum_fields {
  activity_actor_id: Int
  activity_id: Int
  id: bigint
  profile_id: Int
}

"""
order by sum() on columns of table "replies"
"""
input replies_sum_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
update columns of table "replies"
"""
enum replies_update_column {
  """
  column name
  """
  deleted_at
}

input replies_updates {
  """
  sets the columns of the filtered rows to the given values
  """
  _set: replies_set_input

  """
  filter the rows which have to be updated
  """
  where: replies_bool_exp!
}

"""
aggregate var_pop on columns
"""
type replies_var_pop_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by var_pop() on columns of table "replies"
"""
input replies_var_pop_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate var_samp on columns
"""
type replies_var_samp_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by var_samp() on columns of table "replies"
"""
input replies_var_samp_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
aggregate variance on columns
"""
type replies_variance_fields {
  activity_actor_id: Float
  activity_id: Float
  id: Float
  profile_id: Float
}

"""
order by variance() on columns of table "replies"
"""
input replies_variance_order_by {
  activity_actor_id: order_by
  activity_id: order_by
  id: order_by
  profile_id: order_by
}

"""
columns and relationships of "reputation_scores"
"""
type reputation_scores {
  colinks_engagement_score: Int
  created_at: timestamptz
  email_score: Int!
  farcaster_score: Int!
  github_score: Int!
  invite_score: Int!
  linkedin_score: Int!
  links_score: Int!
  pgive_score: Int!
  poap_score: Int!
  profile_id: bigint!
  social_give_score: Int!
  total_score: Int!
  twitter_score: Int!
  updated_at: timestamptz
}

"""
Boolean expression to filter rows from the table "reputation_scores". All fields are combined with a logical 'AND'.
"""
input reputation_scores_bool_exp {
  _and: [reputation_scores_bool_exp!]
  _not: reputation_scores_bool_exp
  _or: [reputation_scores_bool_exp!]
  colinks_engagement_score: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  email_score: Int_comparison_exp
  farcaster_score: Int_comparison_exp
  github_score: Int_comparison_exp
  invite_score: Int_comparison_exp
  linkedin_score: Int_comparison_exp
  links_score: Int_comparison_exp
  pgive_score: Int_comparison_exp
  poap_score: Int_comparison_exp
  profile_id: bigint_comparison_exp
  social_give_score: Int_comparison_exp
  total_score: Int_comparison_exp
  twitter_score: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
Ordering options when selecting data from "reputation_scores".
"""
input reputation_scores_order_by {
  colinks_engagement_score: order_by
  created_at: order_by
  email_score: order_by
  farcaster_score: order_by
  github_score: order_by
  invite_score: order_by
  linkedin_score: order_by
  links_score: order_by
  pgive_score: order_by
  poap_score: order_by
  profile_id: order_by
  social_give_score: order_by
  total_score: order_by
  twitter_score: order_by
  updated_at: order_by
}

"""
select columns of table "reputation_scores"
"""
enum reputation_scores_select_column {
  """
  column name
  """
  colinks_engagement_score

  """
  column name
  """
  created_at

  """
  column name
  """
  email_score

  """
  column name
  """
  farcaster_score

  """
  column name
  """
  github_score

  """
  column name
  """
  invite_score

  """
  column name
  """
  linkedin_score

  """
  column name
  """
  links_score

  """
  column name
  """
  pgive_score

  """
  column name
  """
  poap_score

  """
  column name
  """
  profile_id

  """
  column name
  """
  social_give_score

  """
  column name
  """
  total_score

  """
  column name
  """
  twitter_score

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "reputation_scores"
"""
input reputation_scores_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: reputation_scores_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input reputation_scores_stream_cursor_value_input {
  colinks_engagement_score: Int
  created_at: timestamptz
  email_score: Int
  farcaster_score: Int
  github_score: Int
  invite_score: Int
  linkedin_score: Int
  links_score: Int
  pgive_score: Int
  poap_score: Int
  profile_id: bigint
  social_give_score: Int
  total_score: Int
  twitter_score: Int
  updated_at: timestamptz
}

input search_contributions_args {
  result_limit: Int
  search: String
}

input search_replies_args {
  search: String
}

"""
columns and relationships of "skills"
"""
type skills {
  count: Int!
  created_at: timestamptz!
  hidden: Boolean!
  name: citext!

  """
  An object relationship
  """
  profile_skills: profile_skills
  updated_at: timestamptz!
}

"""
Boolean expression to filter rows from the table "skills". All fields are combined with a logical 'AND'.
"""
input skills_bool_exp {
  _and: [skills_bool_exp!]
  _not: skills_bool_exp
  _or: [skills_bool_exp!]
  count: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  hidden: Boolean_comparison_exp
  name: citext_comparison_exp
  profile_skills: profile_skills_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "skills"
"""
enum skills_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  skills_pkey
}

"""
input type for inserting data into table "skills"
"""
input skills_insert_input {
  name: citext
  profile_skills: profile_skills_obj_rel_insert_input
}

"""
response of any mutation on the table "skills"
"""
type skills_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [skills!]!
}

"""
input type for inserting object relation for remote table "skills"
"""
input skills_obj_rel_insert_input {
  data: skills_insert_input!

  """
  upsert condition
  """
  on_conflict: skills_on_conflict
}

"""
on_conflict condition type for table "skills"
"""
input skills_on_conflict {
  constraint: skills_constraint!
  update_columns: [skills_update_column!]! = []
  where: skills_bool_exp
}

"""
Ordering options when selecting data from "skills".
"""
input skills_order_by {
  count: order_by
  created_at: order_by
  hidden: order_by
  name: order_by
  profile_skills: profile_skills_order_by
  updated_at: order_by
}

"""
select columns of table "skills"
"""
enum skills_select_column {
  """
  column name
  """
  count

  """
  column name
  """
  created_at

  """
  column name
  """
  hidden

  """
  column name
  """
  name

  """
  column name
  """
  updated_at
}

"""
Streaming cursor of the table "skills"
"""
input skills_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: skills_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input skills_stream_cursor_value_input {
  count: Int
  created_at: timestamptz
  hidden: Boolean
  name: citext
  updated_at: timestamptz
}

"""
placeholder for update columns of table "skills" (current role has no relevant permissions)
"""
enum skills_update_column {
  """
  placeholder (do not use)
  """
  _PLACEHOLDER
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_array_comparison_exp {
  """
  is the array contained in the given array value
  """
  _contained_in: [smallint!]

  """
  does the array contain the given value
  """
  _contains: [smallint!]
  _eq: [smallint!]
  _gt: [smallint!]
  _gte: [smallint!]
  _in: [[smallint!]!]
  _is_null: Boolean
  _lt: [smallint!]
  _lte: [smallint!]
  _neq: [smallint!]
  _nin: [[smallint!]!]
}

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

type subscription_root {
  """
  An array relationship
  """
  activities(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  An aggregate relationship
  """
  activities_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [activities_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [activities_order_by!]

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): activities_aggregate!

  """
  fetch data from the table: "activities" using primary key columns
  """
  activities_by_pk(id: bigint!): activities

  """
  fetch data from the table in a streaming manner: "activities"
  """
  activities_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [activities_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: activities_bool_exp
  ): [activities!]!

  """
  fetch data from the table: "big_questions"
  """
  big_questions(
    """
    distinct select on columns
    """
    distinct_on: [big_questions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [big_questions_order_by!]

    """
    filter the rows returned
    """
    where: big_questions_bool_exp
  ): [big_questions!]!

  """
  fetch data from the table: "big_questions" using primary key columns
  """
  big_questions_by_pk(id: bigint!): big_questions

  """
  fetch data from the table in a streaming manner: "big_questions"
  """
  big_questions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [big_questions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: big_questions_bool_exp
  ): [big_questions!]!

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  fetch data from the table: "burns" using primary key columns
  """
  burns_by_pk(id: bigint!): burns

  """
  fetch data from the table in a streaming manner: "burns"
  """
  burns_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [burns_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An array relationship
  """
  circle_api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  fetch data from the table: "circle_api_keys" using primary key columns
  """
  circle_api_keys_by_pk(hash: String!): circle_api_keys

  """
  fetch data from the table in a streaming manner: "circle_api_keys"
  """
  circle_api_keys_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_api_keys_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!

  """
  fetch data from the table: "circle_integrations"
  """
  circle_integrations(
    """
    distinct select on columns
    """
    distinct_on: [circle_integrations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_integrations_order_by!]

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  fetch data from the table: "circle_integrations" using primary key columns
  """
  circle_integrations_by_pk(id: bigint!): circle_integrations

  """
  fetch data from the table in a streaming manner: "circle_integrations"
  """
  circle_integrations_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_integrations_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_integrations_bool_exp
  ): [circle_integrations!]!

  """
  fetch data from the table: "circle_private"
  """
  circle_private(
    """
    distinct select on columns
    """
    distinct_on: [circle_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_private_order_by!]

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): [circle_private!]!

  """
  fetch data from the table in a streaming manner: "circle_private"
  """
  circle_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_private_bool_exp
  ): [circle_private!]!

  """
  fetch data from the table: "circle_share_tokens"
  """
  circle_share_tokens(
    """
    distinct select on columns
    """
    distinct_on: [circle_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): [circle_share_tokens!]!

  """
  fetch data from the table: "circle_share_tokens" using primary key columns
  """
  circle_share_tokens_by_pk(circle_id: bigint!, type: Int!): circle_share_tokens

  """
  fetch data from the table in a streaming manner: "circle_share_tokens"
  """
  circle_share_tokens_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circle_share_tokens_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circle_share_tokens_bool_exp
  ): [circle_share_tokens!]!

  """
  An array relationship
  """
  circles(
    """
    distinct select on columns
    """
    distinct_on: [circles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circles_order_by!]

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  fetch data from the table: "circles" using primary key columns
  """
  circles_by_pk(id: bigint!): circles

  """
  fetch data from the table in a streaming manner: "circles"
  """
  circles_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [circles_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: circles_bool_exp
  ): [circles!]!

  """
  An array relationship
  """
  claims(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An aggregate relationship
  """
  claims_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [claims_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [claims_order_by!]

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): claims_aggregate!

  """
  fetch data from the table: "claims" using primary key columns
  """
  claims_by_pk(id: bigint!): claims

  """
  fetch data from the table in a streaming manner: "claims"
  """
  claims_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [claims_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: claims_bool_exp
  ): [claims!]!

  """
  An array relationship
  """
  colinks_gives(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  An aggregate relationship
  """
  colinks_gives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [colinks_gives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [colinks_gives_order_by!]

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): colinks_gives_aggregate!

  """
  fetch data from the table: "colinks_gives" using primary key columns
  """
  colinks_gives_by_pk(id: Int!): colinks_gives

  """
  fetch data from the table in a streaming manner: "colinks_gives"
  """
  colinks_gives_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [colinks_gives_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: colinks_gives_bool_exp
  ): [colinks_gives!]!

  """
  fetch data from the table: "contribution_count"
  """
  contribution_count(
    """
    distinct select on columns
    """
    distinct_on: [contribution_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contribution_count_order_by!]

    """
    filter the rows returned
    """
    where: contribution_count_bool_exp
  ): [contribution_count!]!

  """
  fetch data from the table in a streaming manner: "contribution_count"
  """
  contribution_count_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [contribution_count_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: contribution_count_bool_exp
  ): [contribution_count!]!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  fetch data from the table: "contributions" using primary key columns
  """
  contributions_by_pk(id: bigint!): contributions

  """
  fetch data from the table in a streaming manner: "contributions"
  """
  contributions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [contributions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  fetch data from the table in a streaming manner: "cosouls"
  """
  cosouls_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [cosouls_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!

  """
  fetch data from the table: "distributions" using primary key columns
  """
  distributions_by_pk(id: bigint!): distributions

  """
  fetch data from the table in a streaming manner: "distributions"
  """
  distributions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [distributions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An array relationship
  """
  emails(
    """
    distinct select on columns
    """
    distinct_on: [emails_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [emails_order_by!]

    """
    filter the rows returned
    """
    where: emails_bool_exp
  ): [emails!]!

  """
  fetch data from the table in a streaming manner: "emails"
  """
  emails_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [emails_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: emails_bool_exp
  ): [emails!]!

  """
  fetch data from the table: "enriched_casts"
  """
  enriched_casts(
    """
    distinct select on columns
    """
    distinct_on: [enriched_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [enriched_casts_order_by!]

    """
    filter the rows returned
    """
    where: enriched_casts_bool_exp
  ): [enriched_casts!]!

  """
  fetch data from the table: "enriched_casts" using primary key columns
  """
  enriched_casts_by_pk(id: bigint!): enriched_casts

  """
  fetch data from the table in a streaming manner: "enriched_casts"
  """
  enriched_casts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [enriched_casts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: enriched_casts_bool_exp
  ): [enriched_casts!]!

  """
  fetch data from the table: "epoch_pgive_data"
  """
  epoch_pgive_data(
    """
    distinct select on columns
    """
    distinct_on: [epoch_pgive_data_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epoch_pgive_data_order_by!]

    """
    filter the rows returned
    """
    where: epoch_pgive_data_bool_exp
  ): [epoch_pgive_data!]!

  """
  fetch data from the table: "epoch_pgive_data" using primary key columns
  """
  epoch_pgive_data_by_pk(id: Int!): epoch_pgive_data

  """
  fetch data from the table in a streaming manner: "epoch_pgive_data"
  """
  epoch_pgive_data_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [epoch_pgive_data_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: epoch_pgive_data_bool_exp
  ): [epoch_pgive_data!]!

  """
  An array relationship
  """
  epochs(
    """
    distinct select on columns
    """
    distinct_on: [epochs_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [epochs_order_by!]

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  fetch data from the table: "epoches" using primary key columns
  """
  epochs_by_pk(id: bigint!): epochs

  """
  fetch data from the table in a streaming manner: "epoches"
  """
  epochs_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [epochs_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: epochs_bool_exp
  ): [epochs!]!

  """
  fetch data from the table: "farcaster_accounts"
  """
  farcaster_accounts(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_accounts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_accounts_bool_exp
  ): [farcaster_accounts!]!

  """
  fetch data from the table: "farcaster_accounts" using primary key columns
  """
  farcaster_accounts_by_pk(profile_id: bigint!): farcaster_accounts

  """
  fetch data from the table in a streaming manner: "farcaster_accounts"
  """
  farcaster_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [farcaster_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: farcaster_accounts_bool_exp
  ): [farcaster_accounts!]!

  """
  fetch data from the table: "farcaster.casts"
  """
  farcaster_casts(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): [farcaster_casts!]!

  """
  fetch aggregated fields from the table: "farcaster.casts"
  """
  farcaster_casts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_casts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_casts_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): farcaster_casts_aggregate!

  """
  fetch data from the table: "farcaster.casts" using primary key columns
  """
  farcaster_casts_by_pk(id: bigint!): farcaster_casts

  """
  fetch data from the table in a streaming manner: "farcaster.casts"
  """
  farcaster_casts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [farcaster_casts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: farcaster_casts_bool_exp
  ): [farcaster_casts!]!

  """
  fetch data from the table: "farcaster.reactions"
  """
  farcaster_reactions(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): [farcaster_reactions!]!

  """
  fetch aggregated fields from the table: "farcaster.reactions"
  """
  farcaster_reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [farcaster_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [farcaster_reactions_order_by!]

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): farcaster_reactions_aggregate!

  """
  fetch data from the table: "farcaster.reactions" using primary key columns
  """
  farcaster_reactions_by_pk(id: bigint!): farcaster_reactions

  """
  fetch data from the table in a streaming manner: "farcaster.reactions"
  """
  farcaster_reactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [farcaster_reactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: farcaster_reactions_bool_exp
  ): [farcaster_reactions!]!

  """
  fetch data from the table: "gift_private"
  """
  gift_private(
    """
    distinct select on columns
    """
    distinct_on: [gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [gift_private_order_by!]

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): [gift_private!]!

  """
  fetch data from the table in a streaming manner: "gift_private"
  """
  gift_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [gift_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: gift_private_bool_exp
  ): [gift_private!]!

  """
  fetch data from the table: "github_accounts"
  """
  github_accounts(
    """
    distinct select on columns
    """
    distinct_on: [github_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [github_accounts_order_by!]

    """
    filter the rows returned
    """
    where: github_accounts_bool_exp
  ): [github_accounts!]!

  """
  fetch data from the table: "github_accounts" using primary key columns
  """
  github_accounts_by_pk(profile_id: bigint!): github_accounts

  """
  fetch data from the table in a streaming manner: "github_accounts"
  """
  github_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [github_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: github_accounts_bool_exp
  ): [github_accounts!]!

  """
  An array relationship
  """
  histories(
    """
    distinct select on columns
    """
    distinct_on: [histories_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [histories_order_by!]

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!

  """
  fetch data from the table: "histories" using primary key columns
  """
  histories_by_pk(id: bigint!): histories

  """
  fetch data from the table in a streaming manner: "histories"
  """
  histories_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [histories_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: histories_bool_exp
  ): [histories!]!

  """
  An array relationship
  """
  invite_codes(
    """
    distinct select on columns
    """
    distinct_on: [invite_codes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [invite_codes_order_by!]

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): [invite_codes!]!

  """
  An aggregate relationship
  """
  invite_codes_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [invite_codes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [invite_codes_order_by!]

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): invite_codes_aggregate!

  """
  fetch data from the table: "invite_codes" using primary key columns
  """
  invite_codes_by_pk(code: citext!): invite_codes

  """
  fetch data from the table in a streaming manner: "invite_codes"
  """
  invite_codes_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [invite_codes_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: invite_codes_bool_exp
  ): [invite_codes!]!

  """
  An array relationship
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  fetch data from the table: "link_holders" using primary key columns
  """
  link_holders_by_pk(holder: citext!, target: citext!): link_holders

  """
  fetch data from the table in a streaming manner: "link_holders"
  """
  link_holders_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [link_holders_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  fetch data from the table: "link_tx"
  """
  link_tx(
    """
    distinct select on columns
    """
    distinct_on: [link_tx_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_tx_order_by!]

    """
    filter the rows returned
    """
    where: link_tx_bool_exp
  ): [link_tx!]!

  """
  fetch data from the table: "link_tx" using primary key columns
  """
  link_tx_by_pk(tx_hash: citext!): link_tx

  """
  fetch data from the table in a streaming manner: "link_tx"
  """
  link_tx_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [link_tx_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: link_tx_bool_exp
  ): [link_tx!]!

  """
  fetch data from the table: "linkedin_accounts"
  """
  linkedin_accounts(
    """
    distinct select on columns
    """
    distinct_on: [linkedin_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [linkedin_accounts_order_by!]

    """
    filter the rows returned
    """
    where: linkedin_accounts_bool_exp
  ): [linkedin_accounts!]!

  """
  fetch data from the table: "linkedin_accounts" using primary key columns
  """
  linkedin_accounts_by_pk(profile_id: bigint!): linkedin_accounts

  """
  fetch data from the table in a streaming manner: "linkedin_accounts"
  """
  linkedin_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [linkedin_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: linkedin_accounts_bool_exp
  ): [linkedin_accounts!]!

  """
  An array relationship
  """
  locked_token_distribution_gifts(
    """
    distinct select on columns
    """
    distinct_on: [locked_token_distribution_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [locked_token_distribution_gifts_order_by!]

    """
    filter the rows returned
    """
    where: locked_token_distribution_gifts_bool_exp
  ): [locked_token_distribution_gifts!]!

  """
  fetch data from the table: "locked_token_distribution_gifts" using primary key columns
  """
  locked_token_distribution_gifts_by_pk(
    id: bigint!
  ): locked_token_distribution_gifts

  """
  fetch data from the table in a streaming manner: "locked_token_distribution_gifts"
  """
  locked_token_distribution_gifts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [locked_token_distribution_gifts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: locked_token_distribution_gifts_bool_exp
  ): [locked_token_distribution_gifts!]!

  """
  fetch data from the table: "locked_token_distributions"
  """
  locked_token_distributions(
    """
    distinct select on columns
    """
    distinct_on: [locked_token_distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [locked_token_distributions_order_by!]

    """
    filter the rows returned
    """
    where: locked_token_distributions_bool_exp
  ): [locked_token_distributions!]!

  """
  fetch data from the table: "locked_token_distributions" using primary key columns
  """
  locked_token_distributions_by_pk(id: bigint!): locked_token_distributions

  """
  fetch data from the table in a streaming manner: "locked_token_distributions"
  """
  locked_token_distributions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [locked_token_distributions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: locked_token_distributions_bool_exp
  ): [locked_token_distributions!]!

  """
  fetch data from the table: "member_circle_pgives"
  """
  member_circle_pgives(
    """
    distinct select on columns
    """
    distinct_on: [member_circle_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_circle_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_circle_pgives_bool_exp
  ): [member_circle_pgives!]!

  """
  fetch data from the table in a streaming manner: "member_circle_pgives"
  """
  member_circle_pgives_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [member_circle_pgives_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: member_circle_pgives_bool_exp
  ): [member_circle_pgives!]!

  """
  An array relationship
  """
  member_epoch_pgives(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): [member_epoch_pgives!]!

  """
  An aggregate relationship
  """
  member_epoch_pgives_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): member_epoch_pgives_aggregate!

  """
  fetch data from the table: "member_epoch_pgives" using primary key columns
  """
  member_epoch_pgives_by_pk(id: Int!): member_epoch_pgives

  """
  fetch data from the table in a streaming manner: "member_epoch_pgives"
  """
  member_epoch_pgives_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [member_epoch_pgives_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): [member_epoch_pgives!]!

  """
  An array relationship
  """
  mutes(
    """
    distinct select on columns
    """
    distinct_on: [mutes_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [mutes_order_by!]

    """
    filter the rows returned
    """
    where: mutes_bool_exp
  ): [mutes!]!

  """
  fetch data from the table: "mutes" using primary key columns
  """
  mutes_by_pk(profile_id: bigint!, target_profile_id: bigint!): mutes

  """
  fetch data from the table in a streaming manner: "mutes"
  """
  mutes_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [mutes_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: mutes_bool_exp
  ): [mutes!]!

  """
  fetch data from the table: "nft_collections"
  """
  nft_collections(
    """
    distinct select on columns
    """
    distinct_on: [nft_collections_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nft_collections_order_by!]

    """
    filter the rows returned
    """
    where: nft_collections_bool_exp
  ): [nft_collections!]!

  """
  fetch data from the table in a streaming manner: "nft_collections"
  """
  nft_collections_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [nft_collections_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: nft_collections_bool_exp
  ): [nft_collections!]!

  """
  fetch data from the table: "nft_holdings"
  """
  nft_holdings(
    """
    distinct select on columns
    """
    distinct_on: [nft_holdings_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nft_holdings_order_by!]

    """
    filter the rows returned
    """
    where: nft_holdings_bool_exp
  ): [nft_holdings!]!

  """
  fetch data from the table in a streaming manner: "nft_holdings"
  """
  nft_holdings_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [nft_holdings_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: nft_holdings_bool_exp
  ): [nft_holdings!]!

  """
  An array relationship
  """
  nominees(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  An aggregate relationship
  """
  nominees_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [nominees_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [nominees_order_by!]

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): nominees_aggregate!

  """
  fetch data from the table: "nominees" using primary key columns
  """
  nominees_by_pk(id: bigint!): nominees

  """
  fetch data from the table in a streaming manner: "nominees"
  """
  nominees_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [nominees_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: nominees_bool_exp
  ): [nominees!]!

  """
  fetch data from the table: "note_count"
  """
  note_count(
    """
    distinct select on columns
    """
    distinct_on: [note_count_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [note_count_order_by!]

    """
    filter the rows returned
    """
    where: note_count_bool_exp
  ): [note_count!]!

  """
  fetch data from the table in a streaming manner: "note_count"
  """
  note_count_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [note_count_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: note_count_bool_exp
  ): [note_count!]!

  """
  fetch data from the table: "notifications"
  """
  notifications(
    """
    distinct select on columns
    """
    distinct_on: [notifications_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notifications_order_by!]

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): [notifications!]!

  """
  fetch aggregated fields from the table: "notifications"
  """
  notifications_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [notifications_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [notifications_order_by!]

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): notifications_aggregate!

  """
  fetch data from the table: "notifications" using primary key columns
  """
  notifications_by_pk(id: Int!): notifications

  """
  fetch data from the table in a streaming manner: "notifications"
  """
  notifications_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [notifications_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: notifications_bool_exp
  ): [notifications!]!

  """
  An array relationship
  """
  org_members(
    """
    distinct select on columns
    """
    distinct_on: [org_members_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [org_members_order_by!]

    """
    filter the rows returned
    """
    where: org_members_bool_exp
  ): [org_members!]!

  """
  fetch data from the table: "org_members" using primary key columns
  """
  org_members_by_pk(id: bigint!): org_members

  """
  fetch data from the table in a streaming manner: "org_members"
  """
  org_members_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [org_members_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: org_members_bool_exp
  ): [org_members!]!

  """
  fetch data from the table: "org_share_tokens"
  """
  org_share_tokens(
    """
    distinct select on columns
    """
    distinct_on: [org_share_tokens_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [org_share_tokens_order_by!]

    """
    filter the rows returned
    """
    where: org_share_tokens_bool_exp
  ): [org_share_tokens!]!

  """
  fetch data from the table: "org_share_tokens" using primary key columns
  """
  org_share_tokens_by_pk(org_id: bigint!, type: Int!): org_share_tokens

  """
  fetch data from the table in a streaming manner: "org_share_tokens"
  """
  org_share_tokens_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [org_share_tokens_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: org_share_tokens_bool_exp
  ): [org_share_tokens!]!

  """
  fetch data from the table: "organizations"
  """
  organizations(
    """
    distinct select on columns
    """
    distinct_on: [organizations_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [organizations_order_by!]

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch data from the table: "organizations" using primary key columns
  """
  organizations_by_pk(id: bigint!): organizations

  """
  fetch data from the table in a streaming manner: "organizations"
  """
  organizations_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [organizations_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: organizations_bool_exp
  ): [organizations!]!

  """
  fetch data from the table: "pending_gift_private"
  """
  pending_gift_private(
    """
    distinct select on columns
    """
    distinct_on: [pending_gift_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_gift_private_order_by!]

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): [pending_gift_private!]!

  """
  fetch data from the table in a streaming manner: "pending_gift_private"
  """
  pending_gift_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [pending_gift_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: pending_gift_private_bool_exp
  ): [pending_gift_private!]!

  """
  An array relationship
  """
  pending_token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  fetch data from the table: "pending_token_gifts" using primary key columns
  """
  pending_token_gifts_by_pk(id: bigint!): pending_token_gifts

  """
  fetch data from the table in a streaming manner: "pending_token_gifts"
  """
  pending_token_gifts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [pending_token_gifts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  fetch data from the table: "pending_vault_transactions"
  """
  pending_vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [pending_vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): [pending_vault_transactions!]!

  """
  fetch data from the table: "pending_vault_transactions" using primary key columns
  """
  pending_vault_transactions_by_pk(tx_hash: String!): pending_vault_transactions

  """
  fetch data from the table in a streaming manner: "pending_vault_transactions"
  """
  pending_vault_transactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [pending_vault_transactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: pending_vault_transactions_bool_exp
  ): [pending_vault_transactions!]!

  """
  fetch data from the table: "poap_events"
  """
  poap_events(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch aggregated fields from the table: "poap_events"
  """
  poap_events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  fetch data from the table: "poap_events" using primary key columns
  """
  poap_events_by_pk(id: bigint!): poap_events

  """
  fetch data from the table in a streaming manner: "poap_events"
  """
  poap_events_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [poap_events_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch data from the table: "poap_holders"
  """
  poap_holders(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch aggregated fields from the table: "poap_holders"
  """
  poap_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  fetch data from the table: "poap_holders" using primary key columns
  """
  poap_holders_by_pk(id: bigint!): poap_holders

  """
  fetch data from the table in a streaming manner: "poap_holders"
  """
  poap_holders_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [poap_holders_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  An array relationship
  """
  private_stream_visibility(
    """
    distinct select on columns
    """
    distinct_on: [private_stream_visibility_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [private_stream_visibility_order_by!]

    """
    filter the rows returned
    """
    where: private_stream_visibility_bool_exp
  ): [private_stream_visibility!]!

  """
  fetch data from the table: "private_stream_visibility" using primary key columns
  """
  private_stream_visibility_by_pk(
    profile_id: bigint!
    view_profile_id: bigint!
  ): private_stream_visibility

  """
  fetch data from the table in a streaming manner: "private_stream_visibility"
  """
  private_stream_visibility_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [private_stream_visibility_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: private_stream_visibility_bool_exp
  ): [private_stream_visibility!]!

  """
  An array relationship
  """
  profile_skills(
    """
    distinct select on columns
    """
    distinct_on: [profile_skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profile_skills_order_by!]

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  fetch data from the table: "profile_skills" using primary key columns
  """
  profile_skills_by_pk(profile_id: Int!, skill_name: citext!): profile_skills

  """
  fetch data from the table in a streaming manner: "profile_skills"
  """
  profile_skills_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profile_skills_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profile_skills_bool_exp
  ): [profile_skills!]!

  """
  fetch data from the table: "profiles"
  """
  profiles(
    """
    distinct select on columns
    """
    distinct_on: [profiles_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_order_by!]

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): [profiles!]!

  """
  fetch data from the table: "profiles" using primary key columns
  """
  profiles_by_pk(id: bigint!): profiles

  """
  fetch data from the table: "profiles_private"
  """
  profiles_private(
    """
    distinct select on columns
    """
    distinct_on: [profiles_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_private_order_by!]

    """
    filter the rows returned
    """
    where: profiles_private_bool_exp
  ): [profiles_private!]!

  """
  fetch data from the table in a streaming manner: "profiles_private"
  """
  profiles_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_private_bool_exp
  ): [profiles_private!]!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  fetch data from the table in a streaming manner: "profiles_public"
  """
  profiles_public_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_public_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  fetch data from the table in a streaming manner: "profiles"
  """
  profiles_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_bool_exp
  ): [profiles!]!

  """
  An array relationship
  """
  reactions(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  An aggregate relationship
  """
  reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reactions_order_by!]

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): reactions_aggregate!

  """
  fetch data from the table: "reactions" using primary key columns
  """
  reactions_by_pk(id: bigint!): reactions

  """
  fetch data from the table in a streaming manner: "reactions"
  """
  reactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reactions_bool_exp
  ): [reactions!]!

  """
  An array relationship
  """
  replies(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  An aggregate relationship
  """
  replies_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): replies_aggregate!

  """
  fetch data from the table: "replies" using primary key columns
  """
  replies_by_pk(id: bigint!): replies

  """
  fetch data from the table: "replies_reactions"
  """
  replies_reactions(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  fetch aggregated fields from the table: "replies_reactions"
  """
  replies_reactions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [replies_reactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_reactions_order_by!]

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): replies_reactions_aggregate!

  """
  fetch data from the table: "replies_reactions" using primary key columns
  """
  replies_reactions_by_pk(id: bigint!): replies_reactions

  """
  fetch data from the table in a streaming manner: "replies_reactions"
  """
  replies_reactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [replies_reactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: replies_reactions_bool_exp
  ): [replies_reactions!]!

  """
  fetch data from the table in a streaming manner: "replies"
  """
  replies_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [replies_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  fetch data from the table: "reputation_scores"
  """
  reputation_scores(
    """
    distinct select on columns
    """
    distinct_on: [reputation_scores_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [reputation_scores_order_by!]

    """
    filter the rows returned
    """
    where: reputation_scores_bool_exp
  ): [reputation_scores!]!

  """
  fetch data from the table: "reputation_scores" using primary key columns
  """
  reputation_scores_by_pk(profile_id: bigint!): reputation_scores

  """
  fetch data from the table in a streaming manner: "reputation_scores"
  """
  reputation_scores_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [reputation_scores_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: reputation_scores_bool_exp
  ): [reputation_scores!]!

  """
  execute function "search_contributions" which returns "contributions"
  """
  search_contributions(
    """
    input parameters for function "search_contributions"
    """
    args: search_contributions_args!

    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  execute function "search_contributions" and query aggregates on result of table type "contributions"
  """
  search_contributions_aggregate(
    """
    input parameters for function "search_contributions_aggregate"
    """
    args: search_contributions_args!

    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!

  """
  execute function "search_replies" which returns "replies"
  """
  search_replies(
    """
    input parameters for function "search_replies"
    """
    args: search_replies_args!

    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): [replies!]!

  """
  execute function "search_replies" and query aggregates on result of table type "replies"
  """
  search_replies_aggregate(
    """
    input parameters for function "search_replies_aggregate"
    """
    args: search_replies_args!

    """
    distinct select on columns
    """
    distinct_on: [replies_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [replies_order_by!]

    """
    filter the rows returned
    """
    where: replies_bool_exp
  ): replies_aggregate!

  """
  fetch data from the table: "skills"
  """
  skills(
    """
    distinct select on columns
    """
    distinct_on: [skills_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [skills_order_by!]

    """
    filter the rows returned
    """
    where: skills_bool_exp
  ): [skills!]!

  """
  fetch data from the table: "skills" using primary key columns
  """
  skills_by_pk(name: citext!): skills

  """
  fetch data from the table in a streaming manner: "skills"
  """
  skills_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [skills_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: skills_bool_exp
  ): [skills!]!

  """
  An array relationship
  """
  teammates(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  fetch data from the table: "teammates" using primary key columns
  """
  teammates_by_pk(id: bigint!): teammates

  """
  fetch data from the table in a streaming manner: "teammates"
  """
  teammates_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [teammates_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!

  """
  An array relationship
  """
  token_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  token_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!

  """
  fetch data from the table: "token_gifts" using primary key columns
  """
  token_gifts_by_pk(id: bigint!): token_gifts

  """
  fetch data from the table in a streaming manner: "token_gifts"
  """
  token_gifts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [token_gifts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  fetch data from the table: "twitter_accounts"
  """
  twitter_accounts(
    """
    distinct select on columns
    """
    distinct_on: [twitter_accounts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [twitter_accounts_order_by!]

    """
    filter the rows returned
    """
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch data from the table: "twitter_accounts" using primary key columns
  """
  twitter_accounts_by_pk(profile_id: Int!): twitter_accounts

  """
  fetch data from the table in a streaming manner: "twitter_accounts"
  """
  twitter_accounts_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [twitter_accounts_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: twitter_accounts_bool_exp
  ): [twitter_accounts!]!

  """
  fetch data from the table: "user_private"
  """
  user_private(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): [user_private!]!

  """
  fetch aggregated fields from the table: "user_private"
  """
  user_private_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [user_private_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [user_private_order_by!]

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): user_private_aggregate!

  """
  fetch data from the table in a streaming manner: "user_private"
  """
  user_private_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [user_private_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: user_private_bool_exp
  ): [user_private!]!

  """
  An array relationship
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: bigint!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [users_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  fetch data from the table: "vault_transactions" using primary key columns
  """
  vault_transactions_by_pk(id: bigint!): vault_transactions

  """
  fetch data from the table in a streaming manner: "vault_transactions"
  """
  vault_transactions_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vault_transactions_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!

  """
  fetch data from the table: "vault_tx_types"
  """
  vault_tx_types(
    """
    distinct select on columns
    """
    distinct_on: [vault_tx_types_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_tx_types_order_by!]

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): [vault_tx_types!]!

  """
  fetch data from the table: "vault_tx_types" using primary key columns
  """
  vault_tx_types_by_pk(value: String!): vault_tx_types

  """
  fetch data from the table in a streaming manner: "vault_tx_types"
  """
  vault_tx_types_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vault_tx_types_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vault_tx_types_bool_exp
  ): [vault_tx_types!]!

  """
  An array relationship
  """
  vaults(
    """
    distinct select on columns
    """
    distinct_on: [vaults_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vaults_order_by!]

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  fetch data from the table: "vaults" using primary key columns
  """
  vaults_by_pk(id: bigint!): vaults

  """
  fetch data from the table in a streaming manner: "vaults"
  """
  vaults_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vaults_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vaults_bool_exp
  ): [vaults!]!

  """
  execute function "vector_search_poap_events" which returns "poap_events"
  """
  vector_search_poap_events(
    """
    input parameters for function "vector_search_poap_events"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  execute function "vector_search_poap_events" and query aggregates on result of table type "poap_events"
  """
  vector_search_poap_events_aggregate(
    """
    input parameters for function "vector_search_poap_events_aggregate"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  execute function "vector_search_poap_holders" which returns "poap_holders"
  """
  vector_search_poap_holders(
    """
    input parameters for function "vector_search_poap_holders"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  execute function "vector_search_poap_holders" and query aggregates on result of table type "poap_holders"
  """
  vector_search_poap_holders_aggregate(
    """
    input parameters for function "vector_search_poap_holders_aggregate"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  An array relationship
  """
  vouches(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!

  """
  fetch data from the table: "vouches" using primary key columns
  """
  vouches_by_pk(id: bigint!): vouches

  """
  fetch data from the table in a streaming manner: "vouches"
  """
  vouches_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [vouches_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!
}

"""
columns and relationships of "teammates"
"""
type teammates {
  created_at: timestamp!
  id: bigint!
  team_mate_id: Int!

  """
  An object relationship
  """
  teammate: users
  updated_at: timestamp!

  """
  An object relationship
  """
  user: users
  user_id: Int!
}

"""
order by aggregate values of table "teammates"
"""
input teammates_aggregate_order_by {
  avg: teammates_avg_order_by
  count: order_by
  max: teammates_max_order_by
  min: teammates_min_order_by
  stddev: teammates_stddev_order_by
  stddev_pop: teammates_stddev_pop_order_by
  stddev_samp: teammates_stddev_samp_order_by
  sum: teammates_sum_order_by
  var_pop: teammates_var_pop_order_by
  var_samp: teammates_var_samp_order_by
  variance: teammates_variance_order_by
}

"""
order by avg() on columns of table "teammates"
"""
input teammates_avg_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "teammates". All fields are combined with a logical 'AND'.
"""
input teammates_bool_exp {
  _and: [teammates_bool_exp!]
  _not: teammates_bool_exp
  _or: [teammates_bool_exp!]
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  team_mate_id: Int_comparison_exp
  teammate: users_bool_exp
  updated_at: timestamp_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "teammates"
"""
input teammates_max_order_by {
  created_at: order_by
  id: order_by
  team_mate_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
order by min() on columns of table "teammates"
"""
input teammates_min_order_by {
  created_at: order_by
  id: order_by
  team_mate_id: order_by
  updated_at: order_by
  user_id: order_by
}

"""
Ordering options when selecting data from "teammates".
"""
input teammates_order_by {
  created_at: order_by
  id: order_by
  team_mate_id: order_by
  teammate: users_order_by
  updated_at: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "teammates"
"""
enum teammates_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  team_mate_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  user_id
}

"""
order by stddev() on columns of table "teammates"
"""
input teammates_stddev_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "teammates"
"""
input teammates_stddev_pop_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "teammates"
"""
input teammates_stddev_samp_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
Streaming cursor of the table "teammates"
"""
input teammates_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: teammates_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input teammates_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  team_mate_id: Int
  updated_at: timestamp
  user_id: Int
}

"""
order by sum() on columns of table "teammates"
"""
input teammates_sum_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "teammates"
"""
input teammates_var_pop_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "teammates"
"""
input teammates_var_samp_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "teammates"
"""
input teammates_variance_order_by {
  id: order_by
  team_mate_id: order_by
  user_id: order_by
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
GIVE allocations made by circle members for completed epochs
"""
type token_gifts {
  """
  An object relationship
  """
  circle: circles!
  circle_id: bigint!
  created_at: timestamp!
  dts_created: timestamp!

  """
  An object relationship
  """
  epoch: epochs!
  epoch_id: Int!

  """
  An object relationship
  """
  gift_private: gift_private
  id: bigint!

  """
  An object relationship
  """
  recipient: users!
  recipient_address: String!
  recipient_id: bigint!

  """
  An object relationship
  """
  sender: users!
  sender_address: String!
  sender_id: bigint!
  tokens: Int!
  updated_at: timestamp!
}

"""
aggregated selection of "token_gifts"
"""
type token_gifts_aggregate {
  aggregate: token_gifts_aggregate_fields
  nodes: [token_gifts!]!
}

input token_gifts_aggregate_bool_exp {
  count: token_gifts_aggregate_bool_exp_count
}

input token_gifts_aggregate_bool_exp_count {
  arguments: [token_gifts_select_column!]
  distinct: Boolean
  filter: token_gifts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "token_gifts"
"""
type token_gifts_aggregate_fields {
  avg: token_gifts_avg_fields
  count(columns: [token_gifts_select_column!], distinct: Boolean): Int!
  max: token_gifts_max_fields
  min: token_gifts_min_fields
  stddev: token_gifts_stddev_fields
  stddev_pop: token_gifts_stddev_pop_fields
  stddev_samp: token_gifts_stddev_samp_fields
  sum: token_gifts_sum_fields
  var_pop: token_gifts_var_pop_fields
  var_samp: token_gifts_var_samp_fields
  variance: token_gifts_variance_fields
}

"""
order by aggregate values of table "token_gifts"
"""
input token_gifts_aggregate_order_by {
  avg: token_gifts_avg_order_by
  count: order_by
  max: token_gifts_max_order_by
  min: token_gifts_min_order_by
  stddev: token_gifts_stddev_order_by
  stddev_pop: token_gifts_stddev_pop_order_by
  stddev_samp: token_gifts_stddev_samp_order_by
  sum: token_gifts_sum_order_by
  var_pop: token_gifts_var_pop_order_by
  var_samp: token_gifts_var_samp_order_by
  variance: token_gifts_variance_order_by
}

"""
aggregate avg on columns
"""
type token_gifts_avg_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by avg() on columns of table "token_gifts"
"""
input token_gifts_avg_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Boolean expression to filter rows from the table "token_gifts". All fields are combined with a logical 'AND'.
"""
input token_gifts_bool_exp {
  _and: [token_gifts_bool_exp!]
  _not: token_gifts_bool_exp
  _or: [token_gifts_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  dts_created: timestamp_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  gift_private: gift_private_bool_exp
  id: bigint_comparison_exp
  recipient: users_bool_exp
  recipient_address: String_comparison_exp
  recipient_id: bigint_comparison_exp
  sender: users_bool_exp
  sender_address: String_comparison_exp
  sender_id: bigint_comparison_exp
  tokens: Int_comparison_exp
  updated_at: timestamp_comparison_exp
}

"""
aggregate max on columns
"""
type token_gifts_max_fields {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by max() on columns of table "token_gifts"
"""
input token_gifts_max_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type token_gifts_min_fields {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
order by min() on columns of table "token_gifts"
"""
input token_gifts_min_order_by {
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch_id: order_by
  id: order_by
  recipient_address: order_by
  recipient_id: order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "token_gifts".
"""
input token_gifts_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  dts_created: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  gift_private: gift_private_order_by
  id: order_by
  recipient: users_order_by
  recipient_address: order_by
  recipient_id: order_by
  sender: users_order_by
  sender_address: order_by
  sender_id: order_by
  tokens: order_by
  updated_at: order_by
}

"""
select columns of table "token_gifts"
"""
enum token_gifts_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  dts_created

  """
  column name
  """
  epoch_id

  """
  column name
  """
  id

  """
  column name
  """
  recipient_address

  """
  column name
  """
  recipient_id

  """
  column name
  """
  sender_address

  """
  column name
  """
  sender_id

  """
  column name
  """
  tokens

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type token_gifts_stddev_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev() on columns of table "token_gifts"
"""
input token_gifts_stddev_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate stddev_pop on columns
"""
type token_gifts_stddev_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev_pop() on columns of table "token_gifts"
"""
input token_gifts_stddev_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate stddev_samp on columns
"""
type token_gifts_stddev_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by stddev_samp() on columns of table "token_gifts"
"""
input token_gifts_stddev_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
Streaming cursor of the table "token_gifts"
"""
input token_gifts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: token_gifts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input token_gifts_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  dts_created: timestamp
  epoch_id: Int
  id: bigint
  recipient_address: String
  recipient_id: bigint
  sender_address: String
  sender_id: bigint
  tokens: Int
  updated_at: timestamp
}

"""
aggregate sum on columns
"""
type token_gifts_sum_fields {
  circle_id: bigint
  epoch_id: Int
  id: bigint
  recipient_id: bigint
  sender_id: bigint
  tokens: Int
}

"""
order by sum() on columns of table "token_gifts"
"""
input token_gifts_sum_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate var_pop on columns
"""
type token_gifts_var_pop_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by var_pop() on columns of table "token_gifts"
"""
input token_gifts_var_pop_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate var_samp on columns
"""
type token_gifts_var_samp_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by var_samp() on columns of table "token_gifts"
"""
input token_gifts_var_samp_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
aggregate variance on columns
"""
type token_gifts_variance_fields {
  circle_id: Float
  epoch_id: Float
  id: Float
  recipient_id: Float
  sender_id: Float
  tokens: Float
}

"""
order by variance() on columns of table "token_gifts"
"""
input token_gifts_variance_order_by {
  circle_id: order_by
  epoch_id: order_by
  id: order_by
  recipient_id: order_by
  sender_id: order_by
  tokens: order_by
}

"""
twitter accounts connected to profiles
"""
type twitter_accounts {
  description: String
  id: String!
  name: String!

  """
  An object relationship
  """
  profile: profiles!
  profile_id: Int!
  profile_image_url: String
  username: String!
}

"""
Boolean expression to filter rows from the table "twitter_accounts". All fields are combined with a logical 'AND'.
"""
input twitter_accounts_bool_exp {
  _and: [twitter_accounts_bool_exp!]
  _not: twitter_accounts_bool_exp
  _or: [twitter_accounts_bool_exp!]
  description: String_comparison_exp
  id: String_comparison_exp
  name: String_comparison_exp
  profile: profiles_bool_exp
  profile_id: Int_comparison_exp
  profile_image_url: String_comparison_exp
  username: String_comparison_exp
}

"""
response of any mutation on the table "twitter_accounts"
"""
type twitter_accounts_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [twitter_accounts!]!
}

"""
Ordering options when selecting data from "twitter_accounts".
"""
input twitter_accounts_order_by {
  description: order_by
  id: order_by
  name: order_by
  profile: profiles_order_by
  profile_id: order_by
  profile_image_url: order_by
  username: order_by
}

"""
select columns of table "twitter_accounts"
"""
enum twitter_accounts_select_column {
  """
  column name
  """
  description

  """
  column name
  """
  id

  """
  column name
  """
  name

  """
  column name
  """
  profile_id

  """
  column name
  """
  profile_image_url

  """
  column name
  """
  username
}

"""
Streaming cursor of the table "twitter_accounts"
"""
input twitter_accounts_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: twitter_accounts_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input twitter_accounts_stream_cursor_value_input {
  description: String
  id: String
  name: String
  profile_id: Int
  profile_image_url: String
  username: String
}

"""
columns and relationships of "user_private"
"""
type user_private {
  """
  An object relationship
  """
  circle: circles
  fixed_payment_amount: numeric
  fixed_payment_token_type: String

  """
  An object relationship
  """
  user: users
  user_id: bigint
}

"""
aggregated selection of "user_private"
"""
type user_private_aggregate {
  aggregate: user_private_aggregate_fields
  nodes: [user_private!]!
}

"""
aggregate fields of "user_private"
"""
type user_private_aggregate_fields {
  avg: user_private_avg_fields
  count(columns: [user_private_select_column!], distinct: Boolean): Int!
  max: user_private_max_fields
  min: user_private_min_fields
  stddev: user_private_stddev_fields
  stddev_pop: user_private_stddev_pop_fields
  stddev_samp: user_private_stddev_samp_fields
  sum: user_private_sum_fields
  var_pop: user_private_var_pop_fields
  var_samp: user_private_var_samp_fields
  variance: user_private_variance_fields
}

"""
aggregate avg on columns
"""
type user_private_avg_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "user_private". All fields are combined with a logical 'AND'.
"""
input user_private_bool_exp {
  _and: [user_private_bool_exp!]
  _not: user_private_bool_exp
  _or: [user_private_bool_exp!]
  circle: circles_bool_exp
  fixed_payment_amount: numeric_comparison_exp
  fixed_payment_token_type: String_comparison_exp
  user: users_bool_exp
  user_id: bigint_comparison_exp
}

"""
aggregate max on columns
"""
type user_private_max_fields {
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user_id: bigint
}

"""
aggregate min on columns
"""
type user_private_min_fields {
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user_id: bigint
}

"""
Ordering options when selecting data from "user_private".
"""
input user_private_order_by {
  circle: circles_order_by
  fixed_payment_amount: order_by
  fixed_payment_token_type: order_by
  user: users_order_by
  user_id: order_by
}

"""
select columns of table "user_private"
"""
enum user_private_select_column {
  """
  column name
  """
  fixed_payment_amount

  """
  column name
  """
  fixed_payment_token_type

  """
  column name
  """
  user_id
}

"""
aggregate stddev on columns
"""
type user_private_stddev_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate stddev_pop on columns
"""
type user_private_stddev_pop_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate stddev_samp on columns
"""
type user_private_stddev_samp_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
Streaming cursor of the table "user_private"
"""
input user_private_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: user_private_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input user_private_stream_cursor_value_input {
  fixed_payment_amount: numeric
  fixed_payment_token_type: String
  user_id: bigint
}

"""
aggregate sum on columns
"""
type user_private_sum_fields {
  fixed_payment_amount: numeric
  user_id: bigint
}

"""
aggregate var_pop on columns
"""
type user_private_var_pop_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate var_samp on columns
"""
type user_private_var_samp_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
aggregate variance on columns
"""
type user_private_variance_fields {
  fixed_payment_amount: Float
  user_id: Float
}

"""
Members of a circle
"""
type users {
  bio: String

  """
  An array relationship
  """
  burns(
    """
    distinct select on columns
    """
    distinct_on: [burns_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [burns_order_by!]

    """
    filter the rows returned
    """
    where: burns_bool_exp
  ): [burns!]!

  """
  An object relationship
  """
  circle: circles!

  """
  An array relationship
  """
  circle_api_keys(
    """
    distinct select on columns
    """
    distinct_on: [circle_api_keys_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [circle_api_keys_order_by!]

    """
    filter the rows returned
    """
    where: circle_api_keys_bool_exp
  ): [circle_api_keys!]!
  circle_id: bigint!

  """
  An array relationship
  """
  contributions(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): [contributions!]!

  """
  An aggregate relationship
  """
  contributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [contributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [contributions_order_by!]

    """
    filter the rows returned
    """
    where: contributions_bool_exp
  ): contributions_aggregate!
  created_at: timestamp!
  deleted_at: timestamp
  epoch_first_visit: Boolean!
  fixed_non_receiver: Boolean!
  give_token_received: Int!
  give_token_remaining: Int!
  id: bigint!

  """
  An array relationship
  """
  member_epoch_pgivess(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): [member_epoch_pgives!]!

  """
  An aggregate relationship
  """
  member_epoch_pgivess_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [member_epoch_pgives_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [member_epoch_pgives_order_by!]

    """
    filter the rows returned
    """
    where: member_epoch_pgives_bool_exp
  ): member_epoch_pgives_aggregate!
  non_giver: Boolean!
  non_receiver: Boolean!

  """
  An array relationship
  """
  pending_received_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An array relationship
  """
  pending_sent_gifts(
    """
    distinct select on columns
    """
    distinct_on: [pending_token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [pending_token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: pending_token_gifts_bool_exp
  ): [pending_token_gifts!]!

  """
  An object relationship
  """
  profile: profiles!
  profile_id: bigint!

  """
  An array relationship
  """
  received_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  received_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  role: Int!

  """
  An array relationship
  """
  sent_gifts(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): [token_gifts!]!

  """
  An aggregate relationship
  """
  sent_gifts_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [token_gifts_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [token_gifts_order_by!]

    """
    filter the rows returned
    """
    where: token_gifts_bool_exp
  ): token_gifts_aggregate!
  starting_tokens: Int!

  """
  An array relationship
  """
  teammates(
    """
    distinct select on columns
    """
    distinct_on: [teammates_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [teammates_order_by!]

    """
    filter the rows returned
    """
    where: teammates_bool_exp
  ): [teammates!]!
  updated_at: timestamp!

  """
  An object relationship
  """
  user_private: user_private

  """
  An array relationship
  """
  vouches(
    """
    distinct select on columns
    """
    distinct_on: [vouches_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vouches_order_by!]

    """
    filter the rows returned
    """
    where: vouches_bool_exp
  ): [vouches!]!
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  avg: users_avg_order_by
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
  stddev: users_stddev_order_by
  stddev_pop: users_stddev_pop_order_by
  stddev_samp: users_stddev_samp_order_by
  sum: users_sum_order_by
  var_pop: users_var_pop_order_by
  var_samp: users_var_samp_order_by
  variance: users_variance_order_by
}

"""
order by avg() on columns of table "users"
"""
input users_avg_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  bio: String_comparison_exp
  burns: burns_bool_exp
  circle: circles_bool_exp
  circle_api_keys: circle_api_keys_bool_exp
  circle_id: bigint_comparison_exp
  contributions: contributions_bool_exp
  contributions_aggregate: contributions_aggregate_bool_exp
  created_at: timestamp_comparison_exp
  deleted_at: timestamp_comparison_exp
  epoch_first_visit: Boolean_comparison_exp
  fixed_non_receiver: Boolean_comparison_exp
  give_token_received: Int_comparison_exp
  give_token_remaining: Int_comparison_exp
  id: bigint_comparison_exp
  member_epoch_pgivess: member_epoch_pgives_bool_exp
  member_epoch_pgivess_aggregate: member_epoch_pgives_aggregate_bool_exp
  non_giver: Boolean_comparison_exp
  non_receiver: Boolean_comparison_exp
  pending_received_gifts: pending_token_gifts_bool_exp
  pending_sent_gifts: pending_token_gifts_bool_exp
  profile: profiles_bool_exp
  profile_id: bigint_comparison_exp
  received_gifts: token_gifts_bool_exp
  received_gifts_aggregate: token_gifts_aggregate_bool_exp
  role: Int_comparison_exp
  sent_gifts: token_gifts_bool_exp
  sent_gifts_aggregate: token_gifts_aggregate_bool_exp
  starting_tokens: Int_comparison_exp
  teammates: teammates_bool_exp
  updated_at: timestamp_comparison_exp
  user_private: user_private_bool_exp
  vouches: vouches_bool_exp
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  bio: order_by
  circle_id: order_by
  created_at: order_by
  deleted_at: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  bio: order_by
  circle_id: order_by
  created_at: order_by
  deleted_at: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "users".
"""
input users_order_by {
  bio: order_by
  burns_aggregate: burns_aggregate_order_by
  circle: circles_order_by
  circle_api_keys_aggregate: circle_api_keys_aggregate_order_by
  circle_id: order_by
  contributions_aggregate: contributions_aggregate_order_by
  created_at: order_by
  deleted_at: order_by
  epoch_first_visit: order_by
  fixed_non_receiver: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  member_epoch_pgivess_aggregate: member_epoch_pgives_aggregate_order_by
  non_giver: order_by
  non_receiver: order_by
  pending_received_gifts_aggregate: pending_token_gifts_aggregate_order_by
  pending_sent_gifts_aggregate: pending_token_gifts_aggregate_order_by
  profile: profiles_order_by
  profile_id: order_by
  received_gifts_aggregate: token_gifts_aggregate_order_by
  role: order_by
  sent_gifts_aggregate: token_gifts_aggregate_order_by
  starting_tokens: order_by
  teammates_aggregate: teammates_aggregate_order_by
  updated_at: order_by
  user_private: user_private_order_by
  vouches_aggregate: vouches_aggregate_order_by
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  bio

  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  deleted_at

  """
  column name
  """
  epoch_first_visit

  """
  column name
  """
  fixed_non_receiver

  """
  column name
  """
  give_token_received

  """
  column name
  """
  give_token_remaining

  """
  column name
  """
  id

  """
  column name
  """
  non_giver

  """
  column name
  """
  non_receiver

  """
  column name
  """
  profile_id

  """
  column name
  """
  role

  """
  column name
  """
  starting_tokens

  """
  column name
  """
  updated_at
}

"""
order by stddev() on columns of table "users"
"""
input users_stddev_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
order by stddev_pop() on columns of table "users"
"""
input users_stddev_pop_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
order by stddev_samp() on columns of table "users"
"""
input users_stddev_samp_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: users_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input users_stream_cursor_value_input {
  bio: String
  circle_id: bigint
  created_at: timestamp
  deleted_at: timestamp
  epoch_first_visit: Boolean
  fixed_non_receiver: Boolean
  give_token_received: Int
  give_token_remaining: Int
  id: bigint
  non_giver: Boolean
  non_receiver: Boolean
  profile_id: bigint
  role: Int
  starting_tokens: Int
  updated_at: timestamp
}

"""
order by sum() on columns of table "users"
"""
input users_sum_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
order by var_pop() on columns of table "users"
"""
input users_var_pop_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
order by var_samp() on columns of table "users"
"""
input users_var_samp_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

"""
order by variance() on columns of table "users"
"""
input users_variance_order_by {
  circle_id: order_by
  give_token_received: order_by
  give_token_remaining: order_by
  id: order_by
  profile_id: order_by
  role: order_by
  starting_tokens: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "vault_transactions"
"""
type vault_transactions {
  """
  An object relationship
  """
  circle: circles
  circle_id: bigint
  created_at: timestamp!
  created_by: bigint

  """
  An object relationship
  """
  distribution: distributions
  distribution_id: bigint
  id: bigint!

  """
  An object relationship
  """
  profile: profiles
  tx_hash: String!
  tx_type: vault_tx_types_enum!
  updated_at: timestamp!

  """
  An object relationship
  """
  vault: vaults!
  vault_id: bigint!

  """
  An object relationship
  """
  vault_tx_type: vault_tx_types!
}

"""
order by aggregate values of table "vault_transactions"
"""
input vault_transactions_aggregate_order_by {
  avg: vault_transactions_avg_order_by
  count: order_by
  max: vault_transactions_max_order_by
  min: vault_transactions_min_order_by
  stddev: vault_transactions_stddev_order_by
  stddev_pop: vault_transactions_stddev_pop_order_by
  stddev_samp: vault_transactions_stddev_samp_order_by
  sum: vault_transactions_sum_order_by
  var_pop: vault_transactions_var_pop_order_by
  var_samp: vault_transactions_var_samp_order_by
  variance: vault_transactions_variance_order_by
}

"""
order by avg() on columns of table "vault_transactions"
"""
input vault_transactions_avg_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
Boolean expression to filter rows from the table "vault_transactions". All fields are combined with a logical 'AND'.
"""
input vault_transactions_bool_exp {
  _and: [vault_transactions_bool_exp!]
  _not: vault_transactions_bool_exp
  _or: [vault_transactions_bool_exp!]
  circle: circles_bool_exp
  circle_id: bigint_comparison_exp
  created_at: timestamp_comparison_exp
  created_by: bigint_comparison_exp
  distribution: distributions_bool_exp
  distribution_id: bigint_comparison_exp
  id: bigint_comparison_exp
  profile: profiles_bool_exp
  tx_hash: String_comparison_exp
  tx_type: vault_tx_types_enum_comparison_exp
  updated_at: timestamp_comparison_exp
  vault: vaults_bool_exp
  vault_id: bigint_comparison_exp
  vault_tx_type: vault_tx_types_bool_exp
}

"""
order by max() on columns of table "vault_transactions"
"""
input vault_transactions_max_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  tx_hash: order_by
  updated_at: order_by
  vault_id: order_by
}

"""
order by min() on columns of table "vault_transactions"
"""
input vault_transactions_min_order_by {
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  tx_hash: order_by
  updated_at: order_by
  vault_id: order_by
}

"""
Ordering options when selecting data from "vault_transactions".
"""
input vault_transactions_order_by {
  circle: circles_order_by
  circle_id: order_by
  created_at: order_by
  created_by: order_by
  distribution: distributions_order_by
  distribution_id: order_by
  id: order_by
  profile: profiles_order_by
  tx_hash: order_by
  tx_type: order_by
  updated_at: order_by
  vault: vaults_order_by
  vault_id: order_by
  vault_tx_type: vault_tx_types_order_by
}

"""
select columns of table "vault_transactions"
"""
enum vault_transactions_select_column {
  """
  column name
  """
  circle_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  distribution_id

  """
  column name
  """
  id

  """
  column name
  """
  tx_hash

  """
  column name
  """
  tx_type

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_id
}

"""
order by stddev() on columns of table "vault_transactions"
"""
input vault_transactions_stddev_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
order by stddev_pop() on columns of table "vault_transactions"
"""
input vault_transactions_stddev_pop_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
order by stddev_samp() on columns of table "vault_transactions"
"""
input vault_transactions_stddev_samp_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
Streaming cursor of the table "vault_transactions"
"""
input vault_transactions_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vault_transactions_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vault_transactions_stream_cursor_value_input {
  circle_id: bigint
  created_at: timestamp
  created_by: bigint
  distribution_id: bigint
  id: bigint
  tx_hash: String
  tx_type: vault_tx_types_enum
  updated_at: timestamp
  vault_id: bigint
}

"""
order by sum() on columns of table "vault_transactions"
"""
input vault_transactions_sum_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
order by var_pop() on columns of table "vault_transactions"
"""
input vault_transactions_var_pop_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
order by var_samp() on columns of table "vault_transactions"
"""
input vault_transactions_var_samp_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
order by variance() on columns of table "vault_transactions"
"""
input vault_transactions_variance_order_by {
  circle_id: order_by
  created_by: order_by
  distribution_id: order_by
  id: order_by
  vault_id: order_by
}

"""
columns and relationships of "vault_tx_types"
"""
type vault_tx_types {
  comment: String
  value: String!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!
}

"""
Boolean expression to filter rows from the table "vault_tx_types". All fields are combined with a logical 'AND'.
"""
input vault_tx_types_bool_exp {
  _and: [vault_tx_types_bool_exp!]
  _not: vault_tx_types_bool_exp
  _or: [vault_tx_types_bool_exp!]
  comment: String_comparison_exp
  value: String_comparison_exp
  vault_transactions: vault_transactions_bool_exp
}

enum vault_tx_types_enum {
  Claim
  Deposit
  Distribution

  """
  Deployment of new vault onchain
  """
  Vault_Deploy
  Withdraw
}

"""
Boolean expression to compare columns of type "vault_tx_types_enum". All fields are combined with logical 'AND'.
"""
input vault_tx_types_enum_comparison_exp {
  _eq: vault_tx_types_enum
  _in: [vault_tx_types_enum!]
  _is_null: Boolean
  _neq: vault_tx_types_enum
  _nin: [vault_tx_types_enum!]
}

"""
Ordering options when selecting data from "vault_tx_types".
"""
input vault_tx_types_order_by {
  comment: order_by
  value: order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
}

"""
select columns of table "vault_tx_types"
"""
enum vault_tx_types_select_column {
  """
  column name
  """
  comment

  """
  column name
  """
  value
}

"""
Streaming cursor of the table "vault_tx_types"
"""
input vault_tx_types_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vault_tx_types_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vault_tx_types_stream_cursor_value_input {
  comment: String
  value: String
}

"""
columns and relationships of "vaults"
"""
type vaults {
  chain_id: Int!
  created_at: timestamptz!
  created_by: bigint!
  decimals: Int!
  deployment_block: bigint!

  """
  An array relationship
  """
  distributions(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): [distributions!]!

  """
  An aggregate relationship
  """
  distributions_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [distributions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [distributions_order_by!]

    """
    filter the rows returned
    """
    where: distributions_bool_exp
  ): distributions_aggregate!
  id: bigint!

  """
  An object relationship
  """
  organization: organizations!

  """
  An object relationship
  """
  profile: profiles!
  simple_token_address: String!
  symbol: String!
  token_address: String!
  updated_at: timestamptz!
  vault_address: String!

  """
  An array relationship
  """
  vault_transactions(
    """
    distinct select on columns
    """
    distinct_on: [vault_transactions_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [vault_transactions_order_by!]

    """
    filter the rows returned
    """
    where: vault_transactions_bool_exp
  ): [vault_transactions!]!
}

"""
order by aggregate values of table "vaults"
"""
input vaults_aggregate_order_by {
  avg: vaults_avg_order_by
  count: order_by
  max: vaults_max_order_by
  min: vaults_min_order_by
  stddev: vaults_stddev_order_by
  stddev_pop: vaults_stddev_pop_order_by
  stddev_samp: vaults_stddev_samp_order_by
  sum: vaults_sum_order_by
  var_pop: vaults_var_pop_order_by
  var_samp: vaults_var_samp_order_by
  variance: vaults_variance_order_by
}

"""
order by avg() on columns of table "vaults"
"""
input vaults_avg_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "vaults". All fields are combined with a logical 'AND'.
"""
input vaults_bool_exp {
  _and: [vaults_bool_exp!]
  _not: vaults_bool_exp
  _or: [vaults_bool_exp!]
  chain_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: bigint_comparison_exp
  decimals: Int_comparison_exp
  deployment_block: bigint_comparison_exp
  distributions: distributions_bool_exp
  distributions_aggregate: distributions_aggregate_bool_exp
  id: bigint_comparison_exp
  organization: organizations_bool_exp
  profile: profiles_bool_exp
  simple_token_address: String_comparison_exp
  symbol: String_comparison_exp
  token_address: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  vault_address: String_comparison_exp
  vault_transactions: vault_transactions_bool_exp
}

"""
order by max() on columns of table "vaults"
"""
input vaults_max_order_by {
  chain_id: order_by
  created_at: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  simple_token_address: order_by
  symbol: order_by
  token_address: order_by
  updated_at: order_by
  vault_address: order_by
}

"""
order by min() on columns of table "vaults"
"""
input vaults_min_order_by {
  chain_id: order_by
  created_at: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
  simple_token_address: order_by
  symbol: order_by
  token_address: order_by
  updated_at: order_by
  vault_address: order_by
}

"""
Ordering options when selecting data from "vaults".
"""
input vaults_order_by {
  chain_id: order_by
  created_at: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  distributions_aggregate: distributions_aggregate_order_by
  id: order_by
  organization: organizations_order_by
  profile: profiles_order_by
  simple_token_address: order_by
  symbol: order_by
  token_address: order_by
  updated_at: order_by
  vault_address: order_by
  vault_transactions_aggregate: vault_transactions_aggregate_order_by
}

"""
select columns of table "vaults"
"""
enum vaults_select_column {
  """
  column name
  """
  chain_id

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  decimals

  """
  column name
  """
  deployment_block

  """
  column name
  """
  id

  """
  column name
  """
  simple_token_address

  """
  column name
  """
  symbol

  """
  column name
  """
  token_address

  """
  column name
  """
  updated_at

  """
  column name
  """
  vault_address
}

"""
order by stddev() on columns of table "vaults"
"""
input vaults_stddev_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
order by stddev_pop() on columns of table "vaults"
"""
input vaults_stddev_pop_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
order by stddev_samp() on columns of table "vaults"
"""
input vaults_stddev_samp_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
Streaming cursor of the table "vaults"
"""
input vaults_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vaults_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vaults_stream_cursor_value_input {
  chain_id: Int
  created_at: timestamptz
  created_by: bigint
  decimals: Int
  deployment_block: bigint
  id: bigint
  simple_token_address: String
  symbol: String
  token_address: String
  updated_at: timestamptz
  vault_address: String
}

"""
order by sum() on columns of table "vaults"
"""
input vaults_sum_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
order by var_pop() on columns of table "vaults"
"""
input vaults_var_pop_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
order by var_samp() on columns of table "vaults"
"""
input vaults_var_samp_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

"""
order by variance() on columns of table "vaults"
"""
input vaults_variance_order_by {
  chain_id: order_by
  created_by: order_by
  decimals: order_by
  deployment_block: order_by
  id: order_by
}

scalar vector

"""
Boolean expression to compare columns of type "vector". All fields are combined with logical 'AND'.
"""
input vector_comparison_exp {
  _eq: vector
  _gt: vector
  _gte: vector
  _in: [vector!]
  _is_null: Boolean
  _lt: vector
  _lte: vector
  _neq: vector
  _nin: [vector!]
}

input vector_search_poap_events_args {
  limit_count: Int
  match_threshold: float8
  target_vector: vector
}

input vector_search_poap_holders_args {
  limit_count: Int
  match_threshold: float8
  target_vector: vector
}

"""
columns and relationships of "vouches"
"""
type vouches {
  created_at: timestamp!
  id: bigint!

  """
  An object relationship
  """
  nominee: nominees
  nominee_id: Int!
  updated_at: timestamp!

  """
  An object relationship
  """
  voucher: users
  voucher_id: Int!
}

"""
order by aggregate values of table "vouches"
"""
input vouches_aggregate_order_by {
  avg: vouches_avg_order_by
  count: order_by
  max: vouches_max_order_by
  min: vouches_min_order_by
  stddev: vouches_stddev_order_by
  stddev_pop: vouches_stddev_pop_order_by
  stddev_samp: vouches_stddev_samp_order_by
  sum: vouches_sum_order_by
  var_pop: vouches_var_pop_order_by
  var_samp: vouches_var_samp_order_by
  variance: vouches_variance_order_by
}

"""
order by avg() on columns of table "vouches"
"""
input vouches_avg_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
Boolean expression to filter rows from the table "vouches". All fields are combined with a logical 'AND'.
"""
input vouches_bool_exp {
  _and: [vouches_bool_exp!]
  _not: vouches_bool_exp
  _or: [vouches_bool_exp!]
  created_at: timestamp_comparison_exp
  id: bigint_comparison_exp
  nominee: nominees_bool_exp
  nominee_id: Int_comparison_exp
  updated_at: timestamp_comparison_exp
  voucher: users_bool_exp
  voucher_id: Int_comparison_exp
}

"""
order by max() on columns of table "vouches"
"""
input vouches_max_order_by {
  created_at: order_by
  id: order_by
  nominee_id: order_by
  updated_at: order_by
  voucher_id: order_by
}

"""
order by min() on columns of table "vouches"
"""
input vouches_min_order_by {
  created_at: order_by
  id: order_by
  nominee_id: order_by
  updated_at: order_by
  voucher_id: order_by
}

"""
Ordering options when selecting data from "vouches".
"""
input vouches_order_by {
  created_at: order_by
  id: order_by
  nominee: nominees_order_by
  nominee_id: order_by
  updated_at: order_by
  voucher: users_order_by
  voucher_id: order_by
}

"""
select columns of table "vouches"
"""
enum vouches_select_column {
  """
  column name
  """
  created_at

  """
  column name
  """
  id

  """
  column name
  """
  nominee_id

  """
  column name
  """
  updated_at

  """
  column name
  """
  voucher_id
}

"""
order by stddev() on columns of table "vouches"
"""
input vouches_stddev_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
order by stddev_pop() on columns of table "vouches"
"""
input vouches_stddev_pop_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
order by stddev_samp() on columns of table "vouches"
"""
input vouches_stddev_samp_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
Streaming cursor of the table "vouches"
"""
input vouches_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: vouches_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input vouches_stream_cursor_value_input {
  created_at: timestamp
  id: bigint
  nominee_id: Int
  updated_at: timestamp
  voucher_id: Int
}

"""
order by sum() on columns of table "vouches"
"""
input vouches_sum_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
order by var_pop() on columns of table "vouches"
"""
input vouches_var_pop_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
order by var_samp() on columns of table "vouches"
"""
input vouches_var_samp_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}

"""
order by variance() on columns of table "vouches"
"""
input vouches_variance_order_by {
  id: order_by
  nominee_id: order_by
  voucher_id: order_by
}
