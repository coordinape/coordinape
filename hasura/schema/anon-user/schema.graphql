schema {
  query: query_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """
  does the column NOT match the given pattern
  """
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """
  does the column match the given SQL regular expression
  """
  _similar: citext
}

"""
local db copy of last synced on-chain cosoul data
"""
type cosouls {
  address: citext!

  """
  An array relationship
  """
  held_keys(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  held_keys_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  id: Int!

  """
  An array relationship
  """
  key_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  An aggregate relationship
  """
  key_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!
  pgive: Int

  """
  An array relationship
  """
  poaps(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  An aggregate relationship
  """
  poaps_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  An object relationship
  """
  profile_public: profiles_public
  token_id: Int!
}

"""
Boolean expression to filter rows from the table "cosouls". All fields are combined with a logical 'AND'.
"""
input cosouls_bool_exp {
  _and: [cosouls_bool_exp!]
  _not: cosouls_bool_exp
  _or: [cosouls_bool_exp!]
  address: citext_comparison_exp
  held_keys: link_holders_bool_exp
  held_keys_aggregate: link_holders_aggregate_bool_exp
  id: Int_comparison_exp
  key_holders: link_holders_bool_exp
  key_holders_aggregate: link_holders_aggregate_bool_exp
  pgive: Int_comparison_exp
  poaps: poap_holders_bool_exp
  poaps_aggregate: poap_holders_aggregate_bool_exp
  profile_public: profiles_public_bool_exp
  token_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "cosouls".
"""
input cosouls_order_by {
  address: order_by
  held_keys_aggregate: link_holders_aggregate_order_by
  id: order_by
  key_holders_aggregate: link_holders_aggregate_order_by
  pgive: order_by
  poaps_aggregate: poap_holders_aggregate_order_by
  profile_public: profiles_public_order_by
  token_id: order_by
}

"""
select columns of table "cosouls"
"""
enum cosouls_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  id

  """
  column name
  """
  pgive

  """
  column name
  """
  token_id
}

"""
Streaming cursor of the table "cosouls"
"""
input cosouls_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: cosouls_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input cosouls_stream_cursor_value_input {
  address: citext
  id: Int
  pgive: Int
  token_id: Int
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""
tracks the amount of keys an address holds in a given subject. updated with data from the key_tx table
"""
type link_holders {
  amount: Int!
  holder: citext!

  """
  An object relationship
  """
  holder_cosoul: cosouls
  target: citext!

  """
  An object relationship
  """
  target_cosoul: cosouls
  updated_at: timestamptz!
}

"""
aggregated selection of "link_holders"
"""
type link_holders_aggregate {
  aggregate: link_holders_aggregate_fields
  nodes: [link_holders!]!
}

input link_holders_aggregate_bool_exp {
  count: link_holders_aggregate_bool_exp_count
}

input link_holders_aggregate_bool_exp_count {
  arguments: [link_holders_select_column!]
  distinct: Boolean
  filter: link_holders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "link_holders"
"""
type link_holders_aggregate_fields {
  avg: link_holders_avg_fields
  count(columns: [link_holders_select_column!], distinct: Boolean): Int!
  max: link_holders_max_fields
  min: link_holders_min_fields
  stddev: link_holders_stddev_fields
  stddev_pop: link_holders_stddev_pop_fields
  stddev_samp: link_holders_stddev_samp_fields
  sum: link_holders_sum_fields
  var_pop: link_holders_var_pop_fields
  var_samp: link_holders_var_samp_fields
  variance: link_holders_variance_fields
}

"""
order by aggregate values of table "link_holders"
"""
input link_holders_aggregate_order_by {
  avg: link_holders_avg_order_by
  count: order_by
  max: link_holders_max_order_by
  min: link_holders_min_order_by
  stddev: link_holders_stddev_order_by
  stddev_pop: link_holders_stddev_pop_order_by
  stddev_samp: link_holders_stddev_samp_order_by
  sum: link_holders_sum_order_by
  var_pop: link_holders_var_pop_order_by
  var_samp: link_holders_var_samp_order_by
  variance: link_holders_variance_order_by
}

"""
aggregate avg on columns
"""
type link_holders_avg_fields {
  amount: Float
}

"""
order by avg() on columns of table "link_holders"
"""
input link_holders_avg_order_by {
  amount: order_by
}

"""
Boolean expression to filter rows from the table "link_holders". All fields are combined with a logical 'AND'.
"""
input link_holders_bool_exp {
  _and: [link_holders_bool_exp!]
  _not: link_holders_bool_exp
  _or: [link_holders_bool_exp!]
  amount: Int_comparison_exp
  holder: citext_comparison_exp
  holder_cosoul: cosouls_bool_exp
  target: citext_comparison_exp
  target_cosoul: cosouls_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type link_holders_max_fields {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
order by max() on columns of table "link_holders"
"""
input link_holders_max_order_by {
  amount: order_by
  holder: order_by
  target: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type link_holders_min_fields {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
order by min() on columns of table "link_holders"
"""
input link_holders_min_order_by {
  amount: order_by
  holder: order_by
  target: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "link_holders".
"""
input link_holders_order_by {
  amount: order_by
  holder: order_by
  holder_cosoul: cosouls_order_by
  target: order_by
  target_cosoul: cosouls_order_by
  updated_at: order_by
}

"""
select columns of table "link_holders"
"""
enum link_holders_select_column {
  """
  column name
  """
  amount

  """
  column name
  """
  holder

  """
  column name
  """
  target

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type link_holders_stddev_fields {
  amount: Float
}

"""
order by stddev() on columns of table "link_holders"
"""
input link_holders_stddev_order_by {
  amount: order_by
}

"""
aggregate stddev_pop on columns
"""
type link_holders_stddev_pop_fields {
  amount: Float
}

"""
order by stddev_pop() on columns of table "link_holders"
"""
input link_holders_stddev_pop_order_by {
  amount: order_by
}

"""
aggregate stddev_samp on columns
"""
type link_holders_stddev_samp_fields {
  amount: Float
}

"""
order by stddev_samp() on columns of table "link_holders"
"""
input link_holders_stddev_samp_order_by {
  amount: order_by
}

"""
Streaming cursor of the table "link_holders"
"""
input link_holders_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: link_holders_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input link_holders_stream_cursor_value_input {
  amount: Int
  holder: citext
  target: citext
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type link_holders_sum_fields {
  amount: Int
}

"""
order by sum() on columns of table "link_holders"
"""
input link_holders_sum_order_by {
  amount: order_by
}

"""
aggregate var_pop on columns
"""
type link_holders_var_pop_fields {
  amount: Float
}

"""
order by var_pop() on columns of table "link_holders"
"""
input link_holders_var_pop_order_by {
  amount: order_by
}

"""
aggregate var_samp on columns
"""
type link_holders_var_samp_fields {
  amount: Float
}

"""
order by var_samp() on columns of table "link_holders"
"""
input link_holders_var_samp_order_by {
  amount: order_by
}

"""
aggregate variance on columns
"""
type link_holders_variance_fields {
  amount: Float
}

"""
order by variance() on columns of table "link_holders"
"""
input link_holders_variance_order_by {
  amount: order_by
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
Poap event info
"""
type poap_events {
  city: String!
  country: String!
  created_at: timestamptz!
  description: String!
  embedding: vector
  end_date: date!
  event_url: String!
  expiry_date: date!
  fancy_id: String!
  id: bigint!
  image_url: String!
  name: String!
  poap_id: Int!
  similarity: float8
  start_date: date!
  supply: Int!
  updated_at: timestamptz!
  year: Int!
}

"""
aggregated selection of "poap_events"
"""
type poap_events_aggregate {
  aggregate: poap_events_aggregate_fields
  nodes: [poap_events!]!
}

"""
aggregate fields of "poap_events"
"""
type poap_events_aggregate_fields {
  avg: poap_events_avg_fields
  count(columns: [poap_events_select_column!], distinct: Boolean): Int!
  max: poap_events_max_fields
  min: poap_events_min_fields
  stddev: poap_events_stddev_fields
  stddev_pop: poap_events_stddev_pop_fields
  stddev_samp: poap_events_stddev_samp_fields
  sum: poap_events_sum_fields
  var_pop: poap_events_var_pop_fields
  var_samp: poap_events_var_samp_fields
  variance: poap_events_variance_fields
}

"""
aggregate avg on columns
"""
type poap_events_avg_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
Boolean expression to filter rows from the table "poap_events". All fields are combined with a logical 'AND'.
"""
input poap_events_bool_exp {
  _and: [poap_events_bool_exp!]
  _not: poap_events_bool_exp
  _or: [poap_events_bool_exp!]
  city: String_comparison_exp
  country: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  embedding: vector_comparison_exp
  end_date: date_comparison_exp
  event_url: String_comparison_exp
  expiry_date: date_comparison_exp
  fancy_id: String_comparison_exp
  id: bigint_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
  poap_id: Int_comparison_exp
  similarity: float8_comparison_exp
  start_date: date_comparison_exp
  supply: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  year: Int_comparison_exp
}

"""
aggregate max on columns
"""
type poap_events_max_fields {
  city: String
  country: String
  created_at: timestamptz
  description: String
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
aggregate min on columns
"""
type poap_events_min_fields {
  city: String
  country: String
  created_at: timestamptz
  description: String
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
Ordering options when selecting data from "poap_events".
"""
input poap_events_order_by {
  city: order_by
  country: order_by
  created_at: order_by
  description: order_by
  embedding: order_by
  end_date: order_by
  event_url: order_by
  expiry_date: order_by
  fancy_id: order_by
  id: order_by
  image_url: order_by
  name: order_by
  poap_id: order_by
  similarity: order_by
  start_date: order_by
  supply: order_by
  updated_at: order_by
  year: order_by
}

"""
select columns of table "poap_events"
"""
enum poap_events_select_column {
  """
  column name
  """
  city

  """
  column name
  """
  country

  """
  column name
  """
  created_at

  """
  column name
  """
  description

  """
  column name
  """
  embedding

  """
  column name
  """
  end_date

  """
  column name
  """
  event_url

  """
  column name
  """
  expiry_date

  """
  column name
  """
  fancy_id

  """
  column name
  """
  id

  """
  column name
  """
  image_url

  """
  column name
  """
  name

  """
  column name
  """
  poap_id

  """
  column name
  """
  similarity

  """
  column name
  """
  start_date

  """
  column name
  """
  supply

  """
  column name
  """
  updated_at

  """
  column name
  """
  year
}

"""
aggregate stddev on columns
"""
type poap_events_stddev_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate stddev_pop on columns
"""
type poap_events_stddev_pop_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate stddev_samp on columns
"""
type poap_events_stddev_samp_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
Streaming cursor of the table "poap_events"
"""
input poap_events_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: poap_events_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input poap_events_stream_cursor_value_input {
  city: String
  country: String
  created_at: timestamptz
  description: String
  embedding: vector
  end_date: date
  event_url: String
  expiry_date: date
  fancy_id: String
  id: bigint
  image_url: String
  name: String
  poap_id: Int
  similarity: float8
  start_date: date
  supply: Int
  updated_at: timestamptz
  year: Int
}

"""
aggregate sum on columns
"""
type poap_events_sum_fields {
  id: bigint
  poap_id: Int
  similarity: float8
  supply: Int
  year: Int
}

"""
aggregate var_pop on columns
"""
type poap_events_var_pop_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate var_samp on columns
"""
type poap_events_var_samp_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
aggregate variance on columns
"""
type poap_events_variance_fields {
  id: Float
  poap_id: Float
  similarity: Float
  supply: Float
  year: Float
}

"""
columns and relationships of "poap_holders"
"""
type poap_holders {
  address: citext!
  chain: String!

  """
  An object relationship
  """
  cosoul: cosouls
  created_at: timestamptz!

  """
  An object relationship
  """
  event: poap_events!
  event_id: bigint!
  id: bigint!
  poap_created: timestamptz!
  token_id: bigint!
  updated_at: timestamptz!
}

"""
aggregated selection of "poap_holders"
"""
type poap_holders_aggregate {
  aggregate: poap_holders_aggregate_fields
  nodes: [poap_holders!]!
}

input poap_holders_aggregate_bool_exp {
  count: poap_holders_aggregate_bool_exp_count
}

input poap_holders_aggregate_bool_exp_count {
  arguments: [poap_holders_select_column!]
  distinct: Boolean
  filter: poap_holders_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "poap_holders"
"""
type poap_holders_aggregate_fields {
  avg: poap_holders_avg_fields
  count(columns: [poap_holders_select_column!], distinct: Boolean): Int!
  max: poap_holders_max_fields
  min: poap_holders_min_fields
  stddev: poap_holders_stddev_fields
  stddev_pop: poap_holders_stddev_pop_fields
  stddev_samp: poap_holders_stddev_samp_fields
  sum: poap_holders_sum_fields
  var_pop: poap_holders_var_pop_fields
  var_samp: poap_holders_var_samp_fields
  variance: poap_holders_variance_fields
}

"""
order by aggregate values of table "poap_holders"
"""
input poap_holders_aggregate_order_by {
  avg: poap_holders_avg_order_by
  count: order_by
  max: poap_holders_max_order_by
  min: poap_holders_min_order_by
  stddev: poap_holders_stddev_order_by
  stddev_pop: poap_holders_stddev_pop_order_by
  stddev_samp: poap_holders_stddev_samp_order_by
  sum: poap_holders_sum_order_by
  var_pop: poap_holders_var_pop_order_by
  var_samp: poap_holders_var_samp_order_by
  variance: poap_holders_variance_order_by
}

"""
aggregate avg on columns
"""
type poap_holders_avg_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by avg() on columns of table "poap_holders"
"""
input poap_holders_avg_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
Boolean expression to filter rows from the table "poap_holders". All fields are combined with a logical 'AND'.
"""
input poap_holders_bool_exp {
  _and: [poap_holders_bool_exp!]
  _not: poap_holders_bool_exp
  _or: [poap_holders_bool_exp!]
  address: citext_comparison_exp
  chain: String_comparison_exp
  cosoul: cosouls_bool_exp
  created_at: timestamptz_comparison_exp
  event: poap_events_bool_exp
  event_id: bigint_comparison_exp
  id: bigint_comparison_exp
  poap_created: timestamptz_comparison_exp
  token_id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
aggregate max on columns
"""
type poap_holders_max_fields {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "poap_holders"
"""
input poap_holders_max_order_by {
  address: order_by
  chain: order_by
  created_at: order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
aggregate min on columns
"""
type poap_holders_min_fields {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "poap_holders"
"""
input poap_holders_min_order_by {
  address: order_by
  chain: order_by
  created_at: order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
Ordering options when selecting data from "poap_holders".
"""
input poap_holders_order_by {
  address: order_by
  chain: order_by
  cosoul: cosouls_order_by
  created_at: order_by
  event: poap_events_order_by
  event_id: order_by
  id: order_by
  poap_created: order_by
  token_id: order_by
  updated_at: order_by
}

"""
select columns of table "poap_holders"
"""
enum poap_holders_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  chain

  """
  column name
  """
  created_at

  """
  column name
  """
  event_id

  """
  column name
  """
  id

  """
  column name
  """
  poap_created

  """
  column name
  """
  token_id

  """
  column name
  """
  updated_at
}

"""
aggregate stddev on columns
"""
type poap_holders_stddev_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev() on columns of table "poap_holders"
"""
input poap_holders_stddev_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate stddev_pop on columns
"""
type poap_holders_stddev_pop_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev_pop() on columns of table "poap_holders"
"""
input poap_holders_stddev_pop_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate stddev_samp on columns
"""
type poap_holders_stddev_samp_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by stddev_samp() on columns of table "poap_holders"
"""
input poap_holders_stddev_samp_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
Streaming cursor of the table "poap_holders"
"""
input poap_holders_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: poap_holders_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input poap_holders_stream_cursor_value_input {
  address: citext
  chain: String
  created_at: timestamptz
  event_id: bigint
  id: bigint
  poap_created: timestamptz
  token_id: bigint
  updated_at: timestamptz
}

"""
aggregate sum on columns
"""
type poap_holders_sum_fields {
  event_id: bigint
  id: bigint
  token_id: bigint
}

"""
order by sum() on columns of table "poap_holders"
"""
input poap_holders_sum_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate var_pop on columns
"""
type poap_holders_var_pop_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by var_pop() on columns of table "poap_holders"
"""
input poap_holders_var_pop_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate var_samp on columns
"""
type poap_holders_var_samp_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by var_samp() on columns of table "poap_holders"
"""
input poap_holders_var_samp_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
aggregate variance on columns
"""
type poap_holders_variance_fields {
  event_id: Float
  id: Float
  token_id: Float
}

"""
order by variance() on columns of table "poap_holders"
"""
input poap_holders_variance_order_by {
  event_id: order_by
  id: order_by
  token_id: order_by
}

"""
columns and relationships of "profiles_public"
"""
type profiles_public {
  address: String
  avatar: String

  """
  An object relationship
  """
  cosoul: cosouls
  id: bigint
  name: citext
}

"""
Boolean expression to filter rows from the table "profiles_public". All fields are combined with a logical 'AND'.
"""
input profiles_public_bool_exp {
  _and: [profiles_public_bool_exp!]
  _not: profiles_public_bool_exp
  _or: [profiles_public_bool_exp!]
  address: String_comparison_exp
  avatar: String_comparison_exp
  cosoul: cosouls_bool_exp
  id: bigint_comparison_exp
  name: citext_comparison_exp
}

"""
Ordering options when selecting data from "profiles_public".
"""
input profiles_public_order_by {
  address: order_by
  avatar: order_by
  cosoul: cosouls_order_by
  id: order_by
  name: order_by
}

"""
select columns of table "profiles_public"
"""
enum profiles_public_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  avatar

  """
  column name
  """
  id

  """
  column name
  """
  name
}

"""
Streaming cursor of the table "profiles_public"
"""
input profiles_public_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_public_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_public_stream_cursor_value_input {
  address: String
  avatar: String
  id: bigint
  name: citext
}

type query_root {
  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  fetch data from the table: "link_holders"
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  fetch aggregated fields from the table: "link_holders"
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  fetch data from the table: "link_holders" using primary key columns
  """
  link_holders_by_pk(holder: citext!, target: citext!): link_holders

  """
  fetch data from the table: "poap_events"
  """
  poap_events(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch aggregated fields from the table: "poap_events"
  """
  poap_events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  fetch data from the table: "poap_events" using primary key columns
  """
  poap_events_by_pk(id: bigint!): poap_events

  """
  fetch data from the table: "poap_holders"
  """
  poap_holders(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch aggregated fields from the table: "poap_holders"
  """
  poap_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  fetch data from the table: "poap_holders" using primary key columns
  """
  poap_holders_by_pk(id: bigint!): poap_holders
  price_per_share(chain_id: Int!, token_address: String): Float!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  execute function "vector_search_poap_events" which returns "poap_events"
  """
  vector_search_poap_events(
    """
    input parameters for function "vector_search_poap_events"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  execute function "vector_search_poap_events" and query aggregates on result of table type "poap_events"
  """
  vector_search_poap_events_aggregate(
    """
    input parameters for function "vector_search_poap_events_aggregate"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  execute function "vector_search_poap_holders" which returns "poap_holders"
  """
  vector_search_poap_holders(
    """
    input parameters for function "vector_search_poap_holders"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  execute function "vector_search_poap_holders" and query aggregates on result of table type "poap_holders"
  """
  vector_search_poap_holders_aggregate(
    """
    input parameters for function "vector_search_poap_holders_aggregate"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!
}

type subscription_root {
  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  fetch data from the table in a streaming manner: "cosouls"
  """
  cosouls_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [cosouls_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "link_holders"
  """
  link_holders(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  fetch aggregated fields from the table: "link_holders"
  """
  link_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [link_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [link_holders_order_by!]

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): link_holders_aggregate!

  """
  fetch data from the table: "link_holders" using primary key columns
  """
  link_holders_by_pk(holder: citext!, target: citext!): link_holders

  """
  fetch data from the table in a streaming manner: "link_holders"
  """
  link_holders_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [link_holders_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: link_holders_bool_exp
  ): [link_holders!]!

  """
  fetch data from the table: "poap_events"
  """
  poap_events(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch aggregated fields from the table: "poap_events"
  """
  poap_events_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  fetch data from the table: "poap_events" using primary key columns
  """
  poap_events_by_pk(id: bigint!): poap_events

  """
  fetch data from the table in a streaming manner: "poap_events"
  """
  poap_events_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [poap_events_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  fetch data from the table: "poap_holders"
  """
  poap_holders(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch aggregated fields from the table: "poap_holders"
  """
  poap_holders_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!

  """
  fetch data from the table: "poap_holders" using primary key columns
  """
  poap_holders_by_pk(id: bigint!): poap_holders

  """
  fetch data from the table in a streaming manner: "poap_holders"
  """
  poap_holders_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [poap_holders_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  fetch data from the table in a streaming manner: "profiles_public"
  """
  profiles_public_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_public_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  execute function "vector_search_poap_events" which returns "poap_events"
  """
  vector_search_poap_events(
    """
    input parameters for function "vector_search_poap_events"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): [poap_events!]!

  """
  execute function "vector_search_poap_events" and query aggregates on result of table type "poap_events"
  """
  vector_search_poap_events_aggregate(
    """
    input parameters for function "vector_search_poap_events_aggregate"
    """
    args: vector_search_poap_events_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_events_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_events_order_by!]

    """
    filter the rows returned
    """
    where: poap_events_bool_exp
  ): poap_events_aggregate!

  """
  execute function "vector_search_poap_holders" which returns "poap_holders"
  """
  vector_search_poap_holders(
    """
    input parameters for function "vector_search_poap_holders"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): [poap_holders!]!

  """
  execute function "vector_search_poap_holders" and query aggregates on result of table type "poap_holders"
  """
  vector_search_poap_holders_aggregate(
    """
    input parameters for function "vector_search_poap_holders_aggregate"
    """
    args: vector_search_poap_holders_args!

    """
    distinct select on columns
    """
    distinct_on: [poap_holders_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [poap_holders_order_by!]

    """
    filter the rows returned
    """
    where: poap_holders_bool_exp
  ): poap_holders_aggregate!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar vector

"""
Boolean expression to compare columns of type "vector". All fields are combined with logical 'AND'.
"""
input vector_comparison_exp {
  _eq: vector
  _gt: vector
  _gte: vector
  _in: [vector!]
  _is_null: Boolean
  _lt: vector
  _lte: vector
  _neq: vector
  _nin: [vector!]
}

input vector_search_poap_events_args {
  limit_count: Int
  match_threshold: float8
  target_vector: vector
}

input vector_search_poap_holders_args {
  limit_count: Int
  match_threshold: float8
  target_vector: vector
}
