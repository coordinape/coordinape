schema {
  query: query_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """
  does the column NOT match the given pattern
  """
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """
  does the column match the given SQL regular expression
  """
  _similar: citext
}

"""
local db copy of last synced on-chain cosoul data
"""
type cosouls {
  address: citext!
  id: Int!
  pgive: Int

  """
  An object relationship
  """
  profile_public: profiles_public
  token_id: Int!
}

"""
Boolean expression to filter rows from the table "cosouls". All fields are combined with a logical 'AND'.
"""
input cosouls_bool_exp {
  _and: [cosouls_bool_exp!]
  _not: cosouls_bool_exp
  _or: [cosouls_bool_exp!]
  address: citext_comparison_exp
  id: Int_comparison_exp
  pgive: Int_comparison_exp
  profile_public: profiles_public_bool_exp
  token_id: Int_comparison_exp
}

"""
Ordering options when selecting data from "cosouls".
"""
input cosouls_order_by {
  address: order_by
  id: order_by
  pgive: order_by
  profile_public: profiles_public_order_by
  token_id: order_by
}

"""
select columns of table "cosouls"
"""
enum cosouls_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  id

  """
  column name
  """
  pgive

  """
  column name
  """
  token_id
}

"""
Streaming cursor of the table "cosouls"
"""
input cosouls_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: cosouls_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input cosouls_stream_cursor_value_input {
  address: citext
  id: Int
  pgive: Int
  token_id: Int
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

"""
columns and relationships of "profiles_public"
"""
type profiles_public {
  address: String
  avatar: String
  id: bigint
  name: citext
}

"""
Boolean expression to filter rows from the table "profiles_public". All fields are combined with a logical 'AND'.
"""
input profiles_public_bool_exp {
  _and: [profiles_public_bool_exp!]
  _not: profiles_public_bool_exp
  _or: [profiles_public_bool_exp!]
  address: String_comparison_exp
  avatar: String_comparison_exp
  id: bigint_comparison_exp
  name: citext_comparison_exp
}

"""
Ordering options when selecting data from "profiles_public".
"""
input profiles_public_order_by {
  address: order_by
  avatar: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "profiles_public"
"""
enum profiles_public_select_column {
  """
  column name
  """
  address

  """
  column name
  """
  avatar

  """
  column name
  """
  id

  """
  column name
  """
  name
}

"""
Streaming cursor of the table "profiles_public"
"""
input profiles_public_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: profiles_public_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input profiles_public_stream_cursor_value_input {
  address: String
  avatar: String
  id: bigint
  name: citext
}

type query_root {
  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls
  price_per_share(chain_id: Int!, token_address: String): Float!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!
}

type subscription_root {
  """
  fetch data from the table: "cosouls"
  """
  cosouls(
    """
    distinct select on columns
    """
    distinct_on: [cosouls_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [cosouls_order_by!]

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "cosouls" using primary key columns
  """
  cosouls_by_pk(id: Int!): cosouls

  """
  fetch data from the table in a streaming manner: "cosouls"
  """
  cosouls_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [cosouls_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: cosouls_bool_exp
  ): [cosouls!]!

  """
  fetch data from the table: "profiles_public"
  """
  profiles_public(
    """
    distinct select on columns
    """
    distinct_on: [profiles_public_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [profiles_public_order_by!]

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!

  """
  fetch data from the table in a streaming manner: "profiles_public"
  """
  profiles_public_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [profiles_public_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: profiles_public_bool_exp
  ): [profiles_public!]!
}
