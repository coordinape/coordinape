# Change this to your own address (this is first address of below mnemonic).
LOCAL_SEED_ADDRESS=0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266
# Change this to another address of yours to help in testing
LOCAL_SEED_ADDRESS2=0x09DB0a93B389bEF724429898f539AEB7ac2Dd55f
# Note: use dashes instead of spaces for mnemonic since bash parses spaces incorrectly
DEV_SEED_PHRASE="test-test-test-test-test-test-test-test-test-test-test-junk"

COSOUL_BASE_URI=https://api.coordinape.com/nft/

COORDINAPE_USER_ADDRESS=0xfad763da9051953fea58c2304395719a3b6ba361
IMAGES_AWS_BUCKET=coordinape
IMAGE_DIR=assets/static/images/
# separate allowed domains with commas, only used for production
# SIWE_ALLOWED_DOMAINS=

# MAGIC PUBLISHABLE API KEY for front end
VITE_MAGIC_API_KEY=
# MAGIC SECRET KEY for back end
MAGIC_SECRET_API_KEY=

# Default local variables
LOCAL_HASURA_PORT=8080
LOCAL_POSTGRES_PORT=5432
LOCAL_WEB_PORT=3000
LOCAL_POSTGRES_USER=postgres
LOCAL_POSTGRES_PASSWORD=postgrespassword
LOCAL_POSTGRES_DATABASE=postgres

# enable app debug and error logs
DEBUG=coordinape*

# Create a bot here: https://discord.com/developers/applications
# follow the config instructions here:
# https://github.com/coordinape/coordinape/pull/1625#issue-1434577977
DISCORD_BOT_CLIENT_ID=no_token
DISCORD_BOT_CLIENT_SECRET=no_token
DISCORD_BOT_REDIRECT_URI=http://localhost:3000/discord/link
# used by hasura notification events to authenticate notification requests
# with the discord bot
COORDINAPE_BOT_SECRET=bot-secret
# used by the discord bot to authenticate requests to hasura
HASURA_DISCORD_SECRET=discord-secret

# Enable local logging
# DEV_LOGGING=true


# Hardhat
HARDHAT_CHAIN_ID=1337
HARDHAT_PORT=8545
HARDHAT_GANACHE_CHAIN_ID=1338
HARDHAT_GANACHE_PORT=8546
HARDHAT_FORK_BLOCK=13500000
HARDHAT_OWNER_ADDRESS=0xYOUR_DEV_ADDRESS
TEST_ON_HARDHAT_NODE=

#OPTIMISM_SEPOLIA_MNEMONIC=add a mnemonic for use deploying to optimism goerli
#COSOUL_OPTIMISM_MNEMONIC=add a mnemonic for use deploying to optimism mainnet

# used to submit contract verifications to etherscan during hardhat deploys
#ETHERSCAN_API_KEY=your-api-key

# Public FE key for Alchemy
VITE_FE_ALCHEMY_API_KEY=get-a-key-from-alchemy

#Backend private keys for Alchemy
BE_ALCHEMY_API_KEY=get-a-key-from-alchemy

# HASURA_GRAPHQL auto used by hasura CLI (used with ./hasura/config.yaml)
HASURA_GRAPHQL_ENDPOINT=http://localhost:8080
HASURA_GRAPHQL_ADMIN_SECRET=admin-secret
HASURA_EVENT_SECRET=event-secret

# Local Environment
VITE_HASURA_URL=http://localhost:8080/v1/graphql
VITE_S3_BASE_URL=http://coordinape.s3-website.localhost.localstack.cloud:4566/
# NODE: Used for the node scripts and vercel serverless functions
NODE_HASURA_URL=http://localhost:8080/v1/graphql
TELEGRAM_BOT_TOKEN=your-telegramt-testing-bot-token
IMAGES_AWS_ENDPOINT=http://s3.localhost.localstack.cloud:4566

# Staging Environment
#VITE_HASURA_URL=https://coordinape-staging.hasura.app/v1/graphql
#VITE_S3_BASE_URL=https://coordinape-staging.s3.amazonaws.com/

# Production Environment
#VITE_HASURA_URL=https://coordinape-prod.hasura.app/v1/graphql
#VITE_S3_BASE_URL=https://coordinape-prod.s3.amazonaws.com/
#MIXPANEL_PROJECT_TOKEN=...

# CI Environment - added as env vars in github if no conflicts exist
#NODE_HASURA_URL=http://localhost:8081/v1/graphql
#HASURA_GRAPHQL_ENDPOINT=http://localhost:8081
#VITE_HASURA_URL=http://localhost:8081/v1/graphql

# for src/scripts
# go to https://www.figma.com/developers/api#authentication
FIGMA_ACCESS_TOKEN=

# These will need to be set to something meaningful for deployment, but in local can be unset
IMAGES_AWS_ACCESS_KEY_ID=tbd
IMAGES_AWS_SECRET_ACCESS_KEY=tbd
IMAGES_AWS_REGION=tbd

PGIVE_CIRCLE_MAX_PER_CRON=10

BASE_ACTIVE_POINTS=100;
MAX_BASE_ACTIVE_TOTAL=3000;
PER_ACTIVE_MONTH_BONUS=4;
MAX_ACTIVE_MONTH_BONUS=48;
MAX_NOTE_BONUS_PER_USER=30;

#this should be set to the last day of the previous month to enable backfilling
BACKFILL_TO=2022-12-31

#this is only needed if you are running cosoul screenshotting locally
#You will need to install chromium via: > npx @puppeteer/browsers install chromium@latest --path /tmp/localChromium
#Then point this to the binary location
CHROMIUM_BINARY_LOCATION='/tmp/localChromium/chromium/mac_arm-1185692/chrome-mac/Chromium.app/Contents/MacOS/Chromium',

#POAP_API_KEY=forpoapdatafetching
#POSTMARK_SERVER_TOKEN=youll need a token to send any email'
#OPENAI_API_KEY=
#HELICONE_API_KEY=

# vim: ft=sh
# wallet connect
#VITE_WALLET_CONNECT_V2_PROJECT_ID=
NEYNAR_API_KEY=
NEYNAR_WEBHOOK_SECRET=
NEYNAR_BOT_SIGNER_UUID=
#Decent XYZ API Key
VITE_DECENT_XYZ_API_KEY
